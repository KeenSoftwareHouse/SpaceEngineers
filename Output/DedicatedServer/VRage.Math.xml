<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Math</name>
    </assembly>
    <members>
        <member name="T:VRageMath.Base27Directions">
            <summary>
            Base 26 directions and Vector3.Zero
            Each component is only 0,-1 or 1;
            </summary>
        </member>
        <member name="M:VRageMath.Base27Directions.GetDirection(VRageMath.Vector3)">
            <summary>
            Vector must be normalized, allowed values for components are: 0, 1, -1, 0.707, -0.707, 0.577, -0.577
            </summary>
        </member>
        <member name="F:VRageMath.Base6Directions.LeftDirections">
            <summary>
            Pre-calculated left directions for given forward (index / 6) and up (index % 6) directions
            </summary>
        </member>
        <member name="T:VRageMath.BoundingBox">
            <summary>
            Defines an axis-aligned box-shaped 3D volume.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingBox.CornerCount">
            <summary>
            Specifies the total number of corners (8) in the BoundingBox.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingBox.Min">
            <summary>
            The minimum point the BoundingBox contains.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingBox.Max">
            <summary>
            The maximum point the BoundingBox contains.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBox.#ctor(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Creates an instance of BoundingBox.
            </summary>
            <param name="min">The minimum point the BoundingBox includes.</param><param name="max">The maximum point the BoundingBox includes.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.op_Equality(VRageMath.BoundingBox,VRageMath.BoundingBox)">
            <summary>
            Determines whether two instances of BoundingBox are equal.
            </summary>
            <param name="a">BoundingBox to compare.</param><param name="b">BoundingBox to compare.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.op_Inequality(VRageMath.BoundingBox,VRageMath.BoundingBox)">
            <summary>
            Determines whether two instances of BoundingBox are not equal.
            </summary>
            <param name="a">The object to the left of the inequality operator.</param><param name="b">The object to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.GetCorners">
            <summary>
            Gets an array of points that make up the corners of the BoundingBox.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBox.GetCorners(VRageMath.Vector3[])">
            <summary>
            Gets the array of points that make up the corners of the BoundingBox.
            </summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.GetCornersUnsafe(VRageMath.Vector3*)">
            <summary>
            Gets the array of points that make up the corners of the BoundingBox.
            </summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Equals(VRageMath.BoundingBox)">
            <summary>
            Determines whether two instances of BoundingBox are equal.
            </summary>
            <param name="other">The BoundingBox to compare with the current BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether two instances of BoundingBox are equal.
            </summary>
            <param name="obj">The Object to compare with the current BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBox.ToString">
            <summary>
            Returns a String that represents the current BoundingBox.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBox.CreateMerged(VRageMath.BoundingBox,VRageMath.BoundingBox)">
            <summary>
            Creates the smallest BoundingBox that contains the two specified BoundingBox instances.
            </summary>
            <param name="original">One of the BoundingBoxs to contain.</param><param name="additional">One of the BoundingBoxs to contain.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.CreateMerged(VRageMath.BoundingBox@,VRageMath.BoundingBox@,VRageMath.BoundingBox@)">
            <summary>
            Creates the smallest BoundingBox that contains the two specified BoundingBox instances.
            </summary>
            <param name="original">One of the BoundingBox instances to contain.</param><param name="additional">One of the BoundingBox instances to contain.</param><param name="result">[OutAttribute] The created BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.CreateFromSphere(VRageMath.BoundingSphere)">
            <summary>
            Creates the smallest BoundingBox that will contain the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to contain.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.CreateFromSphere(VRageMath.BoundingSphere@,VRageMath.BoundingBox@)">
            <summary>
            Creates the smallest BoundingBox that will contain the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to contain.</param><param name="result">[OutAttribute] The created BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{VRageMath.Vector3})">
            <summary>
            Creates the smallest BoundingBox that will contain a group of points.
            </summary>
            <param name="points">A list of points the BoundingBox should contain.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersect(VRageMath.BoundingBox)">
            <summary>
            Returns bounding box which is intersection of this and box
            It's called 'Prunik'
            Result is invalid box when there's no intersection (Min > Max)
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.BoundingBox)">
            <summary>
            Checks whether the current BoundingBox intersects another BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingBox intersects another BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingBox instances intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the current BoundingBox intersects a BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.Plane)">
            <summary>
            Checks whether the current BoundingBox intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.Plane@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingBox intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the BoundingBox intersects the Plane.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.Ray)">
            <summary>
            Checks whether the current BoundingBox intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingBox intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox, or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the current BoundingBox intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Intersects(VRageMath.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingBox intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingBox and BoundingSphere intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.BoundingBox)">
            <summary>
            Tests whether the BoundingBox contains another BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.BoundingBox@,VRageMath.ContainmentType@)">
            <summary>
            Tests whether the BoundingBox contains a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.BoundingFrustum)">
            <summary>
            Tests whether the BoundingBox contains a BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.Vector3)">
            <summary>
            Tests whether the BoundingBox contains a point.
            </summary>
            <param name="point">The point to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.Vector3@,VRageMath.ContainmentType@)">
            <summary>
            Tests whether the BoundingBox contains a point.
            </summary>
            <param name="point">The point to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.BoundingSphere)">
            <summary>
            Tests whether the BoundingBox contains a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBox.Contains(VRageMath.BoundingSphere@,VRageMath.ContainmentType@)">
            <summary>
            Tests whether the BoundingBox contains a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRageMath.BoundingBox.Translate(VRageMath.Matrix)" -->
        <member name="M:VRageMath.BoundingBox.Translate(VRageMath.Vector3)">
            <summary>
            Translate
            </summary>
            <param name="bbox"></param>
            <param name="vctTranlsation"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.BoundingBox.Include(VRageMath.Vector3@)">
            <summary>
            return expanded aabb (abb include point)
            </summary>
            <param name="bbox"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.BoundingBox.Include(VRageMath.BoundingBox@)">
            <summary>
            return expanded aabb (abb include point)
            </summary>
            <param name="bbox"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:VRageMath.BoundingBox.Center">
            <summary>
            Calculates center
            </summary>
        </member>
        <member name="P:VRageMath.BoundingBox.Size">
            <summary>
            Size
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRageMath.BoundingBox.Matrix">
            <summary>
            Matrix of AABB, respection center and size
            </summary>
        </member>
        <member name="P:VRageMath.BoundingBox.Perimeter">
            <summary>
            return perimeter of edges
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRageMath.BoundingFrustum">
            <summary>
            Defines a frustum and helps determine whether forms intersect with it.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingFrustum.CornerCount">
            <summary>
            Specifies the total number of corners (8) in the BoundingFrustum.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustum.#ctor(VRageMath.Matrix)">
            <summary>
            Creates a new instance of BoundingFrustum.
            </summary>
            <param name="value">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.op_Equality(VRageMath.BoundingFrustum,VRageMath.BoundingFrustum)">
            <summary>
            Determines whether two instances of BoundingFrustum are equal.
            </summary>
            <param name="a">The BoundingFrustum to the left of the equality operator.</param><param name="b">The BoundingFrustum to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.op_Inequality(VRageMath.BoundingFrustum,VRageMath.BoundingFrustum)">
            <summary>
            Determines whether two instances of BoundingFrustum are not equal.
            </summary>
            <param name="a">The BoundingFrustum to the left of the inequality operator.</param><param name="b">The BoundingFrustum to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.GetCorners">
            <summary>
            Gets an array of points that make up the corners of the BoundingFrustum.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustum.GetCorners(VRageMath.Vector3[])">
            <summary>
            Gets an array of points that make up the corners of the BoundingFrustum.
            </summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingFrustum are written.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Equals(VRageMath.BoundingFrustum)">
            <summary>
            Determines whether the specified BoundingFrustum is equal to the current BoundingFrustum.
            </summary>
            <param name="other">The BoundingFrustum to compare with the current BoundingFrustum.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the BoundingFrustum.
            </summary>
            <param name="obj">The Object to compare with the current BoundingFrustum.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustum.ToString">
            <summary>
            Returns a String that represents the current BoundingFrustum.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.BoundingBox)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingFrustum and BoundingBox intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.Plane)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The Plane to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.Plane@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the BoundingFrustum intersects the Plane.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.Ray)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Intersects(VRageMath.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingFrustum and BoundingSphere intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.BoundingBox)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.BoundingBox@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.Vector3)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified point.
            </summary>
            <param name="point">The point to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.Vector3@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified point.
            </summary>
            <param name="point">The point to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustum.Contains(VRageMath.BoundingSphere@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingFrustum contains the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="T:VRageMath.BoundingSphere">
            <summary>
            Defines a sphere.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingSphere.Center">
            <summary>
            The center point of the sphere.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingSphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingSphere.#ctor(VRageMath.Vector3,System.Single)">
            <summary>
            Creates a new instance of BoundingSphere.
            </summary>
            <param name="center">Center point of the sphere.</param><param name="radius">Radius of the sphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.op_Equality(VRageMath.BoundingSphere,VRageMath.BoundingSphere)">
            <summary>
            Determines whether two instances of BoundingSphere are equal.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.op_Inequality(VRageMath.BoundingSphere,VRageMath.BoundingSphere)">
            <summary>
            Determines whether two instances of BoundingSphere are not equal.
            </summary>
            <param name="a">The BoundingSphere to the left of the inequality operator.</param><param name="b">The BoundingSphere to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Equals(VRageMath.BoundingSphere)">
            <summary>
            Determines whether the specified BoundingSphere is equal to the current BoundingSphere.
            </summary>
            <param name="other">The BoundingSphere to compare with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the BoundingSphere.
            </summary>
            <param name="obj">The Object to compare with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingSphere.ToString">
            <summary>
            Returns a String that represents the current BoundingSphere.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingSphere.CreateMerged(VRageMath.BoundingSphere,VRageMath.BoundingSphere)">
            <summary>
            Creates a BoundingSphere that contains the two specified BoundingSphere instances.
            </summary>
            <param name="original">BoundingSphere to be merged.</param><param name="additional">BoundingSphere to be merged.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.CreateMerged(VRageMath.BoundingSphere@,VRageMath.BoundingSphere@,VRageMath.BoundingSphere@)">
            <summary>
            Creates a BoundingSphere that contains the two specified BoundingSphere instances.
            </summary>
            <param name="original">BoundingSphere to be merged.</param><param name="additional">BoundingSphere to be merged.</param><param name="result">[OutAttribute] The created BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.CreateFromBoundingBox(VRageMath.BoundingBox)">
            <summary>
            Creates the smallest BoundingSphere that can contain a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to create the BoundingSphere from.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.CreateFromBoundingBox(VRageMath.BoundingBox@,VRageMath.BoundingSphere@)">
            <summary>
            Creates the smallest BoundingSphere that can contain a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to create the BoundingSphere from.</param><param name="result">[OutAttribute] The created BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{VRageMath.Vector3})">
            <summary>
            Creates a BoundingSphere that can contain a specified list of points.
            </summary>
            <param name="points">List of points the BoundingSphere must contain.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.CreateFromFrustum(VRageMath.BoundingFrustum)">
            <summary>
            Creates the smallest BoundingSphere that can contain a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to create the BoundingSphere with.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.BoundingBox)">
            <summary>
            Checks whether the current BoundingSphere intersects with a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingSphere intersects a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingSphere and BoundingBox intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the current BoundingSphere intersects with a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.Plane)">
            <summary>
            Checks whether the current BoundingSphere intersects with a specified Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.Plane@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingSphere intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the BoundingSphere intersects the Plane.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.Ray)">
            <summary>
            Checks whether the current BoundingSphere intersects with a specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingSphere intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the current BoundingSphere intersects with a specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Intersects(VRageMath.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingSphere intersects another BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingSphere instances intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.BoundingBox)">
            <summary>
            Checks whether the current BoundingSphere contains the specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check against the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.BoundingBox@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingSphere contains the specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the current BoundingSphere contains the specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check against the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.Vector3)">
            <summary>
            Checks whether the current BoundingSphere contains the specified point.
            </summary>
            <param name="point">The point to check against the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.Vector3@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingSphere contains the specified point.
            </summary>
            <param name="point">The point to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the current BoundingSphere contains the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check against the current BoundingSphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Contains(VRageMath.BoundingSphere@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingSphere contains the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Transform(VRageMath.Matrix)">
            <summary>
            Translates and scales the BoundingSphere using a given Matrix.
            </summary>
            <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphere.Transform(VRageMath.Matrix@,VRageMath.BoundingSphere@)">
            <summary>
            Translates and scales the BoundingSphere using a given Matrix.
            </summary>
            <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param><param name="result">[OutAttribute] The transformed BoundingSphere.</param>
        </member>
        <member name="T:VRageMath.BoundingBoxD">
            <summary>
            Defines an axis-aligned box-shaped 3D volume.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingBoxD.CornerCount">
            <summary>
            Specifies the total number of corners (8) in the BoundingBox.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingBoxD.Min">
            <summary>
            The minimum point the BoundingBox contains.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingBoxD.Max">
            <summary>
            The maximum point the BoundingBox contains.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBoxD.#ctor(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Creates an instance of BoundingBox.
            </summary>
            <param name="min">The minimum point the BoundingBox includes.</param><param name="max">The maximum point the BoundingBox includes.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.op_Equality(VRageMath.BoundingBoxD,VRageMath.BoundingBoxD)">
            <summary>
            Determines whether two instances of BoundingBox are equal.
            </summary>
            <param name="a">BoundingBox to compare.</param><param name="b">BoundingBox to compare.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.op_Inequality(VRageMath.BoundingBoxD,VRageMath.BoundingBoxD)">
            <summary>
            Determines whether two instances of BoundingBox are not equal.
            </summary>
            <param name="a">The object to the left of the inequality operator.</param><param name="b">The object to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.GetCorners">
            <summary>
            Gets an array of points that make up the corners of the BoundingBox.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBoxD.GetCorners(VRageMath.Vector3D[])">
            <summary>
            Gets the array of points that make up the corners of the BoundingBox.
            </summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.GetCornersUnsafe(VRageMath.Vector3D*)">
            <summary>
            Gets the array of points that make up the corners of the BoundingBox.
            </summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Equals(VRageMath.BoundingBoxD)">
            <summary>
            Determines whether two instances of BoundingBox are equal.
            </summary>
            <param name="other">The BoundingBox to compare with the current BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Equals(System.Object)">
            <summary>
            Determines whether two instances of BoundingBox are equal.
            </summary>
            <param name="obj">The Object to compare with the current BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBoxD.ToString">
            <summary>
            Returns a String that represents the current BoundingBox.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBoxD.CreateMerged(VRageMath.BoundingBoxD,VRageMath.BoundingBoxD)">
            <summary>
            Creates the smallest BoundingBox that contains the two specified BoundingBox instances.
            </summary>
            <param name="original">One of the BoundingBoxs to contain.</param><param name="additional">One of the BoundingBoxs to contain.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.CreateMerged(VRageMath.BoundingBoxD@,VRageMath.BoundingBoxD@,VRageMath.BoundingBoxD@)">
            <summary>
            Creates the smallest BoundingBox that contains the two specified BoundingBox instances.
            </summary>
            <param name="original">One of the BoundingBox instances to contain.</param><param name="additional">One of the BoundingBox instances to contain.</param><param name="result">[OutAttribute] The created BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.CreateFromSphere(VRageMath.BoundingSphereD)">
            <summary>
            Creates the smallest BoundingBox that will contain the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to contain.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.CreateFromSphere(VRageMath.BoundingSphereD@,VRageMath.BoundingBoxD@)">
            <summary>
            Creates the smallest BoundingBox that will contain the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to contain.</param><param name="result">[OutAttribute] The created BoundingBox.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.CreateFromPoints(System.Collections.Generic.IEnumerable{VRageMath.Vector3D})">
            <summary>
            Creates the smallest BoundingBox that will contain a group of points.
            </summary>
            <param name="points">A list of points the BoundingBox should contain.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersect(VRageMath.BoundingBoxD)">
            <summary>
            Returns bounding box which is intersection of this and box
            It's called 'Prunik'
            Result is invalid box when there's no intersection (Min > Max)
            </summary>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the current BoundingBox intersects another BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.BoundingBoxD@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingBox intersects another BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingBox instances intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the current BoundingBox intersects a BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.PlaneD)">
            <summary>
            Checks whether the current BoundingBox intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.PlaneD@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingBox intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the BoundingBox intersects the Plane.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.RayD)">
            <summary>
            Checks whether the current BoundingBox intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.RayD@,System.Nullable{System.Double}@)">
            <summary>
            Checks whether the current BoundingBox intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox, or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the current BoundingBox intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Intersects(VRageMath.BoundingSphereD@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingBox intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingBox and BoundingSphere intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.BoundingBoxD)">
            <summary>
            Tests whether the BoundingBox contains another BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.BoundingBoxD@,VRageMath.ContainmentType@)">
            <summary>
            Tests whether the BoundingBox contains a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.BoundingFrustumD)">
            <summary>
            Tests whether the BoundingBox contains a BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.Vector3D)">
            <summary>
            Tests whether the BoundingBox contains a point.
            </summary>
            <param name="point">The point to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.Vector3D@,VRageMath.ContainmentType@)">
            <summary>
            Tests whether the BoundingBox contains a point.
            </summary>
            <param name="point">The point to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.BoundingSphereD)">
            <summary>
            Tests whether the BoundingBox contains a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Contains(VRageMath.BoundingSphereD@,VRageMath.ContainmentType@)">
            <summary>
            Tests whether the BoundingBox contains a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRageMath.BoundingBoxD.Translate(VRageMath.MatrixD)" -->
        <member name="M:VRageMath.BoundingBoxD.Translate(VRageMath.Vector3D)">
            <summary>
            Translate
            </summary>
            <param name="bbox"></param>
            <param name="vctTranlsation"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Include(VRageMath.Vector3D@)">
            <summary>
            return expanded aabb (abb include point)
            </summary>
            <param name="bbox"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.BoundingBoxD.Include(VRageMath.BoundingBoxD@)">
            <summary>
            return expanded aabb (abb include point)
            </summary>
            <param name="bbox"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:VRageMath.BoundingBoxD.Center">
            <summary>
            Calculates center
            </summary>
        </member>
        <member name="P:VRageMath.BoundingBoxD.Size">
            <summary>
            Size
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRageMath.BoundingBoxD.Matrix">
            <summary>
            Matrix of AABB, respection center and size
            </summary>
        </member>
        <member name="P:VRageMath.BoundingBoxD.Perimeter">
            <summary>
            return perimeter of edges
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRageMath.BoundingSphereD">
            <summary>
            Defines a sphere.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingSphereD.Center">
            <summary>
            The center point of the sphere.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingSphereD.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingSphereD.#ctor(VRageMath.Vector3D,System.Double)">
            <summary>
            Creates a new instance of BoundingSphereD.
            </summary>
            <param name="center">Center point of the sphere.</param><param name="radius">Radius of the sphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.op_Equality(VRageMath.BoundingSphereD,VRageMath.BoundingSphereD)">
            <summary>
            Determines whether two instances of BoundingSphereD are equal.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.op_Inequality(VRageMath.BoundingSphereD,VRageMath.BoundingSphereD)">
            <summary>
            Determines whether two instances of BoundingSphereD are not equal.
            </summary>
            <param name="a">The BoundingSphereD to the left of the inequality operator.</param><param name="b">The BoundingSphereD to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Equals(VRageMath.BoundingSphereD)">
            <summary>
            Determines whether the specified BoundingSphereD is equal to the current BoundingSphereD.
            </summary>
            <param name="other">The BoundingSphereD to compare with the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the BoundingSphereD.
            </summary>
            <param name="obj">The Object to compare with the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingSphereD.ToString">
            <summary>
            Returns a String that represents the current BoundingSphereD.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingSphereD.CreateMerged(VRageMath.BoundingSphereD,VRageMath.BoundingSphereD)">
            <summary>
            Creates a BoundingSphereD that contains the two specified BoundingSphereD instances.
            </summary>
            <param name="original">BoundingSphereD to be merged.</param><param name="additional">BoundingSphereD to be merged.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.CreateMerged(VRageMath.BoundingSphereD@,VRageMath.BoundingSphereD@,VRageMath.BoundingSphereD@)">
            <summary>
            Creates a BoundingSphereD that contains the two specified BoundingSphereD instances.
            </summary>
            <param name="original">BoundingSphereD to be merged.</param><param name="additional">BoundingSphereD to be merged.</param><param name="result">[OutAttribute] The created BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.CreateFromBoundingBox(VRageMath.BoundingBoxD)">
            <summary>
            Creates the smallest BoundingSphereD that can contain a specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to create the BoundingSphereD from.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.CreateFromBoundingBox(VRageMath.BoundingBoxD@,VRageMath.BoundingSphereD@)">
            <summary>
            Creates the smallest BoundingSphereD that can contain a specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to create the BoundingSphereD from.</param><param name="result">[OutAttribute] The created BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.CreateFromPoints(System.Collections.Generic.IEnumerable{VRageMath.Vector3D})">
            <summary>
            Creates a BoundingSphereD that can contain a specified list of points.
            </summary>
            <param name="points">List of points the BoundingSphereD must contain.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.CreateFromFrustum(VRageMath.BoundingFrustumD)">
            <summary>
            Creates the smallest BoundingSphereD that can contain a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to create the BoundingSphereD with.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Intersects(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the current BoundingSphereD intersects with a specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to check for intersection with the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Intersects(VRageMath.BoundingBoxD@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingSphereD intersects a BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingSphereD and BoundingBoxD intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Intersects(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the current BoundingSphereD intersects with a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Intersects(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the current BoundingSphereD intersects with a specified BoundingSphereD.
            </summary>
            <param name="sphere">The BoundingSphereD to check for intersection with the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Intersects(VRageMath.BoundingSphereD@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingSphereD intersects another BoundingSphereD.
            </summary>
            <param name="sphere">The BoundingSphereD to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingSphereD instances intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to check against the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.BoundingBoxD@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check against the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.Vector3D)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified point.
            </summary>
            <param name="point">The point to check against the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.Vector3D@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified point.
            </summary>
            <param name="point">The point to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified BoundingSphereD.
            </summary>
            <param name="sphere">The BoundingSphereD to check against the current BoundingSphereD.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Contains(VRageMath.BoundingSphereD@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingSphereD contains the specified BoundingSphereD.
            </summary>
            <param name="sphere">The BoundingSphereD to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Transform(VRageMath.MatrixD)">
            <summary>
            Translates and scales the BoundingSphereD using a given Matrix.
            </summary>
            <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphereD.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
        </member>
        <member name="M:VRageMath.BoundingSphereD.Transform(VRageMath.MatrixD@,VRageMath.BoundingSphereD@)">
            <summary>
            Translates and scales the BoundingSphereD using a given Matrix.
            </summary>
            <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphereD.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param><param name="result">[OutAttribute] The transformed BoundingSphereD.</param>
        </member>
        <member name="T:VRageMath.BoundingFrustumD">
            <summary>
            Defines a frustum and helps determine whether forms intersect with it.
            </summary>
        </member>
        <member name="F:VRageMath.BoundingFrustumD.CornerCount">
            <summary>
            Specifies the total number of corners (8) in the BoundingFrustumD.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.#ctor(VRageMath.MatrixD)">
            <summary>
            Creates a new instance of BoundingFrustumD.
            </summary>
            <param name="value">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.op_Equality(VRageMath.BoundingFrustumD,VRageMath.BoundingFrustumD)">
            <summary>
            Determines whether two instances of BoundingFrustumD are equal.
            </summary>
            <param name="a">The BoundingFrustumD to the left of the equality operator.</param><param name="b">The BoundingFrustumD to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.op_Inequality(VRageMath.BoundingFrustumD,VRageMath.BoundingFrustumD)">
            <summary>
            Determines whether two instances of BoundingFrustumD are not equal.
            </summary>
            <param name="a">The BoundingFrustumD to the left of the inequality operator.</param><param name="b">The BoundingFrustumD to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.GetCorners">
            <summary>
            Gets an array of points that make up the corners of the BoundingFrustumD.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.GetCorners(VRageMath.Vector3D[])">
            <summary>
            Gets an array of points that make up the corners of the BoundingFrustumD.
            </summary>
            <param name="corners">An existing array of at least 8 Vector3D points where the corners of the BoundingFrustumD are written.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Equals(VRageMath.BoundingFrustumD)">
            <summary>
            Determines whether the specified BoundingFrustumD is equal to the current BoundingFrustumD.
            </summary>
            <param name="other">The BoundingFrustumD to compare with the current BoundingFrustumD.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the BoundingFrustumD.
            </summary>
            <param name="obj">The Object to compare with the current BoundingFrustumD.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.ToString">
            <summary>
            Returns a String that represents the current BoundingFrustumD.
            </summary>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the current BoundingFrustumD intersects the specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.BoundingBoxD@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustumD intersects a BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingFrustumD and BoundingBoxD intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the current BoundingFrustumD intersects the specified BoundingFrustumD.
            </summary>
            <param name="frustum">The BoundingFrustumD to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.PlaneD)">
            <summary>
            Checks whether the current BoundingFrustumD intersects the specified Plane.
            </summary>
            <param name="plane">The Plane to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.PlaneD@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustumD intersects a Plane.
            </summary>
            <param name="plane">The Plane to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the BoundingFrustumD intersects the Plane.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.RayD)">
            <summary>
            Checks whether the current BoundingFrustumD intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.RayD@,System.Nullable{System.Double}@)">
            <summary>
            Checks whether the current BoundingFrustumD intersects a Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingFrustumD or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the current BoundingFrustumD intersects the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Intersects(VRageMath.BoundingSphereD@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustumD intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] true if the BoundingFrustumD and BoundingSphere intersect; false otherwise.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to check against the current BoundingFrustumD.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.BoundingBoxD@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified BoundingBoxD.
            </summary>
            <param name="box">The BoundingBoxD to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified BoundingFrustumD.
            </summary>
            <param name="frustum">The BoundingFrustumD to check against the current BoundingFrustumD.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.Vector3D)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified point.
            </summary>
            <param name="point">The point to check against the current BoundingFrustumD.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.Vector3D@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified point.
            </summary>
            <param name="point">The point to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check against the current BoundingFrustumD.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumD.Contains(VRageMath.BoundingSphereD@,VRageMath.ContainmentType@)">
            <summary>
            Checks whether the current BoundingFrustumD contains the specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param><param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Near">
            <summary>
            Gets the near plane of the BoundingFrustumD.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Far">
            <summary>
            Gets the far plane of the BoundingFrustumD.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Left">
            <summary>
            Gets the left plane of the BoundingFrustumD.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Right">
            <summary>
            Gets the right plane of the BoundingFrustumD.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Top">
            <summary>
            Gets the top plane of the BoundingFrustumD.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustumD.
            </summary>
        </member>
        <member name="P:VRageMath.BoundingFrustumD.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="T:VRageMath.CompressedPositionOrientation">
            <summary>
            Defines a matrix.
            </summary>
        </member>
        <member name="T:Havok.IPhysicsMesh">
            <summary>
            Interface through which physics can work with graphical meshes.
            This has been moved here due to problems with obfuscator and to reduce dependencies of Havok!
            You should treat this as part of HavokWrapper (not accessible when there is no reference to HavokWrapper)!
            Exception to this can only be rare cases such as avoiding code duplication.
            </summary>
        </member>
        <member name="M:VRageMath.MyMath.ArcTanAngle(System.Single,System.Single)">
            <summary>
            ArcTanAngle
            </summary>
            <returns>ArcTan angle between x and y</returns>
        </member>
        <member name="M:VRageMath.MyMath.MaxComponents(VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Return vector with each component max
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.MyMath.AngleTo(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            AngleTo 
            </summary>
            <returns>Angle between the vector lines</returns>
        </member>
        <member name="M:VRageMath.MyMath.QuaternionToEuler(VRageMath.Quaternion)">
            <summary>
            QuaternionToEuler 
            </summary>
            <returns>Converted quaternion to the euler pitch, rot, yaw</returns>
        </member>
        <member name="M:VRageMath.MyMath.ForwardVectorProjection(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            This projection results to initial velocity of non-engine objects, which parents move in some velocity
            We want to add only forward speed of the parent to the forward direction of the object, and if parent
            is going backward, no speed is added.
            </summary>
            <param name="forwardVector"></param>
            <param name="projectedVector"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.MyMath.VectorFromColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Calculates color from vector
            </summary>
        </member>
        <member name="M:VRageMath.MyMath.DistanceSquaredFromLineSegment(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Return minimum distance between line segment v-w and point p.
            </summary>
        </member>
        <member name="T:VRageMath.Vector3Extensions">
            <summary>
            Usefull Vector3 extensions
            </summary>
        </member>
        <member name="M:VRageMath.Vector3Extensions.Project(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculates projection vector
            </summary>
            <param name="sb">The sb.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:VRageMath.BoundingFrustumExtensions.ToBoundingSphere(VRageMath.BoundingFrustum,VRageMath.Vector3[])">
            <summary>
            Creates bounding sphere from bounding frustum.
            Implementation taken from XNA source, replace IEnumerable with array
            </summary>
            <param name="frustum">The bounding frustum.</param>
            <param name="corners">Temporary memory to save corner when getting from frustum.</param>
            <returns>BoundingSphere</returns>
        </member>
        <member name="T:VRageMath.QuaternionD">
            <summary>
            Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2).
            Uses double precision floating point numbers for calculation and storage
            </summary>
        </member>
        <member name="F:VRageMath.QuaternionD.X">
            <summary>
            Specifies the x-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:VRageMath.QuaternionD.Y">
            <summary>
            Specifies the y-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:VRageMath.QuaternionD.Z">
            <summary>
            Specifies the z-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:VRageMath.QuaternionD.W">
            <summary>
            Specifies the rotation component of the quaternion.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of QuaternionD.
            </summary>
            <param name="x">The x-value of the quaternion.</param><param name="y">The y-value of the quaternion.</param><param name="z">The z-value of the quaternion.</param><param name="w">The w-value of the quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.#ctor(VRageMath.Vector3D,System.Double)">
            <summary>
            Initializes a new instance of QuaternionD.
            </summary>
            <param name="vectorPart">The vector component of the quaternion.</param><param name="scalarPart">The rotation component of the quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_UnaryNegation(VRageMath.QuaternionD)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Equality(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Compares two Quaternions for equality.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">Source QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Inequality(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Compare two Quaternions for inequality.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">Source QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Addition(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Adds two Quaternions.
            </summary>
            <param name="quaternion1">QuaternionD to add.</param><param name="quaternion2">QuaternionD to add.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Subtraction(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Subtracts a quaternion from another quaternion.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Multiply(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Multiply(VRageMath.QuaternionD,System.Double)">
            <summary>
            Multiplies a quaternion by a scalar value.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.op_Division(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Divides a QuaternionD by another QuaternionD.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">The divisor.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.ToString">
            <summary>
            Retireves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.Equals(VRageMath.QuaternionD)">
            <summary>
            Determines whether the specified Object is equal to the QuaternionD.
            </summary>
            <param name="other">The QuaternionD to compare with the current QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.GetHashCode">
            <summary>
            Get the hash code of this object.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.LengthSquared">
            <summary>
            Calculates the length squared of a QuaternionD.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.Length">
            <summary>
            Calculates the length of a QuaternionD.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.Normalize">
            <summary>
            Divides each component of the quaternion by the length of the quaternion.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.Normalize(VRageMath.QuaternionD)">
            <summary>
            Divides each component of the quaternion by the length of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Normalize(VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Divides each component of the quaternion by the length of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param><param name="result">[OutAttribute] Normalized quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Conjugate">
            <summary>
            Transforms this QuaternionD into its conjugate.
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.Conjugate(VRageMath.QuaternionD)">
            <summary>
            Returns the conjugate of a specified QuaternionD.
            </summary>
            <param name="value">The QuaternionD of which to return the conjugate.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Conjugate(VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Returns the conjugate of a specified QuaternionD.
            </summary>
            <param name="value">The QuaternionD of which to return the conjugate.</param><param name="result">[OutAttribute] An existing QuaternionD filled in to be the conjugate of the specified one.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Inverse(VRageMath.QuaternionD)">
            <summary>
            Returns the inverse of a QuaternionD.
            </summary>
            <param name="quaternion">Source QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Inverse(VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Returns the inverse of a QuaternionD.
            </summary>
            <param name="quaternion">Source QuaternionD.</param><param name="result">[OutAttribute] The inverse of the QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromAxisAngle(VRageMath.Vector3D,System.Double)">
            <summary>
            Creates a QuaternionD from a vector and an angle to rotate about the vector.
            </summary>
            <param name="axis">The vector to rotate around.</param><param name="angle">The angle to rotate around the vector.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromAxisAngle(VRageMath.Vector3D@,System.Double,VRageMath.QuaternionD@)">
            <summary>
            Creates a QuaternionD from a vector and an angle to rotate about the vector.
            </summary>
            <param name="axis">The vector to rotate around.</param><param name="angle">The angle to rotate around the vector.</param><param name="result">[OutAttribute] The created QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new QuaternionD from specified yaw, pitch, and roll angles.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param><param name="pitch">The pitch angle, in radians, around the x-axis.</param><param name="roll">The roll angle, in radians, around the z-axis.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromYawPitchRoll(System.Double,System.Double,System.Double,VRageMath.QuaternionD@)">
            <summary>
            Creates a new QuaternionD from specified yaw, pitch, and roll angles.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param><param name="pitch">The pitch angle, in radians, around the x-axis.</param><param name="roll">The roll angle, in radians, around the z-axis.</param><param name="result">[OutAttribute] An existing QuaternionD filled in to express the specified yaw, pitch, and roll angles.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromForwardUp(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Works for normalized vectors only
            </summary>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromRotationMatrix(VRageMath.MatrixD)">
            <summary>
            Creates a QuaternionD from a rotation MatrixD.
            </summary>
            <param name="matrix">The rotation MatrixD to create the QuaternionD from.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.CreateFromRotationMatrix(VRageMath.MatrixD@,VRageMath.QuaternionD@)">
            <summary>
            Creates a QuaternionD from a rotation MatrixD.
            </summary>
            <param name="matrix">The rotation MatrixD to create the QuaternionD from.</param><param name="result">[OutAttribute] The created QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Dot(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Calculates the dot product of two Quaternions.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">Source QuaternionD.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Dot(VRageMath.QuaternionD@,VRageMath.QuaternionD@,System.Double@)">
            <summary>
            Calculates the dot product of two Quaternions.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">Source QuaternionD.</param><param name="result">[OutAttribute] Dot product of the Quaternions.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Slerp(VRageMath.QuaternionD,VRageMath.QuaternionD,System.Double)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Slerp(VRageMath.QuaternionD@,VRageMath.QuaternionD@,System.Double,VRageMath.QuaternionD@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value that indicates how far to interpolate between the quaternions.</param><param name="result">[OutAttribute] Result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Lerp(VRageMath.QuaternionD,VRageMath.QuaternionD,System.Double)">
            <summary>
            Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value indicating how far to interpolate between the quaternions.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Lerp(VRageMath.QuaternionD@,VRageMath.QuaternionD@,System.Double,VRageMath.QuaternionD@)">
            <summary>
            Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value indicating how far to interpolate between the quaternions.</param><param name="result">[OutAttribute] The resulting quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Concatenate(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first QuaternionD rotation in the series.</param><param name="value2">The second QuaternionD rotation in the series.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Concatenate(VRageMath.QuaternionD@,VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first QuaternionD rotation in the series.</param><param name="value2">The second QuaternionD rotation in the series.</param><param name="result">[OutAttribute] The QuaternionD rotation representing the concatenation of value1 followed by value2.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Negate(VRageMath.QuaternionD)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Negate(VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param><param name="result">[OutAttribute] Negated quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Add(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Adds two Quaternions.
            </summary>
            <param name="quaternion1">QuaternionD to add.</param><param name="quaternion2">QuaternionD to add.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Add(VRageMath.QuaternionD@,VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Adds two Quaternions.
            </summary>
            <param name="quaternion1">QuaternionD to add.</param><param name="quaternion2">QuaternionD to add.</param><param name="result">[OutAttribute] Result of adding the Quaternions.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Subtract(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Subtracts a quaternion from another quaternion.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Subtract(VRageMath.QuaternionD@,VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Subtracts a quaternion from another quaternion.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="result">[OutAttribute] Result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Multiply(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">The quaternion on the left of the multiplication.</param><param name="quaternion2">The quaternion on the right of the multiplication.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Multiply(VRageMath.QuaternionD@,VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">The quaternion on the left of the multiplication.</param><param name="quaternion2">The quaternion on the right of the multiplication.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Multiply(VRageMath.QuaternionD,System.Double)">
            <summary>
            Multiplies a quaternion by a scalar value.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Multiply(VRageMath.QuaternionD@,System.Double,VRageMath.QuaternionD@)">
            <summary>
            Multiplies a quaternion by a scalar value.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Divide(VRageMath.QuaternionD,VRageMath.QuaternionD)">
            <summary>
            Divides a QuaternionD by another QuaternionD.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">The divisor.</param>
        </member>
        <member name="M:VRageMath.QuaternionD.Divide(VRageMath.QuaternionD@,VRageMath.QuaternionD@,VRageMath.QuaternionD@)">
            <summary>
            Divides a QuaternionD by another QuaternionD.
            </summary>
            <param name="quaternion1">Source QuaternionD.</param><param name="quaternion2">The divisor.</param><param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:VRageMath.Spatial.MyVector3Grid`1.RemoveTwo(VRageMath.Spatial.MyVector3Grid{`0}.Enumerator@,VRageMath.Spatial.MyVector3Grid{`0}.Enumerator@)">
            <summary>
            Removes values pointed at by en0 and en1 and ensures that the enumerators both stay consistent
            </summary>
        </member>
        <member name="M:VRageMath.Spatial.MyVector3Grid`1.RemoveEntry(System.Int32)">
            <summary>
            Removes entry with the given index and returns the index of the next entry (or -1 if the removed entry was the last one)
            </summary>
        </member>
        <member name="M:VRageMath.Spatial.MyVector3Grid`1.Enumerator.RemoveCurrent">
            <summary>
            Removes the current entry and returns true whether there is another entry.
            May invalidate enumerators in the same bin.
            To remove values from more enumerators while ensuring their validity use MyVector3Grid.Remove(...).
            </summary>
        </member>
        <member name="T:VRageMath.Vector4D">
            <summary>
            Defines a vector with four components.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4D.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4D.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4D.Z">
            <summary>
            Gets or sets the z-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4D.W">
            <summary>
            Gets or sets the w-component of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="x">Initial value for the x-component of the vector.</param><param name="y">Initial value for the y-component of the vector.</param><param name="z">Initial value for the z-component of the vector.</param><param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.#ctor(VRageMath.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="value">A vector containing the values to initialize x and y components with.</param><param name="z">Initial value for the z-component of the vector.</param><param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.#ctor(VRageMath.Vector3D,System.Double)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="value">A vector containing the values to initialize x, y, and z components with.</param><param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.#ctor(System.Double)">
            <summary>
            Creates a new instance of Vector4.
            </summary>
            <param name="value">Value to initialize each component to.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_UnaryNegation(VRageMath.Vector4D)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Equality(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Tests vectors for equality.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Inequality(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Tests vectors for inequality.
            </summary>
            <param name="value1">Vector to compare.</param><param name="value2">Vector to compare.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Addition(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Subtraction(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Multiply(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Multiply(VRageMath.Vector4D,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Multiply(System.Double,VRageMath.Vector4D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="value1">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Division(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Division(VRageMath.Vector4D,System.Double)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector4D.op_Division(System.Double,VRageMath.Vector4D)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector4D.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4D.Equals(VRageMath.Vector4)">
            <summary>
            Determines whether the specified Object is equal to the Vector4.
            </summary>
            <param name="other">The Vector4 to compare with the current Vector4.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.Vector4D.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4D.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4D.LengthSquared">
            <summary>
            Calculates the length of the vector squared.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4D.Distance(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Distance(VRageMath.Vector4@,VRageMath.Vector4@,System.Double@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector4D.DistanceSquared(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.DistanceSquared(VRageMath.Vector4@,VRageMath.Vector4@,System.Double@)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the two vectors squared.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Dot(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Dot(VRageMath.Vector4@,VRageMath.Vector4@,System.Double@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Normalize">
            <summary>
            Turns the current vector into a unit vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4D.Normalize(VRageMath.Vector4D)">
            <summary>
            Creates a unit vector from the specified vector.
            </summary>
            <param name="vector">The source Vector4.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Normalize(VRageMath.Vector4D@,VRageMath.Vector4D@)">
            <summary>
            Returns a normalized version of the specified vector.
            </summary>
            <param name="vector">Source vector.</param><param name="result">[OutAttribute] The normalized vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Min(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Min(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Max(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Max(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Clamp(VRageMath.Vector4D,VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Clamp(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param><param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Lerp(VRageMath.Vector4D,VRageMath.Vector4D,System.Double)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Lerp(VRageMath.Vector4D@,VRageMath.Vector4D@,System.Double,VRageMath.Vector4D@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param><param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Barycentric(VRageMath.Vector4D,VRageMath.Vector4D,VRageMath.Vector4D,System.Double,System.Double)">
            <summary>
            Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:VRageMath.Vector4D.Barycentric(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@,System.Double,System.Double,VRageMath.Vector4D@)">
            <summary>
            Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric (areal) coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param><param name="result">[OutAttribute] The 4D Cartesian coordinates of the specified point are placed in this Vector4 on exit.</param>
        </member>
        <member name="M:VRageMath.Vector4D.SmoothStep(VRageMath.Vector4D,VRageMath.Vector4D,System.Double)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param>
        </member>
        <member name="M:VRageMath.Vector4D.SmoothStep(VRageMath.Vector4D@,VRageMath.Vector4D@,System.Double,VRageMath.Vector4D@)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:VRageMath.Vector4D.CatmullRom(VRageMath.Vector4D,VRageMath.Vector4D,VRageMath.Vector4D,VRageMath.Vector4D,System.Double)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector4D.CatmullRom(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@,System.Double,VRageMath.Vector4D@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Hermite(VRageMath.Vector4D,VRageMath.Vector4D,VRageMath.Vector4D,VRageMath.Vector4D,System.Double)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Hermite(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@,System.Double,VRageMath.Vector4D@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector2,VRageMath.MatrixD)">
            <summary>
            Transforms a Vector2 by the given Matrix.
            </summary>
            <param name="position">The source Vector2.</param><param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector2@,VRageMath.MatrixD@,VRageMath.Vector4D@)">
            <summary>
            Transforms a Vector2 by the given Matrix.
            </summary>
            <param name="position">The source Vector2.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector3D,VRageMath.MatrixD)">
            <summary>
            Transforms a Vector3 by the given Matrix.
            </summary>
            <param name="position">The source Vector3.</param><param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector3D@,VRageMath.MatrixD@,VRageMath.Vector4D@)">
            <summary>
            Transforms a Vector3 by the given Matrix.
            </summary>
            <param name="position">The source Vector3.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D,VRageMath.MatrixD)">
            <summary>
            Transforms a Vector4 by the specified Matrix.
            </summary>
            <param name="vector">The source Vector4.</param><param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D@,VRageMath.MatrixD@,VRageMath.Vector4D@)">
            <summary>
            Transforms a Vector4 by the given Matrix.
            </summary>
            <param name="vector">The source Vector4.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector2,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector2 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector2 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector2@,VRageMath.Quaternion@,VRageMath.Vector4D@)">
            <summary>
            Transforms a Vector2 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector2 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector3D,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector3 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector3 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector3D@,VRageMath.Quaternion@,VRageMath.Vector4D@)">
            <summary>
            Transforms a Vector3 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector3 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector4 by a specified Quaternion.
            </summary>
            <param name="value">The Vector4 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D@,VRageMath.Quaternion@,VRageMath.Vector4D@)">
            <summary>
            Transforms a Vector4 by a specified Quaternion.
            </summary>
            <param name="value">The Vector4 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D[],VRageMath.MatrixD@,VRageMath.Vector4D[])">
            <summary>
            Transforms an array of Vector4s by a specified Matrix.
            </summary>
            <param name="sourceArray">The array of Vector4s to transform.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D[],System.Int32,VRageMath.MatrixD@,VRageMath.Vector4D[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector4s by a specified Matrix into a specified range in a destination array.
            </summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param><param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param><param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param><param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D[],VRageMath.Quaternion@,VRageMath.Vector4D[])">
            <summary>
            Transforms an array of Vector4s by a specified Quaternion.
            </summary>
            <param name="sourceArray">The array of Vector4s to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Transform(VRageMath.Vector4D[],System.Int32,VRageMath.Quaternion@,VRageMath.Vector4D[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector4s by a specified Quaternion into a specified range in a destination array.
            </summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param><param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param><param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param><param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Negate(VRageMath.Vector4D)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Negate(VRageMath.Vector4D@,VRageMath.Vector4D@)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Add(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Add(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Subtract(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Subtract(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Multiply(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Multiply(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Multiply(VRageMath.Vector4D,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Multiply(VRageMath.Vector4D@,System.Double,VRageMath.Vector4D@)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Divide(VRageMath.Vector4D,VRageMath.Vector4D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Divide(VRageMath.Vector4D@,VRageMath.Vector4D@,VRageMath.Vector4D@)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Divide(VRageMath.Vector4D,System.Double)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector4D.Divide(VRageMath.Vector4D@,System.Double,VRageMath.Vector4D@)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.MyOrientedBoundingBoxD.GetNormalBetweenEdges(System.Int32,System.Int32,System.Int32,VRageMath.Vector3@)">
            <summary>
            Returns normal between two cube edge of same direction
            </summary>
            <param name="axis">Edge direction axis (0 = X, 1 = Y, 2 = Z)</param>
            <param name="edge0"></param>
            <param name="edge1"></param>
            <param name="normal"></param>
            <returns>false if edges are not neighbors</returns>
        </member>
        <member name="M:VRageMath.MyOrientedBoundingBoxD.#ctor(VRageMath.MatrixD)">
            <summary>
            Initializes a new instance of the MyOrientedBoundingBox.
            Scale of matrix is size of box
            </summary>
        </member>
        <member name="T:VRageMath.PlaneD">
            <summary>
            Defines a PlaneD.
            </summary>
        </member>
        <member name="F:VRageMath.PlaneD.Normal">
            <summary>
            The normal vector of the PlaneD.
            </summary>
        </member>
        <member name="F:VRageMath.PlaneD.D">
            <summary>
            The distance of the PlaneD along its normal from the origin.
            Note: Be careful! The distance is signed and is the opposite of what people usually expect.
                  If you look closely at the plane equation: (n dot P) - D = 0, you'll realize that D = - (n dot P) (that is, negative instead of positive)
            </summary>
        </member>
        <member name="M:VRageMath.PlaneD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of PlaneD.
            </summary>
            <param name="a">X component of the normal defining the PlaneD.</param><param name="b">Y component of the normal defining the PlaneD.</param><param name="c">Z component of the normal defining the PlaneD.</param><param name="d">Distance of the origin from the PlaneD along its normal.</param>
        </member>
        <member name="M:VRageMath.PlaneD.#ctor(VRageMath.Vector3D,System.Double)">
            <summary>
            Creates a new instance of PlaneD.
            </summary>
            <param name="normal">The normal vector to the PlaneD.</param><param name="d">The distance of the origin from the PlaneD along its normal.</param>
        </member>
        <member name="M:VRageMath.PlaneD.#ctor(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="position">A point that lies on the Plane</param><param name="normal">The normal vector to the Plane.</param>
        </member>
        <member name="M:VRageMath.PlaneD.#ctor(VRageMath.Vector3D,VRageMath.Vector3)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="position">A point that lies on the Plane</param><param name="normal">The normal vector to the Plane.</param>
        </member>
        <member name="M:VRageMath.PlaneD.#ctor(VRageMath.Vector4)">
            <summary>
            Creates a new instance of PlaneD.
            </summary>
            <param name="value">Vector4 with X, Y, and Z components defining the normal of the PlaneD. The W component defines the distance of the origin from the PlaneD along its normal.</param>
        </member>
        <member name="M:VRageMath.PlaneD.#ctor(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Creates a new instance of PlaneD.
            </summary>
            <param name="point1">One point of a triangle defining the PlaneD.</param><param name="point2">One point of a triangle defining the PlaneD.</param><param name="point3">One point of a triangle defining the PlaneD.</param>
        </member>
        <member name="M:VRageMath.PlaneD.op_Equality(VRageMath.PlaneD,VRageMath.PlaneD)">
            <summary>
            Determines whether two instances of PlaneD are equal.
            </summary>
            <param name="lhs">The object to the left of the equality operator.</param><param name="rhs">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PlaneD.op_Inequality(VRageMath.PlaneD,VRageMath.PlaneD)">
            <summary>
            Determines whether two instances of PlaneD are not equal.
            </summary>
            <param name="lhs">The object to the left of the inequality operator.</param><param name="rhs">The object to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Equals(VRageMath.PlaneD)">
            <summary>
            Determines whether the specified PlaneD is equal to the PlaneD.
            </summary>
            <param name="other">The PlaneD to compare with the current PlaneD.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the PlaneD.
            </summary>
            <param name="obj">The Object to compare with the current PlaneD.</param>
        </member>
        <member name="M:VRageMath.PlaneD.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:VRageMath.PlaneD.ToString">
            <summary>
            Returns a String that represents the current PlaneD.
            </summary>
        </member>
        <member name="M:VRageMath.PlaneD.Normalize">
            <summary>
            Changes the coefficients of the Normal vector of this PlaneD to make it of unit length.
            </summary>
        </member>
        <member name="M:VRageMath.PlaneD.Normalize(VRageMath.PlaneD)">
            <summary>
            Changes the coefficients of the Normal vector of a PlaneD to make it of unit length.
            </summary>
            <param name="value">The PlaneD to normalize.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Normalize(VRageMath.PlaneD@,VRageMath.PlaneD@)">
            <summary>
            Changes the coefficients of the Normal vector of a PlaneD to make it of unit length.
            </summary>
            <param name="value">The PlaneD to normalize.</param><param name="result">[OutAttribute] An existing PlaneD PlaneD filled in with a normalized version of the specified PlaneD.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Transform(VRageMath.PlaneD,VRageMath.MatrixD)">
            <summary>
            Transforms a normalized PlaneD by a Matrix.
            </summary>
            <param name="PlaneD">The normalized PlaneD to transform. This PlaneD must already be normalized, so that its Normal vector is of unit length, before this method is called.</param><param name="matrix">The transform Matrix to apply to the PlaneD.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Transform(VRageMath.PlaneD@,VRageMath.MatrixD@,VRageMath.PlaneD@)">
            <summary>
            Transforms a normalized PlaneD by a Matrix.
            </summary>
            <param name="PlaneD">The normalized PlaneD to transform. This PlaneD must already be normalized, so that its Normal vector is of unit length, before this method is called.</param><param name="matrix">The transform Matrix to apply to the PlaneD.</param><param name="result">[OutAttribute] An existing PlaneD filled in with the results of applying the transform.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Dot(VRageMath.Vector4)">
            <summary>
            Calculates the dot product of a specified Vector4 and this PlaneD.
            </summary>
            <param name="value">The Vector4 to multiply this PlaneD by.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Dot(VRageMath.Vector4@,System.Double@)">
            <summary>
            Calculates the dot product of a specified Vector4 and this PlaneD.
            </summary>
            <param name="value">The Vector4 to multiply this PlaneD by.</param><param name="result">[OutAttribute] The dot product of the specified Vector4 and this PlaneD.</param>
        </member>
        <member name="M:VRageMath.PlaneD.DotCoordinate(VRageMath.Vector3D)">
            <summary>
            Returns the dot product of a specified Vector3D and the Normal vector of this PlaneD plus the distance (D) value of the PlaneD.
            </summary>
            <param name="value">The Vector3D to multiply by.</param>
        </member>
        <member name="M:VRageMath.PlaneD.DotCoordinate(VRageMath.Vector3D@,System.Double@)">
            <summary>
            Returns the dot product of a specified Vector3D and the Normal vector of this PlaneD plus the distance (D) value of the PlaneD.
            </summary>
            <param name="value">The Vector3D to multiply by.</param><param name="result">[OutAttribute] The resulting value.</param>
        </member>
        <member name="M:VRageMath.PlaneD.DotNormal(VRageMath.Vector3D)">
            <summary>
            Returns the dot product of a specified Vector3D and the Normal vector of this PlaneD.
            </summary>
            <param name="value">The Vector3D to multiply by.</param>
        </member>
        <member name="M:VRageMath.PlaneD.DotNormal(VRageMath.Vector3D@,System.Double@)">
            <summary>
            Returns the dot product of a specified Vector3D and the Normal vector of this PlaneD.
            </summary>
            <param name="value">The Vector3D to multiply by.</param><param name="result">[OutAttribute] The resulting dot product.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Intersects(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the current PlaneD intersects a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for intersection with.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Intersects(VRageMath.BoundingBoxD@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current PlaneD intersects a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the PlaneD intersects the BoundingBox.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Intersects(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the current PlaneD intersects a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Intersects(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the current PlaneD intersects a specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.PlaneD.Intersects(VRageMath.BoundingSphere@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current PlaneD intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the PlaneD intersects the BoundingSphere.</param>
        </member>
        <member name="T:VRageMath.RayD">
            <summary>
            Defines a ray.
            </summary>
        </member>
        <member name="F:VRageMath.RayD.Position">
            <summary>
            Specifies the starting point of the Ray.
            </summary>
        </member>
        <member name="F:VRageMath.RayD.Direction">
            <summary>
            Unit vector specifying the direction the Ray is pointing.
            </summary>
        </member>
        <member name="M:VRageMath.RayD.#ctor(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Creates a new instance of Ray.
            </summary>
            <param name="position">The starting point of the Ray.</param><param name="direction">Unit vector describing the direction of the Ray.</param>
        </member>
        <member name="M:VRageMath.RayD.op_Equality(VRageMath.RayD,VRageMath.RayD)">
            <summary>
            Determines whether two instances of Ray are equal.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.RayD.op_Inequality(VRageMath.RayD,VRageMath.RayD)">
            <summary>
            Determines whether two instances of Ray are not equal.
            </summary>
            <param name="a">The object to the left of the inequality operator.</param><param name="b">The object to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.RayD.Equals(VRageMath.RayD)">
            <summary>
            Determines whether the specified Ray is equal to the current Ray.
            </summary>
            <param name="other">The Ray to compare with the current Ray.</param>
        </member>
        <member name="M:VRageMath.RayD.Equals(System.Object)">
            <summary>
            Determines whether two instances of Ray are equal.
            </summary>
            <param name="obj">The Object to compare with the current Ray.</param>
        </member>
        <member name="M:VRageMath.RayD.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.RayD.ToString">
            <summary>
            Returns a String that represents the current Ray.
            </summary>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.BoundingBoxD)">
            <summary>
            Checks whether the Ray intersects a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with the Ray.</param>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.BoundingBoxD@,System.Nullable{System.Double}@)">
            <summary>
            Checks whether the current Ray intersects a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.BoundingFrustumD)">
            <summary>
            Checks whether the Ray intersects a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with the Ray.</param>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.PlaneD)">
            <summary>
            Determines whether this Ray intersects a specified Plane.
            </summary>
            <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.PlaneD@,System.Nullable{System.Double}@)">
            <summary>
            Determines whether this Ray intersects a specified Plane.
            </summary>
            <param name="plane">The Plane with which to calculate this Ray's intersection.</param><param name="result">[OutAttribute] The distance at which this Ray intersects the specified Plane, or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.BoundingSphereD)">
            <summary>
            Checks whether the Ray intersects a specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
        </member>
        <member name="M:VRageMath.RayD.Intersects(VRageMath.BoundingSphere@,System.Nullable{System.Double}@)">
            <summary>
            Checks whether the current Ray intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
        </member>
        <member name="T:VRageMath.MatrixD">
            <summary>
            Defines a matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M">
            <summary>
            Matrix values
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.MatrixD.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.GetDirectionVector(VRageMath.Base6Directions.Direction)">
            <summary>
            Gets the base vector of the matrix, corresponding to the given direction
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.SetDirectionVector(VRageMath.Base6Directions.Direction,VRageMath.Vector3D)">
            <summary>
            Sets the base vector of the matrix, corresponding to the given direction
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Rescale(VRageMath.MatrixD@,System.Double)">
            <summary>
            Same result as Matrix.CreateScale(scale) * matrix, but much faster
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Rescale(VRageMath.MatrixD@,System.Single)">
            <summary>
            Same result as Matrix.CreateScale(scale) * matrix, but much faster
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Rescale(VRageMath.MatrixD@,VRageMath.Vector3D@)">
            <summary>
            Same result as Matrix.CreateScale(scale) * matrix, but much faster
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix.
            </summary>
            <param name="m11">Value to initialize m11 to.</param><param name="m12">Value to initialize m12 to.</param><param name="m13">Value to initialize m13 to.</param><param name="m14">Value to initialize m14 to.</param><param name="m21">Value to initialize m21 to.</param><param name="m22">Value to initialize m22 to.</param><param name="m23">Value to initialize m23 to.</param><param name="m24">Value to initialize m24 to.</param><param name="m31">Value to initialize m31 to.</param><param name="m32">Value to initialize m32 to.</param><param name="m33">Value to initialize m33 to.</param><param name="m34">Value to initialize m34 to.</param><param name="m41">Value to initialize m41 to.</param><param name="m42">Value to initialize m42 to.</param><param name="m43">Value to initialize m43 to.</param><param name="m44">Value to initialize m44 to.</param>
        </member>
        <member name="M:VRageMath.MatrixD.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix with rotation data
            </summary>
            <param name="m11">Value to initialize m11 to.</param><param name="m12">Value to initialize m12 to.</param><param name="m13">Value to initialize m13 to.</param><param name="m14">Value to initialize m14 to.</param><param name="m21">Value to initialize m21 to.</param><param name="m22">Value to initialize m22 to.</param><param name="m23">Value to initialize m23 to.</param><param name="m24">Value to initialize m24 to.</param><param name="m31">Value to initialize m31 to.</param><param name="m32">Value to initialize m32 to.</param><param name="m33">Value to initialize m33 to.</param><param name="m34">Value to initialize m34 to.</param><param name="m41">Value to initialize m41 to.</param><param name="m42">Value to initialize m42 to.</param><param name="m43">Value to initialize m43 to.</param><param name="m44">Value to initialize m44 to.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_UnaryNegation(VRageMath.MatrixD)">
            <summary>
            Negates individual elements of a matrix.
            </summary>
            <param name="matrix1">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Equality(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Compares a matrix for equality with another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Inequality(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Tests a matrix for inequality with another matrix.
            </summary>
            <param name="matrix1">The matrix on the left of the equal sign.</param><param name="matrix2">The matrix on the right of the equal sign.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Addition(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Subtraction(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Subtracts matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Multiply(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Multiply(VRageMath.MatrixD,VRageMath.Matrix)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Multiply(VRageMath.Matrix,VRageMath.MatrixD)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Multiply(VRageMath.MatrixD,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="matrix">Source matrix.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Multiply(System.Double,VRageMath.MatrixD)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Division(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Divides the components of a matrix by the corresponding components of another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">The divisor.</param>
        </member>
        <member name="M:VRageMath.MatrixD.op_Division(VRageMath.MatrixD,System.Double)">
            <summary>
            Divides the components of a matrix by a scalar.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateBillboard(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,System.Nullable{VRageMath.Vector3D})">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="cameraUpVector">The up vector of the camera.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateBillboard(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,System.Nullable{VRageMath.Vector3D},VRageMath.MatrixD@)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="cameraUpVector">The up vector of the camera.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param><param name="result">[OutAttribute] The created billboard matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateConstrainedBillboard(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,System.Nullable{VRageMath.Vector3D},System.Nullable{VRageMath.Vector3D})">
            <summary>
            Creates a cylindrical billboard that rotates around a specified axis.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="rotateAxis">Axis to rotate the billboard around.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param><param name="objectForwardVector">Optional forward vector of the object.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateConstrainedBillboard(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,System.Nullable{VRageMath.Vector3D},System.Nullable{VRageMath.Vector3D},VRageMath.MatrixD@)">
            <summary>
            Creates a cylindrical billboard that rotates around a specified axis.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="rotateAxis">Axis to rotate the billboard around.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param><param name="objectForwardVector">Optional forward vector of the object.</param><param name="result">[OutAttribute] The created billboard matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateTranslation(VRageMath.Vector3D)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateTranslation(VRageMath.Vector3D@,VRageMath.MatrixD@)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param><param name="result">[OutAttribute] The created translation Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="xPosition">Value to translate by on the x-axis.</param><param name="yPosition">Value to translate by on the y-axis.</param><param name="zPosition">Value to translate by on the z-axis.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateTranslation(System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="xPosition">Value to translate by on the x-axis.</param><param name="yPosition">Value to translate by on the y-axis.</param><param name="zPosition">Value to translate by on the z-axis.</param><param name="result">[OutAttribute] The created translation Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="xScale">Value to scale by on the x-axis.</param><param name="yScale">Value to scale by on the y-axis.</param><param name="zScale">Value to scale by on the z-axis.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateScale(System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="xScale">Value to scale by on the x-axis.</param><param name="yScale">Value to scale by on the y-axis.</param><param name="zScale">Value to scale by on the z-axis.</param><param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateScale(VRageMath.Vector3D)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateScale(VRageMath.Vector3D@,VRageMath.MatrixD@)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param><param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateScale(System.Double)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scale">Amount to scale by.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateScale(System.Double,VRageMath.MatrixD@)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scale">Value to scale by.</param><param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateRotationX(System.Double)">
            <summary>
            Returns a matrix that can be used to rotate a set of vertices around the x-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateRotationX(System.Double,VRageMath.MatrixD@)">
            <summary>
            Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param><param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateRotationY(System.Double)">
            <summary>
            Returns a matrix that can be used to rotate a set of vertices around the y-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateRotationY(System.Double,VRageMath.MatrixD@)">
            <summary>
            Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param><param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateRotationZ(System.Double)">
            <summary>
            Returns a matrix that can be used to rotate a set of vertices around the z-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateRotationZ(System.Double,VRageMath.MatrixD@)">
            <summary>
            Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param><param name="result">[OutAttribute] The rotation matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateFromAxisAngle(VRageMath.Vector3D,System.Double)">
            <summary>
            Creates a new Matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param><param name="angle">The angle to rotate around the vector.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateFromAxisAngle(VRageMath.Vector3D@,System.Double,VRageMath.MatrixD@)">
            <summary>
            Creates a new Matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param><param name="angle">The angle to rotate around the vector.</param><param name="result">[OutAttribute] The created Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a perspective projection matrix based on a field of view and returns by value.
            </summary>
            <param name="fieldOfView">Field of view in the y direction, in radians.</param><param name="aspectRatio">Aspect ratio, defined as view space width divided by height. To match the aspect ratio of the viewport, the property AspectRatio.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Builds a perspective projection matrix based on a field of view and returns by reference.
            </summary>
            <param name="fieldOfView">Field of view in the y direction, in radians.</param><param name="aspectRatio">Aspect ratio, defined as view space width divided by height. To match the aspect ratio of the viewport, the property AspectRatio.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param><param name="result">[OutAttribute] The perspective projection matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreatePerspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a perspective projection matrix and returns the result by value.
            </summary>
            <param name="width">Width of the view volume at the near view plane.</param><param name="height">Height of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreatePerspective(System.Double,System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Builds a perspective projection matrix and returns the result by reference.
            </summary>
            <param name="width">Width of the view volume at the near view plane.</param><param name="height">Height of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param><param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a customized, perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param><param name="right">Maximum x-value of the view volume at the near view plane.</param><param name="bottom">Minimum y-value of the view volume at the near view plane.</param><param name="top">Maximum y-value of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to of the far view plane.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Builds a customized, perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param><param name="right">Maximum x-value of the view volume at the near view plane.</param><param name="bottom">Minimum y-value of the view volume at the near view plane.</param><param name="top">Maximum y-value of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to of the far view plane.</param><param name="result">[OutAttribute] The created projection matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds an orthogonal projection matrix.
            </summary>
            <param name="width">Width of the view volume.</param><param name="height">Height of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Builds an orthogonal projection matrix.
            </summary>
            <param name="width">Width of the view volume.</param><param name="height">Height of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param><param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a customized, orthogonal projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume.</param><param name="right">Maximum x-value of the view volume.</param><param name="bottom">Minimum y-value of the view volume.</param><param name="top">Maximum y-value of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Builds a customized, orthogonal projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume.</param><param name="right">Maximum x-value of the view volume.</param><param name="bottom">Minimum y-value of the view volume.</param><param name="top">Maximum y-value of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param><param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateLookAt(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The position of the camera.</param><param name="cameraTarget">The target towards which the camera is pointing.</param><param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateLookAt(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.MatrixD@)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The position of the camera.</param><param name="cameraTarget">The target towards which the camera is pointing.</param><param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param><param name="result">[OutAttribute] The created view matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateWorld(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">Position of the object. This value is used in translation operations.</param><param name="forward">Forward direction of the object.</param><param name="up">Upward direction of the object; usually [0, 1, 0].</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateWorld(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.MatrixD@)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">Position of the object. This value is used in translation operations.</param><param name="forward">Forward direction of the object.</param><param name="up">Upward direction of the object; usually [0, 1, 0].</param><param name="result">[OutAttribute] The created world matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateFromQuaternion(VRageMath.Quaternion)">
            <summary>
            Creates a rotation Matrix from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion to create the Matrix from.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateFromQuaternion(VRageMath.Quaternion@,VRageMath.MatrixD@)">
            <summary>
            Creates a rotation Matrix from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion to create the Matrix from.</param><param name="result">[OutAttribute] The created Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new rotation matrix from a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param><param name="pitch">Angle of rotation, in radians, around the x-axis.</param><param name="roll">Angle of rotation, in radians, around the z-axis.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateFromYawPitchRoll(System.Double,System.Double,System.Double,VRageMath.MatrixD@)">
            <summary>
            Fills in a rotation matrix from a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param><param name="pitch">Angle of rotation, in radians, around the x-axis.</param><param name="roll">Angle of rotation, in radians, around the z-axis.</param><param name="result">[OutAttribute] An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateShadow(VRageMath.Vector3D,VRageMath.Plane)">
            <summary>
            Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.
            </summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param><param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateShadow(VRageMath.Vector3D@,VRageMath.Plane@,VRageMath.MatrixD@)">
            <summary>
            Fills in a Matrix to flatten geometry into a specified Plane as if casting a shadow from a specified light source.
            </summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param><param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param><param name="result">[OutAttribute] A Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateReflection(VRageMath.Plane)">
            <summary>
            Creates a Matrix that reflects the coordinate system about a specified Plane.
            </summary>
            <param name="value">The Plane about which to create a reflection.</param>
        </member>
        <member name="M:VRageMath.MatrixD.CreateReflection(VRageMath.Plane@,VRageMath.MatrixD@)">
            <summary>
            Fills in an existing Matrix so that it reflects the coordinate system about a specified Plane.
            </summary>
            <param name="value">The Plane about which to create a reflection.</param><param name="result">[OutAttribute] A Matrix that creates the reflection.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Transform(VRageMath.MatrixD,VRageMath.Quaternion)">
            <summary>
            Transforms a Matrix by applying a Quaternion rotation.
            </summary>
            <param name="value">The Matrix to transform.</param><param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Transform(VRageMath.MatrixD@,VRageMath.Quaternion@,VRageMath.MatrixD@)">
            <summary>
            Transforms a Matrix by applying a Quaternion rotation.
            </summary>
            <param name="value">The Matrix to transform.</param><param name="rotation">The rotation to apply, expressed as a Quaternion.</param><param name="result">[OutAttribute] An existing Matrix filled in with the result of the transform.</param>
        </member>
        <member name="M:VRageMath.MatrixD.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Equals(VRageMath.MatrixD)">
            <summary>
            Determines whether the specified Object is equal to the Matrix.
            </summary>
            <param name="other">The Object to compare with the current Matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.EqualsFast(VRageMath.MatrixD@,System.Double)">
            <summary>
            Compares just position, forward and up
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.MatrixD.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Transpose(VRageMath.MatrixD)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Transpose(VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param><param name="result">[OutAttribute] Transposed matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Invert(VRageMath.MatrixD)">
            <summary>
            Calculates the inverse of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Invert(VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Calculates the inverse of a matrix.
            </summary>
            <param name="matrix">The source matrix.</param><param name="result">[OutAttribute] The inverse of matrix. The same matrix can be used for both arguments.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Lerp(VRageMath.MatrixD,VRageMath.MatrixD,System.Double)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="amount">Interpolation value.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Lerp(VRageMath.MatrixD@,VRageMath.MatrixD@,System.Double,VRageMath.MatrixD@)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="amount">Interpolation value.</param><param name="result">[OutAttribute] Resulting matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Slerp(VRageMath.MatrixD@,VRageMath.MatrixD@,System.Single,VRageMath.MatrixD@)">
            <summary>
            Performs spherical linear interpolation of position and rotation.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.SlerpScale(VRageMath.MatrixD@,VRageMath.MatrixD@,System.Single,VRageMath.MatrixD@)">
            <summary>
            Performs spherical linear interpolation of position and rotation and scale.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Slerp(VRageMath.MatrixD,VRageMath.MatrixD,System.Single,VRageMath.MatrixD@)">
            <summary>
            Performs spherical linear interpolation of position and rotation.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Slerp(VRageMath.MatrixD,VRageMath.MatrixD,System.Single)">
            <summary>
            Performs spherical linear interpolation of position and rotation.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.SlerpScale(VRageMath.MatrixD,VRageMath.MatrixD,System.Single,VRageMath.MatrixD@)">
            <summary>
            Performs spherical linear interpolation of position and rotation and scale.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.SlerpScale(VRageMath.MatrixD,VRageMath.MatrixD,System.Single)">
            <summary>
            Performs spherical linear interpolation of position and rotation and scale.
            </summary>
        </member>
        <member name="M:VRageMath.MatrixD.Negate(VRageMath.MatrixD)">
            <summary>
            Negates individual elements of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Negate(VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Negates individual elements of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param><param name="result">[OutAttribute] Negated matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Add(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Add(VRageMath.MatrixD@,VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Resulting matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Subtract(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Subtracts matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Subtract(VRageMath.MatrixD@,VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Subtracts matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Multiply(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Multiply(VRageMath.MatrixD,VRageMath.Matrix)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Multiply(VRageMath.MatrixD@,VRageMath.Matrix@,VRageMath.MatrixD@)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Multiply(VRageMath.MatrixD@,VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Multiply(VRageMath.MatrixD,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Multiply(VRageMath.MatrixD@,System.Double,VRageMath.MatrixD@)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Divide(VRageMath.MatrixD,VRageMath.MatrixD)">
            <summary>
            Divides the components of a matrix by the corresponding components of another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">The divisor.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Divide(VRageMath.MatrixD@,VRageMath.MatrixD@,VRageMath.MatrixD@)">
            <summary>
            Divides the components of a matrix by the corresponding components of another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">The divisor.</param><param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Divide(VRageMath.MatrixD,System.Double)">
            <summary>
            Divides the components of a matrix by a scalar.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.MatrixD.Divide(VRageMath.MatrixD@,System.Double,VRageMath.MatrixD@)">
            <summary>
            Divides the components of a matrix by a scalar.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="divider">The divisor.</param><param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:VRageMath.MatrixD.GetOrientation">
            <summary>
            Gets the orientation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRageMath.MatrixD.HasNoTranslationOrPerspective">
            <summary>
            Returns true if this matrix represents invertible (you can call Invert on it) linear (it does not contain translation or perspective transformation) transformation.
            Such matrix consist solely of rotations, shearing, mirroring and scaling. It can be orthogonalized to create an orthogonal rotation matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Up">
            <summary>
            Gets and sets the up vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Down">
            <summary>
            Gets and sets the down vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Right">
            <summary>
            Gets and sets the right vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Left">
            <summary>
            Gets and sets the left vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Forward">
            <summary>
            Gets and sets the forward vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Backward">
            <summary>
            Gets and sets the backward vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.MatrixD.Translation">
            <summary>
            Gets and sets the translation vector of the Matrix.
            </summary>
        </member>
        <member name="M:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.Activate(System.Object,System.UInt64)">
            <summary>
            Called when standalone object is added to cluster
            </summary>
            <param name="userData"></param>
            <param name="clusterObjectID"></param>
        </member>
        <member name="M:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.Deactivate(System.Object)">
            <summary>
            Called when standalone object is removed from cluster
            </summary>
            <param name="userData"></param>
            <param name="clusterObjectID"></param>
        </member>
        <member name="M:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.ActivateBatch(System.Object,System.UInt64)">
            <summary>
            Called when multiple objects are added to cluster.
            </summary>
            <param name="userData"></param>
            <param name="clusterObjectID"></param>
        </member>
        <member name="M:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.DeactivateBatch(System.Object)">
            <summary>
            Called when multiple objects are removed from cluster.
            </summary>
            <param name="userData"></param>
            <param name="clusterObjectID"></param>
        </member>
        <member name="M:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.FinishAddBatch">
            <summary>
            Called when adding multiple objects is finished.
            </summary>
        </member>
        <member name="M:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.FinishRemoveBatch(System.Object)">
            <summary>
            Called when removing multiple objects is finished.
            </summary>
        </member>
        <member name="P:VRageMath.Spatial.MyClusterTree.IMyActivationHandler.IsStaticForCluster">
            <summary>
            If true, than this object is not calculated into cluster division algorithm. It is just added or removed if dynamic object is in range.
            </summary>
        </member>
        <member name="T:VRageMath.MyDynamicAABBTreeD">
            <summary>
            Dynamic aabb tree implementation as a prunning structure
            </summary>
        </member>
        <member name="F:VRageMath.MyDynamicAABBTreeD.NullNode">
            <summary>
            A dynamic tree arranges data in a binary tree to accelerate
            queries such as volume queries and ray casts. Leafs are proxies
            with an BoundingBox. In the tree we expand the proxy BoundingBox by Settings.b2_fatAABBFactor
            so that the proxy BoundingBox is bigger than the client object. This allows the client
            object to move by small amounts without triggering a tree update.
            Nodes are pooled and relocatable, so we use node indices rather than pointers.
            </summary>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.#ctor(VRageMath.Vector3D,System.Double)">
            constructing the tree initializes the node pool.
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.AddProxy(VRageMath.BoundingBoxD@,System.Object,System.UInt32,System.Boolean)">
            <summary>
            Create a proxy. Provide a tight fitting BoundingBox and a userData pointer.
            </summary>
            <param name="aabb">The aabb.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.RemoveProxy(System.Int32)">
            <summary>
            Destroy a proxy. This asserts if the id is invalid.
            </summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.MoveProxy(System.Int32,VRageMath.BoundingBoxD@,VRageMath.Vector3D)">
            <summary>
            Move a proxy with a swepted BoundingBox. If the proxy has moved outside of its fattened BoundingBox,
            then the proxy is removed from the tree and re-inserted. Otherwise
            the function returns immediately.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The aabb.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.GetUserData``1(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns>the proxy user data or 0 if the id is invalid.</returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.GetUserFlag(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns>the proxy user data or 0 if the id is invalid.</returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.GetFatAABB(System.Int32,VRageMath.BoundingBoxD@)">
            <summary>
            Get the fat BoundingBox for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="fatAABB">The fat BoundingBox.</param>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.Query(System.Func{System.Int32,System.Boolean},VRageMath.BoundingBoxD@)">
            Query an BoundingBox for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied BoundingBox.
        </member>
        <member name="M:VRageMath.MyDynamicAABBTreeD.GetHeight">
            Compute the height of the binary tree in O(N) time. Should not be
            called often.
        </member>
        <member name="T:VRageMath.MyDynamicAABBTreeD.DynamicTreeNode">
            <summary>
            A node in the dynamic tree. The client does not interact with this directly.
            </summary>
        </member>
        <member name="F:VRageMath.MyDynamicAABBTreeD.DynamicTreeNode.Aabb">
            This is the fattened BoundingBox.
        </member>
        <member name="T:VRageMath.Vector3D">
            <summary>
            Defines a vector with three components.
            </summary>
        </member>
        <member name="F:VRageMath.Vector3D.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector3D.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector3D.Z">
            <summary>
            Gets or sets the z-component of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">Initial value for the x-component of the vector.</param><param name="y">Initial value for the y-component of the vector.</param><param name="z">Initial value for the z-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.#ctor(System.Double)">
            <summary>
            Creates a new instance of Vector3.
            </summary>
            <param name="value">Value to initialize each component to.</param>
        </member>
        <member name="M:VRageMath.Vector3D.#ctor(VRageMath.Vector2,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="value">A vector containing the values to initialize x and y components with.</param><param name="z">Initial value for the z-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_UnaryNegation(VRageMath.Vector3D)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Equality(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Tests vectors for equality.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Inequality(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Tests vectors for inequality.
            </summary>
            <param name="value1">Vector to compare.</param><param name="value2">Vector to compare.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Addition(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Subtraction(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Multiply(VRageMath.Vector3D,VRageMath.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Multiply(VRageMath.Vector3D,System.Double)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Multiply(System.Double,VRageMath.Vector3D)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Division(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.op_Division(VRageMath.Vector3D,System.Double)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector3D.SignNonZero(VRageMath.Vector3D)">
            <summary>
            Returns per component sign, never returns zero.
            For zero component returns sign 1.
            Faster than Sign.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.Equals(VRageMath.Vector3D)">
            <summary>
            Determines whether the specified Object is equal to the Vector3.
            </summary>
            <param name="other">The Vector3 to compare with the current Vector3.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:VRageMath.Vector3D.GetHash">
            <summary>
            Gets the hash code of the vector object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.LengthSquared">
            <summary>
            Calculates the length of the vector squared.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.Distance(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Distance(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3D.DistanceSquared(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.DistanceSquared(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double@)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the two vectors squared.</param>
        </member>
        <member name="M:VRageMath.Vector3D.RectangularDistance(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Calculates rectangular distance (a.k.a. Manhattan distance or Chessboard distace) between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.RectangularDistance(VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Calculates rectangular distance (a.k.a. Manhattan distance or Chessboard distace) between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Dot(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a doubleing point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Dot(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double@)">
            <summary>
            Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a doubleing point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Normalize">
            <summary>
            Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            returns length
        </member>
        <member name="M:VRageMath.Vector3D.Normalize(VRageMath.Vector3D)">
            <summary>
            Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            <param name="value">The source Vector3.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Normalize(VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] The normalized vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Cross(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Cross(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The cross product of the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Reflect(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.
            </summary>
            <param name="vector">Source vector.</param><param name="normal">Normal of the surface.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Reflect(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.
            </summary>
            <param name="vector">Source vector.</param><param name="normal">Normal of the surface.</param><param name="result">[OutAttribute] The reflected vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Reject(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Returns the rejection of vector from direction, i.e. projection of vector onto the plane defined by origin and direction
            </summary>
            <param name="vector">Vector which is to be rejected</param>
            <param name="direction">Direction from which the input vector will be rejected</param>
            <returns>Rejection of the vector from the given direction</returns>
        </member>
        <member name="M:VRageMath.Vector3D.Reject(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Returns the rejection of vector from direction, i.e. projection of vector onto the plane defined by origin and direction
            </summary>
            <param name="vector">Vector which is to be rejected</param>
            <param name="direction">Direction from which the input vector will be rejected</param>
            <param name="result">Rejection of the vector from the given direction</param>
        </member>
        <member name="M:VRageMath.Vector3D.Min">
            <summary>
            Returns the component of the vector that is smallest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.AbsMin">
            <summary>
            Returns the component of the vector, whose absolute value is smallest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.Max">
            <summary>
            Returns the component of the vector that is largest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.AbsMax">
            <summary>
            Returns the component of the vector, whose absolute value is largest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3D.Min(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Min(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Max(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Max(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.DominantAxisProjection(VRageMath.Vector3D)">
            <summary>
            Returns a vector that is equal to the projection of the input vector to the coordinate axis that corresponds
            to the original vector's largest value.
            </summary>
            <param name="value1">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.DominantAxisProjection(VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Calculates a vector that is equal to the projection of the input vector to the coordinate axis that corresponds
            to the original vector's largest value. The result is saved into a user-specified variable.
            </summary>
            <param name="value1">Source vector.</param><param name="result">[OutAttribute] The projected vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Clamp(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Clamp(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param><param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Lerp(VRageMath.Vector3D,VRageMath.Vector3D,System.Double)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Lerp(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double,VRageMath.Vector3D@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param><param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Barycentric(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,System.Double,System.Double)">
            <summary>
            Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:VRageMath.Vector3D.Barycentric(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double,System.Double,VRageMath.Vector3D@)">
            <summary>
            Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param><param name="result">[OutAttribute] The 3D Cartesian coordinates of the specified point are placed in this Vector3 on exit.</param>
        </member>
        <member name="M:VRageMath.Vector3D.SmoothStep(VRageMath.Vector3D,VRageMath.Vector3D,System.Double)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param>
        </member>
        <member name="M:VRageMath.Vector3D.SmoothStep(VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double,VRageMath.Vector3D@)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Weighting value.</param><param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:VRageMath.Vector3D.CatmullRom(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,System.Double)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector3D.CatmullRom(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double,VRageMath.Vector3D@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Hermite(VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,System.Double)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Hermite(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@,System.Double,VRageMath.Vector3D@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D,VRageMath.MatrixD)">
            <summary>
            Transforms a 3D vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D,VRageMath.Matrix)">
            <summary>
            Transforms a 3D vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D@,VRageMath.MatrixD@,VRageMath.Vector3D@)">
            <summary>
            Transforms a Vector3 by the given Matrix.
            </summary>
            <param name="position">The source Vector3.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The transformed vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.TransformNormal(VRageMath.Vector3D,VRageMath.Matrix)">
            <summary>
            Transforms a 3D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3D.TransformNormal(VRageMath.Vector3,VRageMath.MatrixD)">
            <summary>
            Transforms a 3D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3D.TransformNormal(VRageMath.Vector3D,VRageMath.MatrixD)">
            <summary>
            Transforms a 3D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3D.TransformNormal(VRageMath.Vector3D@,VRageMath.MatrixD@,VRageMath.Vector3D@)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector3 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector3 by a specified Quaternion rotation.
            </summary>
            <param name="value">The Vector3 to rotate.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D@,VRageMath.Quaternion@,VRageMath.Vector3D@)">
            <summary>
            Transforms a Vector3 by a specified Quaternion rotation.
            </summary>
            <param name="value">The Vector3 to rotate.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] An existing Vector3 filled in with the results of the rotation.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D[],VRageMath.MatrixD@,VRageMath.Vector3D[])">
            <summary>
            Transforms a source array of Vector3s by a specified Matrix and writes the results to an existing destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D[],System.Int32,VRageMath.Matrix@,VRageMath.Vector3D[],System.Int32,System.Int32)">
            <summary>
            Applies a specified transform Matrix to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index in the source array at which to start.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The existing destination array.</param><param name="destinationIndex">The index in the destination array at which to start.</param><param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector3D.TransformNormal(VRageMath.Vector3D[],VRageMath.Matrix@,VRageMath.Vector3D[])">
            <summary>
            Transforms an array of 3D vector normals by a specified Matrix.
            </summary>
            <param name="sourceArray">The array of Vector3 normals to transform.</param><param name="matrix">The transform matrix to apply.</param><param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
        </member>
        <member name="M:VRageMath.Vector3D.TransformNormal(VRageMath.Vector3D[],System.Int32,VRageMath.Matrix@,VRageMath.Vector3D[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of 3D vector normals by a specified Matrix and writes the results to a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array of Vector3 normals.</param><param name="sourceIndex">The starting index in the source array.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The destination Vector3 array.</param><param name="destinationIndex">The starting index in the destination array.</param><param name="length">The number of vectors to transform.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D[],VRageMath.Quaternion@,VRageMath.Vector3D[])">
            <summary>
            Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Transform(VRageMath.Vector3D[],System.Int32,VRageMath.Quaternion@,VRageMath.Vector3D[],System.Int32,System.Int32)">
            <summary>
            Applies a specified Quaternion rotation to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index in the source array at which to start.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The existing destination array.</param><param name="destinationIndex">The index in the destination array at which to start.</param><param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Negate(VRageMath.Vector3D)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Negate(VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Add(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Add(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Subtract(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Subtract(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Multiply(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Multiply(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Multiply(VRageMath.Vector3D,System.Double)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Multiply(VRageMath.Vector3D@,System.Double,VRageMath.Vector3D@)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Divide(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Divide(VRageMath.Vector3D@,VRageMath.Vector3D@,VRageMath.Vector3D@)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Divide(VRageMath.Vector3D,System.Double)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector3D.Divide(VRageMath.Vector3D@,System.Double,VRageMath.Vector3D@)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.MyMortonCode3D.splitBits(System.Int32)">
            <summary>
            Split 10 lowest bits of the number so that there are 3 empty slots between them.
            </summary>
        </member>
        <member name="M:VRageMath.MyMortonCode3D.joinBits(System.Int32)">
            <summary>
            Reverses splitBits operation.
            </summary>
        </member>
        <member name="T:VRageMath.Color">
            <summary>
            Represents a four-component color using red, green, blue, and alpha data.
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.IPackedVector`1">
            <summary>
            Converts packed vector types to and from Vector4 values.
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.IPackedVector">
            <summary>
            Interface that converts packed vector types to and from Vector4 values, allowing multiple encodings to be manipulated in a generic way.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.IPackedVector.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.IPackedVector.PackFromVector4(VRageMath.Vector4)">
            <summary>
            Sets the packed representation from a Vector4.
            </summary>
            <param name="vector">The vector to create the packed representation from.</param>
        </member>
        <member name="P:VRageMath.PackedVector.IPackedVector`1.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
        </member>
        <member name="M:VRageMath.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="r">Red component.</param><param name="g">Green component.</param><param name="b">Blue component.</param>
        </member>
        <member name="M:VRageMath.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="r">Red component.</param><param name="g">Green component.</param><param name="b">Blue component.</param><param name="a">Alpha component.</param>
        </member>
        <member name="M:VRageMath.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="r">Red component.</param><param name="g">Green component.</param><param name="b">Blue component.</param>
        </member>
        <member name="M:VRageMath.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="r">Red component.</param><param name="g">Green component.</param><param name="b">Blue component.</param><param name="a">Alpha component.</param>
        </member>
        <member name="M:VRageMath.Color.#ctor(VRageMath.Vector3)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="vector">A three-component color.</param>
        </member>
        <member name="M:VRageMath.Color.#ctor(VRageMath.Vector4)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="vector">A four-component color.</param>
        </member>
        <member name="M:VRageMath.Color.op_Multiply(VRageMath.Color,System.Single)">
            <summary>
            Multiply operator.
            </summary>
            <param name="value">A four-component color</param><param name="scale">Scale factor.</param>
        </member>
        <member name="M:VRageMath.Color.op_Equality(VRageMath.Color,VRageMath.Color)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">A four-component color.</param><param name="b">A four-component color.</param>
        </member>
        <member name="M:VRageMath.Color.op_Inequality(VRageMath.Color,VRageMath.Color)">
            <summary>
            Equality operator for Testing two color objects to see if they are equal.
            </summary>
            <param name="a">A four-component color.</param><param name="b">A four-component color.</param>
        </member>
        <member name="M:VRageMath.Color.FromNonPremultiplied(VRageMath.Vector4)">
            <summary>
            Convert a non premultipled color into color data that contains alpha.
            </summary>
            <param name="vector">A four-component color.</param>
        </member>
        <member name="M:VRageMath.Color.FromNonPremultiplied(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a non-premultipled alpha color to a color that contains premultiplied alpha.
            </summary>
            <param name="r">Red component.</param><param name="g">Green component.</param><param name="b">Blue component.</param><param name="a">Alpha component.</param>
        </member>
        <member name="M:VRageMath.Color.ToVector3">
            <summary>
            Gets a three-component vector representation for this object.
            </summary>
        </member>
        <member name="M:VRageMath.Color.ToVector4">
            <summary>
            Gets a four-component vector representation for this object.
            </summary>
        </member>
        <member name="M:VRageMath.Color.Lerp(VRageMath.Color,VRageMath.Color,System.Single)">
            <summary>
            Linearly interpolate a color.
            </summary>
            <param name="value1">A four-component color.</param><param name="value2">A four-component color.</param><param name="amount">Interpolation factor.</param>
        </member>
        <member name="M:VRageMath.Color.Multiply(VRageMath.Color,System.Single)">
            <summary>
            Multiply each color component by the scale factor.
            </summary>
            <param name="value">The source, four-component color.</param><param name="scale">The scale factor.</param>
        </member>
        <member name="M:VRageMath.Color.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
        </member>
        <member name="M:VRageMath.Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="M:VRageMath.Color.Equals(System.Object)">
            <summary>
            Test an instance of a color object to see if it is equal to this object.
            </summary>
            <param name="obj">A color object.</param>
        </member>
        <member name="M:VRageMath.Color.Equals(VRageMath.Color)">
            <summary>
            Test a color to see if it is equal to the color in this instance.
            </summary>
            <param name="other">A four-component color.</param>
        </member>
        <member name="P:VRageMath.Color.R">
            <summary>
            Gets or sets the red component value of this Color.
            </summary>
        </member>
        <member name="P:VRageMath.Color.G">
            <summary>
            Gets or sets the green component value of this Color.
            </summary>
        </member>
        <member name="P:VRageMath.Color.B">
            <summary>
            Gets or sets the blue component value of this Color.
            </summary>
        </member>
        <member name="P:VRageMath.Color.A">
            <summary>
            Gets or sets the alpha component value.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PackedValue">
            <summary>
            Gets the current color as a packed value.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Transparent">
            <summary>
            Gets a system-defined color with the value R:0 G:0 B:0 A:0.
            </summary>
        </member>
        <member name="P:VRageMath.Color.AliceBlue">
            <summary>
            Gets a system-defined color with the value R:240 G:248 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.AntiqueWhite">
            <summary>
            Gets a system-defined color with the value R:250 G:235 B:215 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Aqua">
            <summary>
            Gets a system-defined color with the value R:0 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Aquamarine">
            <summary>
            Gets a system-defined color with the value R:127 G:255 B:212 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Azure">
            <summary>
            Gets a system-defined color with the value R:240 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Beige">
            <summary>
            Gets a system-defined color with the value R:245 G:245 B:220 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Bisque">
            <summary>
            Gets a system-defined color with the value R:255 G:228 B:196 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Black">
            <summary>
            Gets a system-defined color with the value R:0 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.BlanchedAlmond">
            <summary>
            Gets a system-defined color with the value R:255 G:235 B:205 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Blue">
            <summary>
            Gets a system-defined color with the value R:0 G:0 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.BlueViolet">
            <summary>
            Gets a system-defined color with the value R:138 G:43 B:226 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Brown">
            <summary>
            Gets a system-defined color with the value R:165 G:42 B:42 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.BurlyWood">
            <summary>
            Gets a system-defined color with the value R:222 G:184 B:135 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.CadetBlue">
            <summary>
            Gets a system-defined color with the value R:95 G:158 B:160 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Chartreuse">
            <summary>
            Gets a system-defined color with the value R:127 G:255 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Chocolate">
            <summary>
            Gets a system-defined color with the value R:210 G:105 B:30 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Coral">
            <summary>
            Gets a system-defined color with the value R:255 G:127 B:80 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.CornflowerBlue">
            <summary>
            Gets a system-defined color with the value R:100 G:149 B:237 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Cornsilk">
            <summary>
            Gets a system-defined color with the value R:255 G:248 B:220 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Crimson">
            <summary>
            Gets a system-defined color with the value R:220 G:20 B:60 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Cyan">
            <summary>
            Gets a system-defined color with the value R:0 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkBlue">
            <summary>
            Gets a system-defined color with the value R:0 G:0 B:139 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkCyan">
            <summary>
            Gets a system-defined color with the value R:0 G:139 B:139 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkGoldenrod">
            <summary>
            Gets a system-defined color with the value R:184 G:134 B:11 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkGray">
            <summary>
            Gets a system-defined color with the value R:169 G:169 B:169 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkGreen">
            <summary>
            Gets a system-defined color with the value R:0 G:100 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkKhaki">
            <summary>
            Gets a system-defined color with the value R:189 G:183 B:107 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkMagenta">
            <summary>
            Gets a system-defined color with the value R:139 G:0 B:139 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkOliveGreen">
            <summary>
            Gets a system-defined color with the value R:85 G:107 B:47 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkOrange">
            <summary>
            Gets a system-defined color with the value R:255 G:140 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkOrchid">
            <summary>
            Gets a system-defined color with the value R:153 G:50 B:204 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkRed">
            <summary>
            Gets a system-defined color with the value R:139 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkSalmon">
            <summary>
            Gets a system-defined color with the value R:233 G:150 B:122 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkSeaGreen">
            <summary>
            Gets a system-defined color with the value R:143 G:188 B:139 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkSlateBlue">
            <summary>
            Gets a system-defined color with the value R:72 G:61 B:139 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkSlateGray">
            <summary>
            Gets a system-defined color with the value R:47 G:79 B:79 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkTurquoise">
            <summary>
            Gets a system-defined color with the value R:0 G:206 B:209 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DarkViolet">
            <summary>
            Gets a system-defined color with the value R:148 G:0 B:211 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DeepPink">
            <summary>
            Gets a system-defined color with the value R:255 G:20 B:147 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DeepSkyBlue">
            <summary>
            Gets a system-defined color with the value R:0 G:191 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DimGray">
            <summary>
            Gets a system-defined color with the value R:105 G:105 B:105 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.DodgerBlue">
            <summary>
            Gets a system-defined color with the value R:30 G:144 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Firebrick">
            <summary>
            Gets a system-defined color with the value R:178 G:34 B:34 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.FloralWhite">
            <summary>
            Gets a system-defined color with the value R:255 G:250 B:240 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.ForestGreen">
            <summary>
            Gets a system-defined color with the value R:34 G:139 B:34 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Fuchsia">
            <summary>
            Gets a system-defined color with the value R:255 G:0 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Gainsboro">
            <summary>
            Gets a system-defined color with the value R:220 G:220 B:220 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.GhostWhite">
            <summary>
            Gets a system-defined color with the value R:248 G:248 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Gold">
            <summary>
            Gets a system-defined color with the value R:255 G:215 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Goldenrod">
            <summary>
            Gets a system-defined color with the value R:218 G:165 B:32 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Gray">
            <summary>
            Gets a system-defined color with the value R:128 G:128 B:128 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Green">
            <summary>
            Gets a system-defined color with the value R:0 G:128 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.GreenYellow">
            <summary>
            Gets a system-defined color with the value R:173 G:255 B:47 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Honeydew">
            <summary>
            Gets a system-defined color with the value R:240 G:255 B:240 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.HotPink">
            <summary>
            Gets a system-defined color with the value R:255 G:105 B:180 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.IndianRed">
            <summary>
            Gets a system-defined color with the value R:205 G:92 B:92 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Indigo">
            <summary>
            Gets a system-defined color with the value R:75 G:0 B:130 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Ivory">
            <summary>
            Gets a system-defined color with the value R:255 G:255 B:240 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Khaki">
            <summary>
            Gets a system-defined color with the value R:240 G:230 B:140 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Lavender">
            <summary>
            Gets a system-defined color with the value R:230 G:230 B:250 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LavenderBlush">
            <summary>
            Gets a system-defined color with the value R:255 G:240 B:245 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LawnGreen">
            <summary>
            Gets a system-defined color with the value R:124 G:252 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LemonChiffon">
            <summary>
            Gets a system-defined color with the value R:255 G:250 B:205 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightBlue">
            <summary>
            Gets a system-defined color with the value R:173 G:216 B:230 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightCoral">
            <summary>
            Gets a system-defined color with the value R:240 G:128 B:128 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightCyan">
            <summary>
            Gets a system-defined color with the value R:224 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightGoldenrodYellow">
            <summary>
            Gets a system-defined color with the value R:250 G:250 B:210 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightGreen">
            <summary>
            Gets a system-defined color with the value R:144 G:238 B:144 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightGray">
            <summary>
            Gets a system-defined color with the value R:211 G:211 B:211 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightPink">
            <summary>
            Gets a system-defined color with the value R:255 G:182 B:193 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightSalmon">
            <summary>
            Gets a system-defined color with the value R:255 G:160 B:122 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightSeaGreen">
            <summary>
            Gets a system-defined color with the value R:32 G:178 B:170 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightSkyBlue">
            <summary>
            Gets a system-defined color with the value R:135 G:206 B:250 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightSlateGray">
            <summary>
            Gets a system-defined color with the value R:119 G:136 B:153 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightSteelBlue">
            <summary>
            Gets a system-defined color with the value R:176 G:196 B:222 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LightYellow">
            <summary>
            Gets a system-defined color with the value R:255 G:255 B:224 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Lime">
            <summary>
            Gets a system-defined color with the value R:0 G:255 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.LimeGreen">
            <summary>
            Gets a system-defined color with the value R:50 G:205 B:50 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Linen">
            <summary>
            Gets a system-defined color with the value R:250 G:240 B:230 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Magenta">
            <summary>
            Gets a system-defined color with the value R:255 G:0 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Maroon">
            <summary>
            Gets a system-defined color with the value R:128 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumAquamarine">
            <summary>
            Gets a system-defined color with the value R:102 G:205 B:170 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumBlue">
            <summary>
            Gets a system-defined color with the value R:0 G:0 B:205 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumOrchid">
            <summary>
            Gets a system-defined color with the value R:186 G:85 B:211 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumPurple">
            <summary>
            Gets a system-defined color with the value R:147 G:112 B:219 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumSeaGreen">
            <summary>
            Gets a system-defined color with the value R:60 G:179 B:113 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumSlateBlue">
            <summary>
            Gets a system-defined color with the value R:123 G:104 B:238 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumSpringGreen">
            <summary>
            Gets a system-defined color with the value R:0 G:250 B:154 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumTurquoise">
            <summary>
            Gets a system-defined color with the value R:72 G:209 B:204 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MediumVioletRed">
            <summary>
            Gets a system-defined color with the value R:199 G:21 B:133 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MidnightBlue">
            <summary>
            Gets a system-defined color with the value R:25 G:25 B:112 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MintCream">
            <summary>
            Gets a system-defined color with the value R:245 G:255 B:250 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.MistyRose">
            <summary>
            Gets a system-defined color with the value R:255 G:228 B:225 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Moccasin">
            <summary>
            Gets a system-defined color with the value R:255 G:228 B:181 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.NavajoWhite">
            <summary>
            Gets a system-defined color with the value R:255 G:222 B:173 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Navy">
            <summary>
            Gets a system-defined color R:0 G:0 B:128 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.OldLace">
            <summary>
            Gets a system-defined color with the value R:253 G:245 B:230 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Olive">
            <summary>
            Gets a system-defined color with the value R:128 G:128 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.OliveDrab">
            <summary>
            Gets a system-defined color with the value R:107 G:142 B:35 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Orange">
            <summary>
            Gets a system-defined color with the value R:255 G:165 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.OrangeRed">
            <summary>
            Gets a system-defined color with the value R:255 G:69 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Orchid">
            <summary>
            Gets a system-defined color with the value R:218 G:112 B:214 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PaleGoldenrod">
            <summary>
            Gets a system-defined color with the value R:238 G:232 B:170 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PaleGreen">
            <summary>
            Gets a system-defined color with the value R:152 G:251 B:152 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PaleTurquoise">
            <summary>
            Gets a system-defined color with the value R:175 G:238 B:238 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PaleVioletRed">
            <summary>
            Gets a system-defined color with the value R:219 G:112 B:147 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PapayaWhip">
            <summary>
            Gets a system-defined color with the value R:255 G:239 B:213 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PeachPuff">
            <summary>
            Gets a system-defined color with the value R:255 G:218 B:185 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Peru">
            <summary>
            Gets a system-defined color with the value R:205 G:133 B:63 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Pink">
            <summary>
            Gets a system-defined color with the value R:255 G:192 B:203 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Plum">
            <summary>
            Gets a system-defined color with the value R:221 G:160 B:221 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.PowderBlue">
            <summary>
            Gets a system-defined color with the value R:176 G:224 B:230 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Purple">
            <summary>
            Gets a system-defined color with the value R:128 G:0 B:128 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Red">
            <summary>
            Gets a system-defined color with the value R:255 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.RosyBrown">
            <summary>
            Gets a system-defined color with the value R:188 G:143 B:143 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.RoyalBlue">
            <summary>
            Gets a system-defined color with the value R:65 G:105 B:225 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SaddleBrown">
            <summary>
            Gets a system-defined color with the value R:139 G:69 B:19 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Salmon">
            <summary>
            Gets a system-defined color with the value R:250 G:128 B:114 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SandyBrown">
            <summary>
            Gets a system-defined color with the value R:244 G:164 B:96 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SeaGreen">
            <summary>
            Gets a system-defined color with the value R:46 G:139 B:87 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SeaShell">
            <summary>
            Gets a system-defined color with the value R:255 G:245 B:238 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Sienna">
            <summary>
            Gets a system-defined color with the value R:160 G:82 B:45 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Silver">
            <summary>
            Gets a system-defined color with the value R:192 G:192 B:192 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SkyBlue">
            <summary>
            Gets a system-defined color with the value R:135 G:206 B:235 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SlateBlue">
            <summary>
            Gets a system-defined color with the value R:106 G:90 B:205 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SlateGray">
            <summary>
            Gets a system-defined color with the value R:112 G:128 B:144 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Snow">
            <summary>
            Gets a system-defined color with the value R:255 G:250 B:250 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SpringGreen">
            <summary>
            Gets a system-defined color with the value R:0 G:255 B:127 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.SteelBlue">
            <summary>
            Gets a system-defined color with the value R:70 G:130 B:180 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Tan">
            <summary>
            Gets a system-defined color with the value R:210 G:180 B:140 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Teal">
            <summary>
            Gets a system-defined color with the value R:0 G:128 B:128 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Thistle">
            <summary>
            Gets a system-defined color with the value R:216 G:191 B:216 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Tomato">
            <summary>
            Gets a system-defined color with the value R:255 G:99 B:71 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Turquoise">
            <summary>
            Gets a system-defined color with the value R:64 G:224 B:208 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Violet">
            <summary>
            Gets a system-defined color with the value R:238 G:130 B:238 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Wheat">
            <summary>
            Gets a system-defined color with the value R:245 G:222 B:179 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.White">
            <summary>
            Gets a system-defined color with the value R:255 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.WhiteSmoke">
            <summary>
            Gets a system-defined color with the value R:245 G:245 B:245 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.Yellow">
            <summary>
            Gets a system-defined color with the value R:255 G:255 B:0 A:255.
            </summary>
        </member>
        <member name="P:VRageMath.Color.YellowGreen">
            <summary>
            Gets a system-defined color with the value R:154 G:205 B:50 A:255.
            </summary>
        </member>
        <member name="T:VRageMath.ContainmentType">
            <summary>
            Indicates the extent to which bounding volumes intersect or contain one another.
            </summary>
            <param name="Contains">Indicates that one bounding volume completely contains the other.</param><param name="Disjoint">Indicates there is no overlap between the bounding volumes.</param><param name="Intersects">Indicates that the bounding volumes partially overlap.</param>
        </member>
        <member name="M:VRageMath.MyBlockOrientation.TransformDirection(VRageMath.Base6Directions.Direction)">
            <summary>
            Returns the direction baseDirection will point to after transformation
            </summary>
        </member>
        <member name="M:VRageMath.MyBlockOrientation.TransformDirectionInverse(VRageMath.Base6Directions.Direction)">
            <summary>
            Returns the direction that this orientation transforms to baseDirection
            </summary>
        </member>
        <member name="M:VRageMath.MyBounds.Normalize(System.Single)">
            <summary>
            Normalize value inside the bounds so that 0 is Min and 1 is Max.
            </summary>
        </member>
        <member name="M:VRageMath.MyOrientedBoundingBox.GetNormalBetweenEdges(System.Int32,System.Int32,System.Int32,VRageMath.Vector3@)">
            <summary>
            Returns normal between two cube edge of same direction
            </summary>
            <param name="axis">Edge direction axis (0 = X, 1 = Y, 2 = Z)</param>
            <param name="edge0"></param>
            <param name="edge1"></param>
            <param name="normal"></param>
            <returns>false if edges are not neighbors</returns>
        </member>
        <member name="M:VRageMath.MyOrientedBoundingBox.#ctor(VRageMath.Matrix@)">
            <summary>
            Initializes a new instance of the MyOrientedBoundingBox.
            Scale of matrix is size of box
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.HalfVector3">
            <summary>
            Packed vector type containing four 16-bit floating-point values.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the HalfVector3 class.
            </summary>
            <param name="x">Initial value for the x component.</param><param name="y">Initial value for the y component.</param><param name="z">Initial value for the z component.</param><param name="w">Initial value for the w component.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector3.#ctor(VRageMath.Vector3)">
            <summary>
            Initializes a new instance of the HalfVector3 structure.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the HalfVector3 structure.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector3.ToVector3">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector3.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3B.Fit(VRageMath.Vector3,System.Single)">
            <summary>
            Puts Vector3 into Vector3B, value -127 represents -range, 128 represents range
            </summary>
        </member>
        <member name="T:VRageMath.Vector3INormalEqualityComparer">
            <summary>
            This can be used only to compare normal vectors of Vector3I, where X, Y and Z has values -1, 0 or 1
            </summary>
        </member>
        <member name="M:VRageMath.Vector3UByte.IsMiddle(VRageMath.Vector3UByte)">
            <summary>
            Returns true when all components are 127
            </summary>
        </member>
        <member name="M:VRageMath.Vector3UByte.Normalize(VRageMath.Vector3,System.Single)">
            <summary>
            Normalizes Vector3 into Vector4UByte, scales vector from (-range, range) to (0, 255)
            </summary>
        </member>
        <member name="M:VRageMath.Vector3UByte.Denormalize(VRageMath.Vector3UByte,System.Single)">
            <summary>
            Unpacks Vector3 from Vector3UByte, scales vector from (0, 255) to (-range, range)
            </summary>
        </member>
        <member name="M:VRageMath.Vector3I.RectangularDistance(VRageMath.Vector3I)">
            <summary>
            Calculates rectangular distance.
            It's how many sectors you have to travel to get to other sector from current sector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3I.RectangularLength">
            <summary>
            Calculates rectangular distance of this vector, interpreted as a point, from the origin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRageMath.Vector3I.AbsMin">
            <summary>
            Returns the component of the vector, whose absolute value is smallest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3I.AbsMax">
            <summary>
            Returns the component of the vector, whose absolute value is largest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3I.DominantAxisProjection(VRageMath.Vector3I)">
            <summary>
            Returns a vector that is equal to the projection of the input vector to the coordinate axis that corresponds
            to the original vector's largest value.
            </summary>
            <param name="value1">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3I.DominantAxisProjection(VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Calculates a vector that is equal to the projection of the input vector to the coordinate axis that corresponds
            to the original vector's largest value. The result is saved into a user-specified variable.
            </summary>
            <param name="value1">Source vector.</param><param name="result">[OutAttribute] The projected vector.</param>
        </member>
        <member name="M:VRageMath.Vector3I.Transform(VRageMath.Vector3I@,VRageMath.Matrix@,VRageMath.Vector3I@)">
            <summary>
            Transforms a Vector3I by the given Matrix.
            </summary>
            <param name="position">The source Vector3I.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The transformed vector.</param>
        </member>
        <member name="M:VRageMath.Vector3I.TransformNormal(VRageMath.Vector3I@,VRageMath.Matrix@,VRageMath.Vector3I@)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector3 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector3I.Cross(VRageMath.Vector3I@,VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The cross product of the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3I.DistanceManhattan(VRageMath.Vector3I,VRageMath.Vector3I)">
            <summary>
            Manhattan distance (cube distance)
            X + Y + Z of Abs(first - second)
            </summary>
        </member>
        <member name="P:VRageMath.Vector3I.Size">
            <summary>
            How many cubes are in block with this size
            </summary>
            <returns></returns>
        </member>
        <member name="T:VRageMath.Vector3I.RangeIterator">
            <summary>
            A class for simpler traversal of ranges of integer vectors
            </summary>
        </member>
        <member name="F:VRageMath.Vector3I.RangeIterator.Current">
            <summary>
            Do not modify, public only for optimization!
            </summary>
        </member>
        <member name="M:VRageMath.Vector3I.RangeIterator.#ctor(VRageMath.Vector3I@,VRageMath.Vector3I@)">
            <summary>
            Note: both start and end are inclusive
            </summary>
        </member>
        <member name="T:VRageMath.Curve">
            <summary>
            Stores an arbitrary collection of 2D CurveKey points, and provides methods for evaluating features of the curve they define.
            </summary>
        </member>
        <member name="M:VRageMath.Curve.Clone">
            <summary>
            Creates a copy of the Curve.
            </summary>
        </member>
        <member name="M:VRageMath.Curve.ComputeTangent(System.Int32,VRageMath.CurveTangent)">
            <summary>
            Computes both the TangentIn and the TangentOut for a CurveKey specified by its index.
            </summary>
            <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Keys collection of the Curve).</param><param name="tangentType">The type of tangents to compute (one of the types specified in the CurveTangent enumeration).</param>
        </member>
        <member name="M:VRageMath.Curve.ComputeTangent(System.Int32,VRageMath.CurveTangent,VRageMath.CurveTangent)">
            <summary>
            Computes a specified type of TangentIn and a specified type of TangentOut for a given CurveKey.
            </summary>
            <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Keys collection of the Curve).</param><param name="tangentInType">The type of TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param><param name="tangentOutType">The type of TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
        </member>
        <member name="M:VRageMath.Curve.ComputeTangents(VRageMath.CurveTangent)">
            <summary>
            Computes all tangents for all CurveKeys in this Curve, using a specified tangent type for both TangentIn and TangentOut.
            </summary>
            <param name="tangentType">The type of TangentOut and TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
        </member>
        <member name="M:VRageMath.Curve.ComputeTangents(VRageMath.CurveTangent,VRageMath.CurveTangent)">
            <summary>
            Computes all tangents for all CurveKeys in this Curve, using different tangent types for TangentOut and TangentIn.
            </summary>
            <param name="tangentInType">The type of TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param><param name="tangentOutType">The type of TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
        </member>
        <member name="M:VRageMath.Curve.Evaluate(System.Single)">
            <summary>
            Finds the value at a position on the Curve.
            </summary>
            <param name="position">The position on the Curve.</param>
        </member>
        <member name="P:VRageMath.Curve.PreLoop">
            <summary>
            Specifies how to handle weighting values that are less than the first control point in the curve.
            </summary>
        </member>
        <member name="P:VRageMath.Curve.PostLoop">
            <summary>
            Specifies how to handle weighting values that are greater than the last control point in the curve.
            </summary>
        </member>
        <member name="P:VRageMath.Curve.Keys">
            <summary>
            The points that make up the curve.
            </summary>
        </member>
        <member name="P:VRageMath.Curve.IsConstant">
            <summary>
            Gets a value indicating whether the curve is constant.
            </summary>
        </member>
        <member name="T:VRageMath.CurveContinuity">
            <summary>
            Defines the continuity of CurveKeys on a Curve.
            </summary>
            <param name="Smooth">Interpolation can be used between this CurveKey and the next.</param><param name="Step">Interpolation cannot be used between this CurveKey and the next. Specifying a position between the two points returns this point.</param>
        </member>
        <member name="T:VRageMath.CurveKey">
            <summary>
            Represents a point in a multi-point curve.
            </summary>
        </member>
        <member name="M:VRageMath.CurveKey.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of CurveKey.
            </summary>
            <param name="position">Position in the curve.</param><param name="value">Value of the control point.</param>
        </member>
        <member name="M:VRageMath.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of CurveKey.
            </summary>
            <param name="position">Position in the curve.</param><param name="value">Value of the control point.</param><param name="tangentIn">Tangent approaching point from the previous point in the curve.</param><param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
        </member>
        <member name="M:VRageMath.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,VRageMath.CurveContinuity)">
            <summary>
            Initializes a new instance of CurveKey.
            </summary>
            <param name="position">Position in the curve.</param><param name="value">Value of the control point.</param><param name="tangentIn">Tangent approaching point from the previous point in the curve.</param><param name="tangentOut">Tangent leaving point toward next point in the curve.</param><param name="continuity">Enum indicating whether the curve is discrete or continuous.</param>
        </member>
        <member name="M:VRageMath.CurveKey.op_Equality(VRageMath.CurveKey,VRageMath.CurveKey)">
            <summary>
            Determines whether two CurveKey instances are equal.
            </summary>
            <param name="a">CurveKey on the left of the equal sign.</param><param name="b">CurveKey on the right of the equal sign.</param>
        </member>
        <member name="M:VRageMath.CurveKey.op_Inequality(VRageMath.CurveKey,VRageMath.CurveKey)">
            <summary>
            Determines whether two CurveKey instances are not equal.
            </summary>
            <param name="a">CurveKey on the left of the equal sign.</param><param name="b">CurveKey on the right of the equal sign.</param>
        </member>
        <member name="M:VRageMath.CurveKey.Clone">
            <summary>
            Creates a copy of the CurveKey.
            </summary>
        </member>
        <member name="M:VRageMath.CurveKey.Equals(VRageMath.CurveKey)">
            <summary>
            Determines whether the specified Object is equal to the CurveKey.
            </summary>
            <param name="other">The Object to compare with the current CurveKey.</param>
        </member>
        <member name="M:VRageMath.CurveKey.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.CurveKey.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.CurveKey.CompareTo(VRageMath.CurveKey)">
            <summary>
            Compares this instance to another CurveKey and returns an indication of their relative values.
            </summary>
            <param name="other">CurveKey to compare to.</param>
        </member>
        <member name="P:VRageMath.CurveKey.Position">
            <summary>
            Position of the CurveKey in the curve.
            </summary>
        </member>
        <member name="P:VRageMath.CurveKey.Value">
            <summary>
            Describes the value of this point.
            </summary>
        </member>
        <member name="P:VRageMath.CurveKey.TangentIn">
            <summary>
            Describes the tangent when approaching this point from the previous point in the curve.
            </summary>
        </member>
        <member name="P:VRageMath.CurveKey.TangentOut">
            <summary>
            Describes the tangent when leaving this point to the next point in the curve.
            </summary>
        </member>
        <member name="P:VRageMath.CurveKey.Continuity">
            <summary>
            Describes whether the segment between this point and the next point in the curve is discrete or continuous.
            </summary>
        </member>
        <member name="T:VRageMath.CurveKeyCollection">
            <summary>
            Contains the CurveKeys making up a Curve.
            </summary>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.IndexOf(VRageMath.CurveKey)">
            <summary>
            Determines the index of a CurveKey in the CurveKeyCollection.
            </summary>
            <param name="item">CurveKey to locate in the CurveKeyCollection.</param>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the CurveKey at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.Add(VRageMath.CurveKey)">
            <summary>
            Adds a CurveKey to the CurveKeyCollection.
            </summary>
            <param name="item">The CurveKey to add.</param>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.Clear">
            <summary>
            Removes all CurveKeys from the CurveKeyCollection.
            </summary>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.Contains(VRageMath.CurveKey)">
            <summary>
            Determines whether the CurveKeyCollection contains a specific CurveKey.
            </summary>
            <param name="item">true if the CurveKey is found in the CurveKeyCollection; false otherwise.</param>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.CopyTo(VRageMath.CurveKey[],System.Int32)">
            <summary>
            Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.
            </summary>
            <param name="array">The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in the array to start copying from.</param>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.Remove(VRageMath.CurveKey)">
            <summary>
            Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.
            </summary>
            <param name="item">The CurveKey to remove from the CurveKeyCollection.</param>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CurveKeyCollection.
            </summary>
        </member>
        <member name="M:VRageMath.CurveKeyCollection.Clone">
            <summary>
            Creates a copy of the CurveKeyCollection.
            </summary>
        </member>
        <member name="P:VRageMath.CurveKeyCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The array index of the element.</param>
        </member>
        <member name="P:VRageMath.CurveKeyCollection.Count">
            <summary>
            Gets the number of elements contained in the CurveKeyCollection.
            </summary>
        </member>
        <member name="P:VRageMath.CurveKeyCollection.IsReadOnly">
            <summary>
            Returns a value indicating whether the CurveKeyCollection is read-only.
            </summary>
        </member>
        <member name="T:VRageMath.CurveLoopType">
            <summary>
            Defines how the value of a Curve will be determined for positions before the first point on the Curve or after the last point on the Curve.
            </summary>
            <param name="Constant">The Curve will evaluate to its first key for positions before the first point in the Curve and to the last key for positions after the last point.</param><param name="Cycle">Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.</param><param name="CycleOffset">Positions specified past the ends of the curve will wrap around to the opposite side of the Curve. The value will be offset by the difference between the values of the first and last CurveKey multiplied by the number of times the position wraps around. If the position is before the first point in the Curve, the difference will be subtracted from its value; otherwise, the difference will be added.</param><param name="Linear">Linear interpolation will be performed to determine the value.</param><param name="Oscillate">Positions specified past the ends of the Curve act as an offset from the same side of the Curve toward the opposite side.</param>
        </member>
        <member name="T:VRageMath.CurveTangent">
            <summary>
            Specifies different tangent types to be calculated for CurveKey points in a Curve.
            </summary>
            <param name="Flat">A Flat tangent always has a value equal to zero.</param><param name="Linear">A Linear tangent at a CurveKey is equal to the difference between its Value and the Value of the preceding or succeeding CurveKey. For example, in Curve MyCurve, where i is greater than zero and (i + 1) is less than the total number of CurveKeys in MyCurve, the linear TangentIn of MyCurve.Keys[i] is equal to: ( MyCurve.Keys[i].Value - MyCurve.Keys[i - 1].Value ) Similarly, the linear TangentOut is equal to: ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i].Value.)</param><param name="Smooth">A Smooth tangent smooths the inflection between a TangentIn and TangentOut by taking into account the values of both neighbors of the CurveKey. The smooth TangentIn of MyCurve.Keys[i] is equal to: ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * ( ( MyCurve.Keys[i].Position - MyCurve.Keys[i - 1].Position ) / ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i-1].Position ) ) ) Similarly, the smooth TangentOut is equal to: ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * ( ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i].Position ) / ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i - 1].Position ) ) )</param>
        </member>
        <member name="T:VRageMath.MathHelper">
            <summary>
            Contains commonly used precalculated values.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.Sqrt2">
            <summary>
            Represents the value of the square root of two
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.Sqrt3">
            <summary>
            Represents the value of the square root of three
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.RadiansPerSecondToRPM">
            <summary>
            60 / 2*pi
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.RPMToRadiansPerSecond">
            <summary>
            2*pi / 60
            </summary>
        </member>
        <member name="F:VRageMath.MathHelper.RPMToRadiansPerMillisec">
            <summary>
            2*pi / 60000
            </summary>
        </member>
        <member name="M:VRageMath.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
        </member>
        <member name="M:VRageMath.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Min(System.Double,System.Double)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Max(System.Double,System.Double)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a value to be within a specified range. Reference page contains links to related code samples.
            </summary>
            <param name="value">The value to clamp.</param><param name="min">The minimum value. If value is less than min, min will be returned.</param><param name="max">The maximum value. If value is greater than max, max will be returned.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range. Reference page contains links to related code samples.
            </summary>
            <param name="value">The value to clamp.</param><param name="min">The minimum value. If value is less than min, min will be returned.</param><param name="max">The maximum value. If value is greater than max, max will be returned.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Clamp(VRage.MyFixedPoint,VRage.MyFixedPoint,VRage.MyFixedPoint)">
            <summary>
            Restricts a value to be within a specified range. Reference page contains links to related code samples.
            </summary>
            <param name="value">The value to clamp.</param><param name="min">The minimum value. If value is less than min, min will be returned.</param><param name="max">The maximum value. If value is greater than max, max will be returned.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range. Reference page contains links to related code samples.
            </summary>
            <param name="value">The value to clamp.</param><param name="min">The minimum value. If value is less than min, min will be returned.</param><param name="max">The maximum value. If value is greater than max, max will be returned.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.MathHelper.InterpLog(System.Single,System.Single,System.Single)">
            <summary>
            Performs interpolation on logarithmic scale.
            </summary>
        </member>
        <member name="M:VRageMath.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param><param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param><param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param><param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param><param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
        </member>
        <member name="M:VRageMath.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param>
        </member>
        <member name="M:VRageMath.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position.</param><param name="tangent1">Source tangent.</param><param name="value2">Source position.</param><param name="tangent2">Source tangent.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
        </member>
        <member name="M:VRageMath.MathHelper.GetNearestBiggerPowerOfTwo(System.Single)">
            <summary>
            Returns nearest bigger power of two
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.MathHelper.IsPowerOfTwo(System.Int32)">
            <summary>
            Returns true if value is power of two
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:VRageMath.Matrix">
            <summary>
            Defines a matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M">
            <summary>
            Matrix values
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:VRageMath.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.GetDirectionVector(VRageMath.Base6Directions.Direction)">
            <summary>
            Gets the base vector of the matrix, corresponding to the given direction
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.SetDirectionVector(VRageMath.Base6Directions.Direction,VRageMath.Vector3)">
            <summary>
            Sets the base vector of the matrix, corresponding to the given direction
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Rescale(VRageMath.Matrix@,System.Single)">
            <summary>
            Same result as Matrix.CreateScale(scale) * matrix, but much faster
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Rescale(VRageMath.Matrix@,VRageMath.Vector3@)">
            <summary>
            Same result as Matrix.CreateScale(scale) * matrix, but much faster
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of Matrix.
            </summary>
            <param name="m11">Value to initialize m11 to.</param><param name="m12">Value to initialize m12 to.</param><param name="m13">Value to initialize m13 to.</param><param name="m14">Value to initialize m14 to.</param><param name="m21">Value to initialize m21 to.</param><param name="m22">Value to initialize m22 to.</param><param name="m23">Value to initialize m23 to.</param><param name="m24">Value to initialize m24 to.</param><param name="m31">Value to initialize m31 to.</param><param name="m32">Value to initialize m32 to.</param><param name="m33">Value to initialize m33 to.</param><param name="m34">Value to initialize m34 to.</param><param name="m41">Value to initialize m41 to.</param><param name="m42">Value to initialize m42 to.</param><param name="m43">Value to initialize m43 to.</param><param name="m44">Value to initialize m44 to.</param>
        </member>
        <member name="M:VRageMath.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of Matrix with rotation data
            </summary>
            <param name="m11">Value to initialize m11 to.</param><param name="m12">Value to initialize m12 to.</param><param name="m13">Value to initialize m13 to.</param><param name="m14">Value to initialize m14 to.</param><param name="m21">Value to initialize m21 to.</param><param name="m22">Value to initialize m22 to.</param><param name="m23">Value to initialize m23 to.</param><param name="m24">Value to initialize m24 to.</param><param name="m31">Value to initialize m31 to.</param><param name="m32">Value to initialize m32 to.</param><param name="m33">Value to initialize m33 to.</param><param name="m34">Value to initialize m34 to.</param><param name="m41">Value to initialize m41 to.</param><param name="m42">Value to initialize m42 to.</param><param name="m43">Value to initialize m43 to.</param><param name="m44">Value to initialize m44 to.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_UnaryNegation(VRageMath.Matrix)">
            <summary>
            Negates individual elements of a matrix.
            </summary>
            <param name="matrix1">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Equality(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Compares a matrix for equality with another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Inequality(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Tests a matrix for inequality with another matrix.
            </summary>
            <param name="matrix1">The matrix on the left of the equal sign.</param><param name="matrix2">The matrix on the right of the equal sign.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Addition(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Subtraction(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Subtracts matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Multiply(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Multiply(VRageMath.Matrix,System.Single)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="matrix">Source matrix.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Multiply(System.Single,VRageMath.Matrix)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Division(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Divides the components of a matrix by the corresponding components of another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">The divisor.</param>
        </member>
        <member name="M:VRageMath.Matrix.op_Division(VRageMath.Matrix,System.Single)">
            <summary>
            Divides the components of a matrix by a scalar.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateBillboard(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.Nullable{VRageMath.Vector3})">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="cameraUpVector">The up vector of the camera.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateBillboard(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,System.Nullable{VRageMath.Vector3},VRageMath.Matrix@)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="cameraUpVector">The up vector of the camera.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param><param name="result">[OutAttribute] The created billboard matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateConstrainedBillboard(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.Nullable{VRageMath.Vector3},System.Nullable{VRageMath.Vector3})">
            <summary>
            Creates a cylindrical billboard that rotates around a specified axis.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="rotateAxis">Axis to rotate the billboard around.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param><param name="objectForwardVector">Optional forward vector of the object.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateConstrainedBillboard(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,System.Nullable{VRageMath.Vector3},System.Nullable{VRageMath.Vector3},VRageMath.Matrix@)">
            <summary>
            Creates a cylindrical billboard that rotates around a specified axis.
            </summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param><param name="cameraPosition">Position of the camera.</param><param name="rotateAxis">Axis to rotate the billboard around.</param><param name="cameraForwardVector">Optional forward vector of the camera.</param><param name="objectForwardVector">Optional forward vector of the object.</param><param name="result">[OutAttribute] The created billboard matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateTranslation(VRageMath.Vector3)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateTranslation(VRageMath.Vector3@,VRageMath.Matrix@)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param><param name="result">[OutAttribute] The created translation Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="xPosition">Value to translate by on the x-axis.</param><param name="yPosition">Value to translate by on the y-axis.</param><param name="zPosition">Value to translate by on the z-axis.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateTranslation(System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Creates a translation Matrix.
            </summary>
            <param name="xPosition">Value to translate by on the x-axis.</param><param name="yPosition">Value to translate by on the y-axis.</param><param name="zPosition">Value to translate by on the z-axis.</param><param name="result">[OutAttribute] The created translation Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="xScale">Value to scale by on the x-axis.</param><param name="yScale">Value to scale by on the y-axis.</param><param name="zScale">Value to scale by on the z-axis.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateScale(System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="xScale">Value to scale by on the x-axis.</param><param name="yScale">Value to scale by on the y-axis.</param><param name="zScale">Value to scale by on the z-axis.</param><param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateScale(VRageMath.Vector3)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateScale(VRageMath.Vector3@,VRageMath.Matrix@)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param><param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateScale(System.Single)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scale">Amount to scale by.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateScale(System.Single,VRageMath.Matrix@)">
            <summary>
            Creates a scaling Matrix.
            </summary>
            <param name="scale">Value to scale by.</param><param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateRotationX(System.Single)">
            <summary>
            Returns a matrix that can be used to rotate a set of vertices around the x-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateRotationX(System.Single,VRageMath.Matrix@)">
            <summary>
            Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param><param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateRotationY(System.Single)">
            <summary>
            Returns a matrix that can be used to rotate a set of vertices around the y-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateRotationY(System.Single,VRageMath.Matrix@)">
            <summary>
            Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param><param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateRotationZ(System.Single)">
            <summary>
            Returns a matrix that can be used to rotate a set of vertices around the z-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateRotationZ(System.Single,VRageMath.Matrix@)">
            <summary>
            Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param><param name="result">[OutAttribute] The rotation matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateFromAxisAngle(VRageMath.Vector3,System.Single)">
            <summary>
            Creates a new Matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param><param name="angle">The angle to rotate around the vector.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateFromAxisAngle(VRageMath.Vector3@,System.Single,VRageMath.Matrix@)">
            <summary>
            Creates a new Matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param><param name="angle">The angle to rotate around the vector.</param><param name="result">[OutAttribute] The created Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a perspective projection matrix based on a field of view and returns by value.
            </summary>
            <param name="fieldOfView">Field of view in the y direction, in radians.</param><param name="aspectRatio">Aspect ratio, defined as view space width divided by height. To match the aspect ratio of the viewport, the property AspectRatio.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Builds a perspective projection matrix based on a field of view and returns by reference.
            </summary>
            <param name="fieldOfView">Field of view in the y direction, in radians.</param><param name="aspectRatio">Aspect ratio, defined as view space width divided by height. To match the aspect ratio of the viewport, the property AspectRatio.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param><param name="result">[OutAttribute] The perspective projection matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a perspective projection matrix and returns the result by value.
            </summary>
            <param name="width">Width of the view volume at the near view plane.</param><param name="height">Height of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Builds a perspective projection matrix and returns the result by reference.
            </summary>
            <param name="width">Width of the view volume at the near view plane.</param><param name="height">Height of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to the far view plane.</param><param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a customized, perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param><param name="right">Maximum x-value of the view volume at the near view plane.</param><param name="bottom">Minimum y-value of the view volume at the near view plane.</param><param name="top">Maximum y-value of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to of the far view plane.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Builds a customized, perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param><param name="right">Maximum x-value of the view volume at the near view plane.</param><param name="bottom">Minimum y-value of the view volume at the near view plane.</param><param name="top">Maximum y-value of the view volume at the near view plane.</param><param name="nearPlaneDistance">Distance to the near view plane.</param><param name="farPlaneDistance">Distance to of the far view plane.</param><param name="result">[OutAttribute] The created projection matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds an orthogonal projection matrix.
            </summary>
            <param name="width">Width of the view volume.</param><param name="height">Height of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Builds an orthogonal projection matrix.
            </summary>
            <param name="width">Width of the view volume.</param><param name="height">Height of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param><param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a customized, orthogonal projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume.</param><param name="right">Maximum x-value of the view volume.</param><param name="bottom">Minimum y-value of the view volume.</param><param name="top">Maximum y-value of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Builds a customized, orthogonal projection matrix.
            </summary>
            <param name="left">Minimum x-value of the view volume.</param><param name="right">Maximum x-value of the view volume.</param><param name="bottom">Minimum y-value of the view volume.</param><param name="top">Maximum y-value of the view volume.</param><param name="zNearPlane">Minimum z-value of the view volume.</param><param name="zFarPlane">Maximum z-value of the view volume.</param><param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateLookAt(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The position of the camera.</param><param name="cameraTarget">The target towards which the camera is pointing.</param><param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateLookAt(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Matrix@)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The position of the camera.</param><param name="cameraTarget">The target towards which the camera is pointing.</param><param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param><param name="result">[OutAttribute] The created view matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateWorld(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">Position of the object. This value is used in translation operations.</param><param name="forward">Forward direction of the object.</param><param name="up">Upward direction of the object; usually [0, 1, 0].</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateWorld(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Matrix@)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">Position of the object. This value is used in translation operations.</param><param name="forward">Forward direction of the object.</param><param name="up">Upward direction of the object; usually [0, 1, 0].</param><param name="result">[OutAttribute] The created world matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateFromQuaternion(VRageMath.Quaternion)">
            <summary>
            Creates a rotation Matrix from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion to create the Matrix from.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateFromQuaternion(VRageMath.Quaternion@,VRageMath.Matrix@)">
            <summary>
            Creates a rotation Matrix from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion to create the Matrix from.</param><param name="result">[OutAttribute] The created Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new rotation matrix from a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param><param name="pitch">Angle of rotation, in radians, around the x-axis.</param><param name="roll">Angle of rotation, in radians, around the z-axis.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,VRageMath.Matrix@)">
            <summary>
            Fills in a rotation matrix from a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param><param name="pitch">Angle of rotation, in radians, around the x-axis.</param><param name="roll">Angle of rotation, in radians, around the z-axis.</param><param name="result">[OutAttribute] An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateShadow(VRageMath.Vector3,VRageMath.Plane)">
            <summary>
            Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.
            </summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param><param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateShadow(VRageMath.Vector3@,VRageMath.Plane@,VRageMath.Matrix@)">
            <summary>
            Fills in a Matrix to flatten geometry into a specified Plane as if casting a shadow from a specified light source.
            </summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param><param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param><param name="result">[OutAttribute] A Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateReflection(VRageMath.Plane)">
            <summary>
            Creates a Matrix that reflects the coordinate system about a specified Plane.
            </summary>
            <param name="value">The Plane about which to create a reflection.</param>
        </member>
        <member name="M:VRageMath.Matrix.CreateReflection(VRageMath.Plane@,VRageMath.Matrix@)">
            <summary>
            Fills in an existing Matrix so that it reflects the coordinate system about a specified Plane.
            </summary>
            <param name="value">The Plane about which to create a reflection.</param><param name="result">[OutAttribute] A Matrix that creates the reflection.</param>
        </member>
        <member name="M:VRageMath.Matrix.Transform(VRageMath.Matrix,VRageMath.Quaternion)">
            <summary>
            Transforms a Matrix by applying a Quaternion rotation.
            </summary>
            <param name="value">The Matrix to transform.</param><param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
        </member>
        <member name="M:VRageMath.Matrix.Transform(VRageMath.Matrix@,VRageMath.Quaternion@,VRageMath.Matrix@)">
            <summary>
            Transforms a Matrix by applying a Quaternion rotation.
            </summary>
            <param name="value">The Matrix to transform.</param><param name="rotation">The rotation to apply, expressed as a Quaternion.</param><param name="result">[OutAttribute] An existing Matrix filled in with the result of the transform.</param>
        </member>
        <member name="M:VRageMath.Matrix.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Equals(VRageMath.Matrix)">
            <summary>
            Determines whether the specified Object is equal to the Matrix.
            </summary>
            <param name="other">The Object to compare with the current Matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.EqualsFast(VRageMath.Matrix@,System.Single)">
            <summary>
            Compares just position, forward and up
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.Matrix.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Transpose(VRageMath.Matrix)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Transpose(VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param><param name="result">[OutAttribute] Transposed matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.TransposeRotationInPlace">
            <summary>
            Transposes the rows and columns of a matrix that is assumed to be rotation only in place.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Invert(VRageMath.Matrix)">
            <summary>
            Calculates the inverse of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Invert(VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Calculates the inverse of a matrix.
            </summary>
            <param name="matrix">The source matrix.</param><param name="result">[OutAttribute] The inverse of matrix. The same matrix can be used for both arguments.</param>
        </member>
        <member name="M:VRageMath.Matrix.Lerp(VRageMath.Matrix,VRageMath.Matrix,System.Single)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="amount">Interpolation value.</param>
        </member>
        <member name="M:VRageMath.Matrix.Lerp(VRageMath.Matrix@,VRageMath.Matrix@,System.Single,VRageMath.Matrix@)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="amount">Interpolation value.</param><param name="result">[OutAttribute] Resulting matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Slerp(VRageMath.Matrix@,VRageMath.Matrix@,System.Single,VRageMath.Matrix@)">
            <summary>
            Performs spherical linear interpolation of position and rotation.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.SlerpScale(VRageMath.Matrix@,VRageMath.Matrix@,System.Single,VRageMath.Matrix@)">
            <summary>
            Performs spherical linear interpolation of position and rotation and scale.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Slerp(VRageMath.Matrix,VRageMath.Matrix,System.Single,VRageMath.Matrix@)">
            <summary>
            Performs spherical linear interpolation of position and rotation.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Slerp(VRageMath.Matrix,VRageMath.Matrix,System.Single)">
            <summary>
            Performs spherical linear interpolation of position and rotation.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.SlerpScale(VRageMath.Matrix,VRageMath.Matrix,System.Single,VRageMath.Matrix@)">
            <summary>
            Performs spherical linear interpolation of position and rotation and scale.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.SlerpScale(VRageMath.Matrix,VRageMath.Matrix,System.Single)">
            <summary>
            Performs spherical linear interpolation of position and rotation and scale.
            </summary>
        </member>
        <member name="M:VRageMath.Matrix.Negate(VRageMath.Matrix)">
            <summary>
            Negates individual elements of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Negate(VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Negates individual elements of a matrix.
            </summary>
            <param name="matrix">Source matrix.</param><param name="result">[OutAttribute] Negated matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Add(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Add(VRageMath.Matrix@,VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Resulting matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Subtract(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Subtracts matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.Subtract(VRageMath.Matrix@,VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Subtracts matrices.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Matrix.Multiply(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:VRageMath.Matrix.D3DXMatrixMultiply_(VRageMath.Matrix*,VRageMath.Matrix*,VRageMath.Matrix*)">
            <summary>Native Interop Function</summary>
        </member>
        <member name="M:VRageMath.Matrix.Multiply(VRageMath.Matrix@,VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">Source matrix.</param><param name="result">[OutAttribute] Result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Matrix.Multiply(VRageMath.Matrix,System.Single)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Matrix.Multiply(VRageMath.Matrix@,System.Single,VRageMath.Matrix@)">
            <summary>
            Multiplies a matrix by a scalar value.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Matrix.Divide(VRageMath.Matrix,VRageMath.Matrix)">
            <summary>
            Divides the components of a matrix by the corresponding components of another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">The divisor.</param>
        </member>
        <member name="M:VRageMath.Matrix.Divide(VRageMath.Matrix@,VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Divides the components of a matrix by the corresponding components of another matrix.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="matrix2">The divisor.</param><param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:VRageMath.Matrix.Divide(VRageMath.Matrix,System.Single)">
            <summary>
            Divides the components of a matrix by a scalar.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Matrix.Divide(VRageMath.Matrix@,System.Single,VRageMath.Matrix@)">
            <summary>
            Divides the components of a matrix by a scalar.
            </summary>
            <param name="matrix1">Source matrix.</param><param name="divider">The divisor.</param><param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:VRageMath.Matrix.GetOrientation">
            <summary>
            Gets the orientation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRageMath.Matrix.HasNoTranslationOrPerspective">
            <summary>
            Returns true if this matrix represents invertible (you can call Invert on it) linear (it does not contain translation or perspective transformation) transformation.
            Such matrix consist solely of rotations, shearing, mirroring and scaling. It can be orthogonalized to create an orthogonal rotation matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Up">
            <summary>
            Gets and sets the up vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Down">
            <summary>
            Gets and sets the down vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Right">
            <summary>
            Gets and sets the right vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Left">
            <summary>
            Gets and sets the left vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Forward">
            <summary>
            Gets and sets the forward vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Backward">
            <summary>
            Gets and sets the backward vector of the Matrix.
            </summary>
        </member>
        <member name="P:VRageMath.Matrix.Translation">
            <summary>
            Gets and sets the translation vector of the Matrix.
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.Byte4">
            <summary>
            Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Byte4 class.
            </summary>
            <param name="x">Initial value for the x component.</param><param name="y">Initial value for the y component.</param><param name="z">Initial value for the z component.</param><param name="w">Initial value for the w component.</param>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.#ctor(VRageMath.Vector4)">
            <summary>
            Initializes a new instance of the Byte4 structure.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.op_Equality(VRageMath.PackedVector.Byte4,VRageMath.PackedVector.Byte4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.op_Inequality(VRageMath.PackedVector.Byte4,VRageMath.PackedVector.Byte4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.PackedVector.Byte4.Equals(VRageMath.PackedVector.Byte4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
        </member>
        <member name="P:VRageMath.PackedVector.Byte4.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.HalfVector2">
            <summary>
            Packed vector type containing two 16-bit floating-point values.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the HalfVector2 structure.
            </summary>
            <param name="x">Initial value for the x component.</param><param name="y">Initial value for the y component.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.#ctor(VRageMath.Vector2)">
            <summary>
            Initializes a new instance of the HalfVector2 structure.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the HalfVector2 structure.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.op_Equality(VRageMath.PackedVector.HalfVector2,VRageMath.PackedVector.HalfVector2)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.op_Inequality(VRageMath.PackedVector.HalfVector2,VRageMath.PackedVector.HalfVector2)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.ToVector2">
            <summary>
            Expands the HalfVector2 to a Vector2.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector2.Equals(VRageMath.PackedVector.HalfVector2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
        </member>
        <member name="P:VRageMath.PackedVector.HalfVector2.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.HalfVector4">
            <summary>
            Packed vector type containing four 16-bit floating-point values.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the HalfVector4 class.
            </summary>
            <param name="x">Initial value for the x component.</param><param name="y">Initial value for the y component.</param><param name="z">Initial value for the z component.</param><param name="w">Initial value for the w component.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.#ctor(VRageMath.Vector4)">
            <summary>
            Initializes a new instance of the HalfVector4 structure.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.op_Equality(VRageMath.PackedVector.HalfVector4,VRageMath.PackedVector.HalfVector4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.op_Inequality(VRageMath.PackedVector.HalfVector4,VRageMath.PackedVector.HalfVector4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.PackedVector.HalfVector4.Equals(VRageMath.PackedVector.HalfVector4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
        </member>
        <member name="P:VRageMath.PackedVector.HalfVector4.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
        </member>
        <member name="T:VRageMath.PackedVector.NormalizedByte4">
            <summary>
            Packed vector type containing four 8-bit signed normalized values, ranging from −1 to 1.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the NormalizedByte4 class.
            </summary>
            <param name="x">Initial value for the x component.</param><param name="y">Initial value for the y component.</param><param name="z">Initial value for the z component.</param><param name="w">Initial value for the w component.</param>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.#ctor(VRageMath.Vector4)">
            <summary>
            Initializes a new instance of the NormalizedByte4 structure.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the NormalizedByte4 structure.</param>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.op_Equality(VRageMath.PackedVector.NormalizedByte4,VRageMath.PackedVector.NormalizedByte4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.op_Inequality(VRageMath.PackedVector.NormalizedByte4,VRageMath.PackedVector.NormalizedByte4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.PackedVector.NormalizedByte4.Equals(VRageMath.PackedVector.NormalizedByte4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
        </member>
        <member name="P:VRageMath.PackedVector.NormalizedByte4.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
        </member>
        <member name="T:VRageMath.Plane">
            <summary>
            Defines a plane.
            </summary>
        </member>
        <member name="F:VRageMath.Plane.Normal">
            <summary>
            The normal vector of the Plane.
            </summary>
        </member>
        <member name="F:VRageMath.Plane.D">
            <summary>
            The distance of the Plane along its normal from the origin.
            Note: Be careful! The distance is signed and is the opposite of what people usually expect.
                  If you look closely at the plane equation: (n dot P) - D = 0, you'll realize that D = - (n dot P) (that is, negative instead of positive)
            </summary>
        </member>
        <member name="M:VRageMath.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="a">X component of the normal defining the Plane.</param><param name="b">Y component of the normal defining the Plane.</param><param name="c">Z component of the normal defining the Plane.</param><param name="d">Distance of the origin from the plane along its normal.</param>
        </member>
        <member name="M:VRageMath.Plane.#ctor(VRageMath.Vector3,System.Single)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="normal">The normal vector to the Plane.</param><param name="d">Distance of the origin from the plane along its normal.</param>
        </member>
        <member name="M:VRageMath.Plane.#ctor(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="position">A point that lies on the Plane</param><param name="normal">The normal vector to the Plane.</param>
        </member>
        <member name="M:VRageMath.Plane.#ctor(VRageMath.Vector4)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="value">Vector4 with X, Y, and Z components defining the normal of the Plane. The W component defines the distance of the origin from the plane along its normal.</param>
        </member>
        <member name="M:VRageMath.Plane.#ctor(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Creates a new instance of Plane.
            </summary>
            <param name="point1">One point of a triangle defining the Plane.</param><param name="point2">One point of a triangle defining the Plane.</param><param name="point3">One point of a triangle defining the Plane.</param>
        </member>
        <member name="M:VRageMath.Plane.op_Equality(VRageMath.Plane,VRageMath.Plane)">
            <summary>
            Determines whether two instances of Plane are equal.
            </summary>
            <param name="lhs">The object to the left of the equality operator.</param><param name="rhs">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.Plane.op_Inequality(VRageMath.Plane,VRageMath.Plane)">
            <summary>
            Determines whether two instances of Plane are not equal.
            </summary>
            <param name="lhs">The object to the left of the inequality operator.</param><param name="rhs">The object to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.Plane.Equals(VRageMath.Plane)">
            <summary>
            Determines whether the specified Plane is equal to the Plane.
            </summary>
            <param name="other">The Plane to compare with the current Plane.</param>
        </member>
        <member name="M:VRageMath.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the Plane.
            </summary>
            <param name="obj">The Object to compare with the current Plane.</param>
        </member>
        <member name="M:VRageMath.Plane.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:VRageMath.Plane.ToString">
            <summary>
            Returns a String that represents the current Plane.
            </summary>
        </member>
        <member name="M:VRageMath.Plane.Normalize">
            <summary>
            Changes the coefficients of the Normal vector of this Plane to make it of unit length.
            </summary>
        </member>
        <member name="M:VRageMath.Plane.Normalize(VRageMath.Plane)">
            <summary>
            Changes the coefficients of the Normal vector of a Plane to make it of unit length.
            </summary>
            <param name="value">The Plane to normalize.</param>
        </member>
        <member name="M:VRageMath.Plane.Normalize(VRageMath.Plane@,VRageMath.Plane@)">
            <summary>
            Changes the coefficients of the Normal vector of a Plane to make it of unit length.
            </summary>
            <param name="value">The Plane to normalize.</param><param name="result">[OutAttribute] An existing plane Plane filled in with a normalized version of the specified plane.</param>
        </member>
        <member name="M:VRageMath.Plane.Transform(VRageMath.Plane,VRageMath.Matrix)">
            <summary>
            Transforms a normalized Plane by a Matrix.
            </summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param><param name="matrix">The transform Matrix to apply to the Plane.</param>
        </member>
        <member name="M:VRageMath.Plane.Transform(VRageMath.Plane@,VRageMath.Matrix@,VRageMath.Plane@)">
            <summary>
            Transforms a normalized Plane by a Matrix.
            </summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param><param name="matrix">The transform Matrix to apply to the Plane.</param><param name="result">[OutAttribute] An existing Plane filled in with the results of applying the transform.</param>
        </member>
        <member name="M:VRageMath.Plane.Dot(VRageMath.Vector4)">
            <summary>
            Calculates the dot product of a specified Vector4 and this Plane.
            </summary>
            <param name="value">The Vector4 to multiply this Plane by.</param>
        </member>
        <member name="M:VRageMath.Plane.Dot(VRageMath.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of a specified Vector4 and this Plane.
            </summary>
            <param name="value">The Vector4 to multiply this Plane by.</param><param name="result">[OutAttribute] The dot product of the specified Vector4 and this Plane.</param>
        </member>
        <member name="M:VRageMath.Plane.DotCoordinate(VRageMath.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param>
        </member>
        <member name="M:VRageMath.Plane.DotCoordinate(VRageMath.Vector3@,System.Single@)">
            <summary>
            Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param><param name="result">[OutAttribute] The resulting value.</param>
        </member>
        <member name="M:VRageMath.Plane.DotNormal(VRageMath.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the Normal vector of this Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param>
        </member>
        <member name="M:VRageMath.Plane.DotNormal(VRageMath.Vector3@,System.Single@)">
            <summary>
            Returns the dot product of a specified Vector3 and the Normal vector of this Plane.
            </summary>
            <param name="value">The Vector3 to multiply by.</param><param name="result">[OutAttribute] The resulting dot product.</param>
        </member>
        <member name="M:VRageMath.Plane.Intersects(VRageMath.BoundingBox)">
            <summary>
            Checks whether the current Plane intersects a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to test for intersection with.</param>
        </member>
        <member name="M:VRageMath.Plane.Intersects(VRageMath.BoundingBox@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current Plane intersects a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingBox.</param>
        </member>
        <member name="M:VRageMath.Plane.Intersects(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the current Plane intersects a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.Plane.Intersects(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the current Plane intersects a specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
        </member>
        <member name="M:VRageMath.Plane.Intersects(VRageMath.BoundingSphere@,VRageMath.PlaneIntersectionType@)">
            <summary>
            Checks whether the current Plane intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingSphere.</param>
        </member>
        <member name="T:VRageMath.PlaneIntersectionType">
            <summary>
            Describes the intersection between a plane and a bounding volume.
            </summary>
            <param name="Back">There is no intersection, and the bounding volume is in the negative half-space of the Plane.</param><param name="Front">There is no intersection, and the bounding volume is in the positive half-space of the Plane.</param><param name="Intersecting">The Plane is intersected.</param>
        </member>
        <member name="T:VRageMath.Point">
            <summary>
            Defines a point in 2D space.
            </summary>
        </member>
        <member name="F:VRageMath.Point.X">
            <summary>
            Specifies the x-coordinate of the Point.
            </summary>
        </member>
        <member name="F:VRageMath.Point.Y">
            <summary>
            Specifies the y-coordinate of the Point.
            </summary>
        </member>
        <member name="M:VRageMath.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of Point.
            </summary>
            <param name="x">The x-coordinate of the Point.</param><param name="y">The y-coordinate of the Point.</param>
        </member>
        <member name="M:VRageMath.Point.op_Equality(VRageMath.Point,VRageMath.Point)">
            <summary>
            Determines whether two Point instances are equal.
            </summary>
            <param name="a">Point on the left side of the equal sign.</param><param name="b">Point on the right side of the equal sign.</param>
        </member>
        <member name="M:VRageMath.Point.op_Inequality(VRageMath.Point,VRageMath.Point)">
            <summary>
            Determines whether two Point instances are not equal.
            </summary>
            <param name="a">The Point on the left side of the equal sign.</param><param name="b">The Point on the right side of the equal sign.</param>
        </member>
        <member name="M:VRageMath.Point.Equals(VRageMath.Point)">
            <summary>
            Determines whether two Point instances are equal.
            </summary>
            <param name="other">The Point to compare this instance to.</param>
        </member>
        <member name="M:VRageMath.Point.Equals(System.Object)">
            <summary>
            Determines whether two Point instances are equal.
            </summary>
            <param name="obj">The object to compare this instance to.</param>
        </member>
        <member name="M:VRageMath.Point.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:VRageMath.Point.ToString">
            <summary>
            Returns a String that represents the current Point.
            </summary>
        </member>
        <member name="P:VRageMath.Point.Zero">
            <summary>
            Returns the point (0,0).
            </summary>
        </member>
        <member name="T:VRageMath.Quaternion">
            <summary>
            Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2).
            </summary>
        </member>
        <member name="F:VRageMath.Quaternion.X">
            <summary>
            Specifies the x-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:VRageMath.Quaternion.Y">
            <summary>
            Specifies the y-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:VRageMath.Quaternion.Z">
            <summary>
            Specifies the z-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:VRageMath.Quaternion.W">
            <summary>
            Specifies the rotation component of the quaternion.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of Quaternion.
            </summary>
            <param name="x">The x-value of the quaternion.</param><param name="y">The y-value of the quaternion.</param><param name="z">The z-value of the quaternion.</param><param name="w">The w-value of the quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.#ctor(VRageMath.Vector3,System.Single)">
            <summary>
            Initializes a new instance of Quaternion.
            </summary>
            <param name="vectorPart">The vector component of the quaternion.</param><param name="scalarPart">The rotation component of the quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_UnaryNegation(VRageMath.Quaternion)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Equality(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Compares two Quaternions for equality.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">Source Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Inequality(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Compare two Quaternions for inequality.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">Source Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Addition(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Adds two Quaternions.
            </summary>
            <param name="quaternion1">Quaternion to add.</param><param name="quaternion2">Quaternion to add.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Subtraction(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Subtracts a quaternion from another quaternion.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Multiply(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Multiply(VRageMath.Quaternion,System.Single)">
            <summary>
            Multiplies a quaternion by a scalar value.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Quaternion.op_Division(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">The divisor.</param>
        </member>
        <member name="M:VRageMath.Quaternion.ToString">
            <summary>
            Retireves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.Equals(VRageMath.Quaternion)">
            <summary>
            Determines whether the specified Object is equal to the Quaternion.
            </summary>
            <param name="other">The Quaternion to compare with the current Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:VRageMath.Quaternion.GetHashCode">
            <summary>
            Get the hash code of this object.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.LengthSquared">
            <summary>
            Calculates the length squared of a Quaternion.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.Length">
            <summary>
            Calculates the length of a Quaternion.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.Normalize">
            <summary>
            Divides each component of the quaternion by the length of the quaternion.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.Normalize(VRageMath.Quaternion)">
            <summary>
            Divides each component of the quaternion by the length of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Normalize(VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Divides each component of the quaternion by the length of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param><param name="result">[OutAttribute] Normalized quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Conjugate">
            <summary>
            Transforms this Quaternion into its conjugate.
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.Conjugate(VRageMath.Quaternion)">
            <summary>
            Returns the conjugate of a specified Quaternion.
            </summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Conjugate(VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Returns the conjugate of a specified Quaternion.
            </summary>
            <param name="value">The Quaternion of which to return the conjugate.</param><param name="result">[OutAttribute] An existing Quaternion filled in to be the conjugate of the specified one.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Inverse(VRageMath.Quaternion)">
            <summary>
            Returns the inverse of a Quaternion.
            </summary>
            <param name="quaternion">Source Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Inverse(VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Returns the inverse of a Quaternion.
            </summary>
            <param name="quaternion">Source Quaternion.</param><param name="result">[OutAttribute] The inverse of the Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromAxisAngle(VRageMath.Vector3,System.Single)">
            <summary>
            Creates a Quaternion from a vector and an angle to rotate about the vector.
            </summary>
            <param name="axis">The vector to rotate around.</param><param name="angle">The angle to rotate around the vector.</param>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromAxisAngle(VRageMath.Vector3@,System.Single,VRageMath.Quaternion@)">
            <summary>
            Creates a Quaternion from a vector and an angle to rotate about the vector.
            </summary>
            <param name="axis">The vector to rotate around.</param><param name="angle">The angle to rotate around the vector.</param><param name="result">[OutAttribute] The created Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Quaternion from specified yaw, pitch, and roll angles.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param><param name="pitch">The pitch angle, in radians, around the x-axis.</param><param name="roll">The roll angle, in radians, around the z-axis.</param>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,VRageMath.Quaternion@)">
            <summary>
            Creates a new Quaternion from specified yaw, pitch, and roll angles.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param><param name="pitch">The pitch angle, in radians, around the x-axis.</param><param name="roll">The roll angle, in radians, around the z-axis.</param><param name="result">[OutAttribute] An existing Quaternion filled in to express the specified yaw, pitch, and roll angles.</param>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromForwardUp(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Works for normalized vectors only
            </summary>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromRotationMatrix(VRageMath.Matrix)">
            <summary>
            Creates a Quaternion from a rotation Matrix.
            </summary>
            <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
        </member>
        <member name="M:VRageMath.Quaternion.CreateFromRotationMatrix(VRageMath.Matrix@,VRageMath.Quaternion@)">
            <summary>
            Creates a Quaternion from a rotation Matrix.
            </summary>
            <param name="matrix">The rotation Matrix to create the Quaternion from.</param><param name="result">[OutAttribute] The created Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Dot(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Calculates the dot product of two Quaternions.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">Source Quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Dot(VRageMath.Quaternion@,VRageMath.Quaternion@,System.Single@)">
            <summary>
            Calculates the dot product of two Quaternions.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">Source Quaternion.</param><param name="result">[OutAttribute] Dot product of the Quaternions.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Slerp(VRageMath.Quaternion,VRageMath.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Slerp(VRageMath.Quaternion@,VRageMath.Quaternion@,System.Single,VRageMath.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value that indicates how far to interpolate between the quaternions.</param><param name="result">[OutAttribute] Result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Lerp(VRageMath.Quaternion,VRageMath.Quaternion,System.Single)">
            <summary>
            Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value indicating how far to interpolate between the quaternions.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Lerp(VRageMath.Quaternion@,VRageMath.Quaternion@,System.Single,VRageMath.Quaternion@)">
            <summary>
            Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="amount">Value indicating how far to interpolate between the quaternions.</param><param name="result">[OutAttribute] The resulting quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Concatenate(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first Quaternion rotation in the series.</param><param name="value2">The second Quaternion rotation in the series.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Concatenate(VRageMath.Quaternion@,VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first Quaternion rotation in the series.</param><param name="value2">The second Quaternion rotation in the series.</param><param name="result">[OutAttribute] The Quaternion rotation representing the concatenation of value1 followed by value2.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Negate(VRageMath.Quaternion)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Negate(VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="quaternion">Source quaternion.</param><param name="result">[OutAttribute] Negated quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Add(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Adds two Quaternions.
            </summary>
            <param name="quaternion1">Quaternion to add.</param><param name="quaternion2">Quaternion to add.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Add(VRageMath.Quaternion@,VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Adds two Quaternions.
            </summary>
            <param name="quaternion1">Quaternion to add.</param><param name="quaternion2">Quaternion to add.</param><param name="result">[OutAttribute] Result of adding the Quaternions.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Subtract(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Subtracts a quaternion from another quaternion.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Subtract(VRageMath.Quaternion@,VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Subtracts a quaternion from another quaternion.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="quaternion2">Source quaternion.</param><param name="result">[OutAttribute] Result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Multiply(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">The quaternion on the left of the multiplication.</param><param name="quaternion2">The quaternion on the right of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Multiply(VRageMath.Quaternion@,VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">The quaternion on the left of the multiplication.</param><param name="quaternion2">The quaternion on the right of the multiplication.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Multiply(VRageMath.Quaternion,System.Single)">
            <summary>
            Multiplies a quaternion by a scalar value.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Multiply(VRageMath.Quaternion@,System.Single,VRageMath.Quaternion@)">
            <summary>
            Multiplies a quaternion by a scalar value.
            </summary>
            <param name="quaternion1">Source quaternion.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Divide(VRageMath.Quaternion,VRageMath.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">The divisor.</param>
        </member>
        <member name="M:VRageMath.Quaternion.Divide(VRageMath.Quaternion@,VRageMath.Quaternion@,VRageMath.Quaternion@)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="quaternion1">Source Quaternion.</param><param name="quaternion2">The divisor.</param><param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="T:VRageMath.Ray">
            <summary>
            Defines a ray.
            </summary>
        </member>
        <member name="F:VRageMath.Ray.Position">
            <summary>
            Specifies the starting point of the Ray.
            </summary>
        </member>
        <member name="F:VRageMath.Ray.Direction">
            <summary>
            Unit vector specifying the direction the Ray is pointing.
            </summary>
        </member>
        <member name="M:VRageMath.Ray.#ctor(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Creates a new instance of Ray.
            </summary>
            <param name="position">The starting point of the Ray.</param><param name="direction">Unit vector describing the direction of the Ray.</param>
        </member>
        <member name="M:VRageMath.Ray.op_Equality(VRageMath.Ray,VRageMath.Ray)">
            <summary>
            Determines whether two instances of Ray are equal.
            </summary>
            <param name="a">The object to the left of the equality operator.</param><param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:VRageMath.Ray.op_Inequality(VRageMath.Ray,VRageMath.Ray)">
            <summary>
            Determines whether two instances of Ray are not equal.
            </summary>
            <param name="a">The object to the left of the inequality operator.</param><param name="b">The object to the right of the inequality operator.</param>
        </member>
        <member name="M:VRageMath.Ray.Equals(VRageMath.Ray)">
            <summary>
            Determines whether the specified Ray is equal to the current Ray.
            </summary>
            <param name="other">The Ray to compare with the current Ray.</param>
        </member>
        <member name="M:VRageMath.Ray.Equals(System.Object)">
            <summary>
            Determines whether two instances of Ray are equal.
            </summary>
            <param name="obj">The Object to compare with the current Ray.</param>
        </member>
        <member name="M:VRageMath.Ray.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
        </member>
        <member name="M:VRageMath.Ray.ToString">
            <summary>
            Returns a String that represents the current Ray.
            </summary>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.BoundingBox)">
            <summary>
            Checks whether the Ray intersects a specified BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with the Ray.</param>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.BoundingBox@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current Ray intersects a BoundingBox.
            </summary>
            <param name="box">The BoundingBox to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.BoundingFrustum)">
            <summary>
            Checks whether the Ray intersects a specified BoundingFrustum.
            </summary>
            <param name="frustum">The BoundingFrustum to check for intersection with the Ray.</param>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.Plane)">
            <summary>
            Determines whether this Ray intersects a specified Plane.
            </summary>
            <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.Plane@,System.Nullable{System.Single}@)">
            <summary>
            Determines whether this Ray intersects a specified Plane.
            </summary>
            <param name="plane">The Plane with which to calculate this Ray's intersection.</param><param name="result">[OutAttribute] The distance at which this Ray intersects the specified Plane, or null if there is no intersection.</param>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.BoundingSphere)">
            <summary>
            Checks whether the Ray intersects a specified BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
        </member>
        <member name="M:VRageMath.Ray.Intersects(VRageMath.BoundingSphere@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current Ray intersects a BoundingSphere.
            </summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param><param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
        </member>
        <member name="T:VRageMath.Rectangle">
            <summary>
            Defines a rectangle.
            </summary>
        </member>
        <member name="F:VRageMath.Rectangle.X">
            <summary>
            Specifies the x-coordinate of the rectangle.
            </summary>
        </member>
        <member name="F:VRageMath.Rectangle.Y">
            <summary>
            Specifies the y-coordinate of the rectangle.
            </summary>
        </member>
        <member name="F:VRageMath.Rectangle.Width">
            <summary>
            Specifies the width of the rectangle.
            </summary>
        </member>
        <member name="F:VRageMath.Rectangle.Height">
            <summary>
            Specifies the height of the rectangle.
            </summary>
        </member>
        <member name="M:VRageMath.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of Rectangle.
            </summary>
            <param name="x">The x-coordinate of the rectangle.</param><param name="y">The y-coordinate of the rectangle.</param><param name="width">Width of the rectangle.</param><param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:VRageMath.Rectangle.op_Equality(VRageMath.Rectangle,VRageMath.Rectangle)">
            <summary>
            Compares two rectangles for equality.
            </summary>
            <param name="a">Source rectangle.</param><param name="b">Source rectangle.</param>
        </member>
        <member name="M:VRageMath.Rectangle.op_Inequality(VRageMath.Rectangle,VRageMath.Rectangle)">
            <summary>
            Compares two rectangles for inequality.
            </summary>
            <param name="a">Source rectangle.</param><param name="b">Source rectangle.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Offset(VRageMath.Point)">
            <summary>
            Changes the position of the Rectangle.
            </summary>
            <param name="amount">The values to adjust the position of the Rectangle by.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Changes the position of the Rectangle.
            </summary>
            <param name="offsetX">Change in the x-position.</param><param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Pushes the edges of the Rectangle out by the horizontal and vertical values specified.
            </summary>
            <param name="horizontalAmount">Value to push the sides out by.</param><param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.
            </summary>
            <param name="x">The x-coordinate of the specified point.</param><param name="y">The y-coordinate of the specified point.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Contains(VRageMath.Point)">
            <summary>
            Determines whether this Rectangle contains a specified Point.
            </summary>
            <param name="value">The Point to evaluate.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Contains(VRageMath.Point@,System.Boolean@)">
            <summary>
            Determines whether this Rectangle contains a specified Point.
            </summary>
            <param name="value">The Point to evaluate.</param><param name="result">[OutAttribute] true if the specified Point is contained within this Rectangle; false otherwise.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Contains(VRageMath.Rectangle)">
            <summary>
            Determines whether this Rectangle entirely contains a specified Rectangle.
            </summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Contains(VRageMath.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether this Rectangle entirely contains a specified Rectangle.
            </summary>
            <param name="value">The Rectangle to evaluate.</param><param name="result">[OutAttribute] On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Intersects(VRageMath.Rectangle)">
            <summary>
            Determines whether a specified Rectangle intersects with this Rectangle.
            </summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Intersects(VRageMath.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether a specified Rectangle intersects with this Rectangle.
            </summary>
            <param name="value">The Rectangle to evaluate</param><param name="result">[OutAttribute] true if the specified Rectangle intersects with this one; false otherwise.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Intersect(VRageMath.Rectangle,VRageMath.Rectangle)">
            <summary>
            Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first Rectangle to compare.</param><param name="value2">The second Rectangle to compare.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Intersect(VRageMath.Rectangle@,VRageMath.Rectangle@,VRageMath.Rectangle@)">
            <summary>
            Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first Rectangle to compare.</param><param name="value2">The second Rectangle to compare.</param><param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Union(VRageMath.Rectangle,VRageMath.Rectangle)">
            <summary>
            Creates a new Rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first Rectangle to contain.</param><param name="value2">The second Rectangle to contain.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Union(VRageMath.Rectangle@,VRageMath.Rectangle@,VRageMath.Rectangle@)">
            <summary>
            Creates a new Rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first Rectangle to contain.</param><param name="value2">The second Rectangle to contain.</param><param name="result">[OutAttribute] The Rectangle that must be the union of the first two rectangles.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Equals(VRageMath.Rectangle)">
            <summary>
            Determines whether the specified Object is equal to the Rectangle.
            </summary>
            <param name="other">The Object to compare with the current Rectangle.</param>
        </member>
        <member name="M:VRageMath.Rectangle.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:VRageMath.Rectangle.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Rectangle.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="P:VRageMath.Rectangle.Left">
            <summary>
            Returns the x-coordinate of the left side of the rectangle.
            </summary>
        </member>
        <member name="P:VRageMath.Rectangle.Right">
            <summary>
            Returns the x-coordinate of the right side of the rectangle.
            </summary>
        </member>
        <member name="P:VRageMath.Rectangle.Top">
            <summary>
            Returns the y-coordinate of the top of the rectangle.
            </summary>
        </member>
        <member name="P:VRageMath.Rectangle.Bottom">
            <summary>
            Returns the y-coordinate of the bottom of the rectangle.
            </summary>
        </member>
        <member name="P:VRageMath.Rectangle.Location">
            <summary>
            Gets or sets the upper-left value of the Rectangle.
            </summary>
        </member>
        <member name="P:VRageMath.Rectangle.Center">
            <summary>
            Gets the Point that specifies the center of the rectangle.
            </summary>
        </member>
        <member name="T:VRageMath.RectangleF">
            <summary>
            Structure using the same layout than <see cref="T:System.Drawing.RectangleF"/>
            </summary>
        </member>
        <member name="M:VRageMath.RectangleF.#ctor(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:VRageMath.RectangleF"/> struct.
            </summary>
            <param name="position">The x-y position of this rectangle.</param>
            <param name="size">The x-y size of this rectangle.</param>
        </member>
        <member name="M:VRageMath.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:VRageMath.RectangleF"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="F:VRageMath.RectangleF.Position">
            <summary>
            The Position.
            </summary>
        </member>
        <member name="F:VRageMath.RectangleF.Size">
            <summary>
            The Size.
            </summary>
        </member>
        <member name="M:VRageMath.RectangleF.Equals(VRageMath.RectangleF)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VRageMath.RectangleF.Intersect(VRageMath.RectangleF@,VRageMath.RectangleF@,VRageMath.RectangleF@)">
            <summary>
            Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:VRageMath.RectangleF.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VRageMath.RectangleF.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:VRageMath.RectangleF.op_Equality(VRageMath.RectangleF,VRageMath.RectangleF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VRageMath.RectangleF.op_Inequality(VRageMath.RectangleF,VRageMath.RectangleF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:VRageMath.RectangleF.X">
            <summary>
            Left coordinate.
            </summary>
        </member>
        <member name="P:VRageMath.RectangleF.Y">
            <summary>
            Top coordinate.
            </summary>
        </member>
        <member name="P:VRageMath.RectangleF.Width">
            <summary>
            Width of this rectangle.
            </summary>
        </member>
        <member name="P:VRageMath.RectangleF.Height">
            <summary>
            Height of this rectangle.
            </summary>
        </member>
        <member name="T:VRageMath.MyDynamicAABBTree">
            <summary>
            Dynamic aabb tree implementation as a prunning structure
            </summary>
        </member>
        <member name="F:VRageMath.MyDynamicAABBTree.NullNode">
            <summary>
            A dynamic tree arranges data in a binary tree to accelerate
            queries such as volume queries and ray casts. Leafs are proxies
            with an BoundingBox. In the tree we expand the proxy BoundingBox by Settings.b2_fatAABBFactor
            so that the proxy BoundingBox is bigger than the client object. This allows the client
            object to move by small amounts without triggering a tree update.
            Nodes are pooled and relocatable, so we use node indices rather than pointers.
            </summary>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.#ctor(VRageMath.Vector3,System.Single)">
            constructing the tree initializes the node pool.
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.AddProxy(VRageMath.BoundingBox@,System.Object,System.UInt32,System.Boolean)">
            <summary>
            Create a proxy. Provide a tight fitting BoundingBox and a userData pointer.
            </summary>
            <param name="aabb">The aabb.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.RemoveProxy(System.Int32)">
            <summary>
            Destroy a proxy. This asserts if the id is invalid.
            </summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.MoveProxy(System.Int32,VRageMath.BoundingBox@,VRageMath.Vector3)">
            <summary>
            Move a proxy with a swepted BoundingBox. If the proxy has moved outside of its fattened BoundingBox,
            then the proxy is removed from the tree and re-inserted. Otherwise
            the function returns immediately.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The aabb.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.GetUserData``1(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns>the proxy user data or 0 if the id is invalid.</returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.GetUserFlag(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns>the proxy user data or 0 if the id is invalid.</returns>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.GetFatAABB(System.Int32,VRageMath.BoundingBox@)">
            <summary>
            Get the fat BoundingBox for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="fatAABB">The fat BoundingBox.</param>
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.Query(System.Func{System.Int32,System.Boolean},VRageMath.BoundingBox@)">
            Query an BoundingBox for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied BoundingBox.
        </member>
        <member name="M:VRageMath.MyDynamicAABBTree.GetHeight">
            Compute the height of the binary tree in O(N) time. Should not be
            called often.
        </member>
        <member name="T:VRageMath.MyDynamicAABBTree.DynamicTreeNode">
            <summary>
            A node in the dynamic tree. The client does not interact with this directly.
            </summary>
        </member>
        <member name="F:VRageMath.MyDynamicAABBTree.DynamicTreeNode.Aabb">
            This is the fattened BoundingBox.
        </member>
        <member name="T:VRageMath.Vector2">
            <summary>
            Defines a vector with two components.
            </summary>
        </member>
        <member name="F:VRageMath.Vector2.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector2.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="x">Initial value for the x-component of the vector.</param><param name="y">Initial value for the y-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.#ctor(System.Single)">
            <summary>
            Creates a new instance of Vector2.
            </summary>
            <param name="value">Value to initialize both components to.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_UnaryNegation(VRageMath.Vector2)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Equality(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Tests vectors for equality.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Inequality(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Tests vectors for inequality.
            </summary>
            <param name="value1">Vector to compare.</param><param name="value2">Vector to compare.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Addition(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Addition(VRageMath.Vector2,System.Single)">
            <summary>
            Adds float to each component of a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source float.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Subtraction(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Subtraction(VRageMath.Vector2,System.Single)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Multiply(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Multiply(VRageMath.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Multiply(System.Single,VRageMath.Vector2)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Division(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Division(VRageMath.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector2.op_Division(System.Single,VRageMath.Vector2)">
            <summary>
            Divides a scalar value by a vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.Equals(VRageMath.Vector2)">
            <summary>
            Determines whether the specified Object is equal to the Vector2.
            </summary>
            <param name="other">The Object to compare with the current Vector2.</param>
        </member>
        <member name="M:VRageMath.Vector2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:VRageMath.Vector2.GetHashCode">
            <summary>
            Gets the hash code of the vector object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.LengthSquared">
            <summary>
            Calculates the length of the vector squared.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.Distance(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Distance(VRageMath.Vector2@,VRageMath.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector2.DistanceSquared(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.DistanceSquared(VRageMath.Vector2@,VRageMath.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the vectors squared.</param>
        </member>
        <member name="M:VRageMath.Vector2.Dot(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Dot(VRageMath.Vector2@,VRageMath.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:VRageMath.Vector2.Normalize">
            <summary>
            Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector2.Normalize(VRageMath.Vector2)">
            <summary>
            Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            <param name="value">Source Vector2.</param>
        </member>
        <member name="M:VRageMath.Vector2.Normalize(VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] Normalized vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Reflect(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Determines the reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source vector.</param><param name="normal">Normal of vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Reflect(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Determines the reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source vector.</param><param name="normal">Normal of vector.</param><param name="result">[OutAttribute] The created reflect vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Min(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Min(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Max(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Max(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Clamp(VRageMath.Vector2,VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param>
        </member>
        <member name="M:VRageMath.Vector2.Clamp(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param><param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:VRageMath.Vector2.Lerp(VRageMath.Vector2,VRageMath.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.Vector2.Lerp(VRageMath.Vector2@,VRageMath.Vector2@,System.Single,VRageMath.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param><param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector2.Barycentric(VRageMath.Vector2,VRageMath.Vector2,VRageMath.Vector2,System.Single,System.Single)">
            <summary>
            Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:VRageMath.Vector2.Barycentric(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@,System.Single,System.Single,VRageMath.Vector2@)">
            <summary>
            Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param><param name="result">[OutAttribute] The 2D Cartesian coordinates of the specified point are placed in this Vector2 on exit.</param>
        </member>
        <member name="M:VRageMath.Vector2.SmoothStep(VRageMath.Vector2,VRageMath.Vector2,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param>
        </member>
        <member name="M:VRageMath.Vector2.SmoothStep(VRageMath.Vector2@,VRageMath.Vector2@,System.Single,VRageMath.Vector2@)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param><param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:VRageMath.Vector2.CatmullRom(VRageMath.Vector2,VRageMath.Vector2,VRageMath.Vector2,VRageMath.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector2.CatmullRom(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@,System.Single,VRageMath.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector2.Hermite(VRageMath.Vector2,VRageMath.Vector2,VRageMath.Vector2,VRageMath.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector2.Hermite(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@,System.Single,VRageMath.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2,VRageMath.Matrix)">
            <summary>
            Transforms the vector (x, y, 0, 1) by the specified matrix.
            </summary>
            <param name="position">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2@,VRageMath.Matrix@,VRageMath.Vector2@)">
            <summary>
            Transforms a Vector2 by the given Matrix.
            </summary>
            <param name="position">The source Vector2.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector2.TransformNormal(VRageMath.Vector2,VRageMath.Matrix)">
            <summary>
            Transforms a 2D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector2.TransformNormal(VRageMath.Vector2@,VRageMath.Matrix@,VRageMath.Vector2@)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param><param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2,VRageMath.Quaternion)">
            <summary>
            Transforms a single Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.
            </summary>
            <param name="value">The vector to rotate.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2@,VRageMath.Quaternion@,VRageMath.Vector2@)">
            <summary>
            Transforms a Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.
            </summary>
            <param name="value">The vector to rotate.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] An existing Vector2 filled in with the result of the rotation.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2[],VRageMath.Matrix@,VRageMath.Vector2[])">
            <summary>
            Transforms an array of Vector2s by a specified Matrix.
            </summary>
            <param name="sourceArray">The array of Vector2s to transform.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2[],System.Int32,VRageMath.Matrix@,VRageMath.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector2s by a specified Matrix and places the results in a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param><param name="matrix">The Matrix to transform by.</param><param name="destinationArray">The destination array into which the resulting Vector2s will be written.</param><param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param><param name="length">The number of Vector2s to be transformed.</param>
        </member>
        <member name="M:VRageMath.Vector2.TransformNormal(VRageMath.Vector2[],VRageMath.Matrix@,VRageMath.Vector2[])">
            <summary>
            Transforms an array of Vector2 vector normals by a specified Matrix.
            </summary>
            <param name="sourceArray">The array of vector normals to transform.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">An existing array into which the transformed vector normals are written.</param>
        </member>
        <member name="M:VRageMath.Vector2.TransformNormal(VRageMath.Vector2[],System.Int32,VRageMath.Matrix@,VRageMath.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector2 vector normals by a specified Matrix and places the results in a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param><param name="matrix">The Matrix to apply.</param><param name="destinationArray">The destination array into which the resulting Vector2s are written.</param><param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param><param name="length">The number of vector normals to be transformed.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2[],VRageMath.Quaternion@,VRageMath.Vector2[])">
            <summary>
            Transforms an array of Vector2s by a specified Quaternion.
            </summary>
            <param name="sourceArray">The array of Vector2s to transform.</param><param name="rotation">The transform Matrix to use.</param><param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
        </member>
        <member name="M:VRageMath.Vector2.Transform(VRageMath.Vector2[],System.Int32,VRageMath.Quaternion@,VRageMath.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector2s by a specified Quaternion and places the results in a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The destination array into which the resulting Vector2s are written.</param><param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param><param name="length">The number of Vector2s to be transformed.</param>
        </member>
        <member name="M:VRageMath.Vector2.Negate(VRageMath.Vector2)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Negate(VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:VRageMath.Vector2.Add(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Add(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:VRageMath.Vector2.Subtract(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Subtract(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Vector2.Multiply(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Multiply(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector2.Multiply(VRageMath.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector2.Multiply(VRageMath.Vector2@,System.Single,VRageMath.Vector2@)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector2.Divide(VRageMath.Vector2,VRageMath.Vector2)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector2.Divide(VRageMath.Vector2@,VRageMath.Vector2@,VRageMath.Vector2@)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.Vector2.Divide(VRageMath.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector2.Divide(VRageMath.Vector2@,System.Single,VRageMath.Vector2@)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="T:VRageMath.Vector3">
            <summary>
            Defines a vector with three components.
            </summary>
        </member>
        <member name="F:VRageMath.Vector3.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector3.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector3.Z">
            <summary>
            Gets or sets the z-component of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">Initial value for the x-component of the vector.</param><param name="y">Initial value for the y-component of the vector.</param><param name="z">Initial value for the z-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.#ctor(System.Single)">
            <summary>
            Creates a new instance of Vector3.
            </summary>
            <param name="value">Value to initialize each component to.</param>
        </member>
        <member name="M:VRageMath.Vector3.#ctor(VRageMath.Vector2,System.Single)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="value">A vector containing the values to initialize x and y components with.</param><param name="z">Initial value for the z-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_UnaryNegation(VRageMath.Vector3)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Equality(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Tests vectors for equality.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Inequality(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Tests vectors for inequality.
            </summary>
            <param name="value1">Vector to compare.</param><param name="value2">Vector to compare.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Addition(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Subtraction(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Multiply(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Multiply(VRageMath.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Multiply(System.Single,VRageMath.Vector3)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Division(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.op_Division(VRageMath.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector3.SignNonZero(VRageMath.Vector3)">
            <summary>
            Returns per component sign, never returns zero.
            For zero component returns sign 1.
            Faster than Sign.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.Equals(VRageMath.Vector3)">
            <summary>
            Determines whether the specified Object is equal to the Vector3.
            </summary>
            <param name="other">The Vector3 to compare with the current Vector3.</param>
        </member>
        <member name="M:VRageMath.Vector3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:VRageMath.Vector3.GetHash">
            <summary>
            Gets the hash code of the vector object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.LengthSquared">
            <summary>
            Calculates the length of the vector squared.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.Distance(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Distance(VRageMath.Vector3@,VRageMath.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3.DistanceSquared(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.DistanceSquared(VRageMath.Vector3@,VRageMath.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the two vectors squared.</param>
        </member>
        <member name="M:VRageMath.Vector3.RectangularDistance(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculates rectangular distance (a.k.a. Manhattan distance or Chessboard distace) between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.RectangularDistance(VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Calculates rectangular distance (a.k.a. Manhattan distance or Chessboard distace) between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Dot(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Dot(VRageMath.Vector3@,VRageMath.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3.Normalize">
            <summary>
            Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            returns length
        </member>
        <member name="M:VRageMath.Vector3.Normalize(VRageMath.Vector3)">
            <summary>
            Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            <param name="value">The source Vector3.</param>
        </member>
        <member name="M:VRageMath.Vector3.Normalize(VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] The normalized vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Cross(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Cross(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The cross product of the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3.Reflect(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.
            </summary>
            <param name="vector">Source vector.</param><param name="normal">Normal of the surface.</param>
        </member>
        <member name="M:VRageMath.Vector3.Reflect(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.
            </summary>
            <param name="vector">Source vector.</param><param name="normal">Normal of the surface.</param><param name="result">[OutAttribute] The reflected vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Reject(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Returns the rejection of vector from direction, i.e. projection of vector onto the plane defined by origin and direction
            </summary>
            <param name="vector">Vector which is to be rejected</param>
            <param name="direction">Direction from which the input vector will be rejected</param>
            <returns>Rejection of the vector from the given direction</returns>
        </member>
        <member name="M:VRageMath.Vector3.Reject(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Returns the rejection of vector from direction, i.e. projection of vector onto the plane defined by origin and direction
            </summary>
            <param name="vector">Vector which is to be rejected</param>
            <param name="direction">Direction from which the input vector will be rejected</param>
            <param name="result">Rejection of the vector from the given direction</param>
        </member>
        <member name="M:VRageMath.Vector3.Min">
            <summary>
            Returns the component of the vector that is smallest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.AbsMin">
            <summary>
            Returns the component of the vector, whose absolute value is smallest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.Max">
            <summary>
            Returns the component of the vector that is largest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.MaxAbsComponent">
            <summary>
            Keeps only component with maximal absolute, others are set to zero.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.AbsMax">
            <summary>
            Returns the component of the vector, whose absolute value is largest of all the three components.
            </summary>
        </member>
        <member name="M:VRageMath.Vector3.Min(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Min(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Max(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Max(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.DominantAxisProjection(VRageMath.Vector3)">
            <summary>
            Returns a vector that is equal to the projection of the input vector to the coordinate axis that corresponds
            to the original vector's largest value.
            </summary>
            <param name="value1">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.DominantAxisProjection(VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Calculates a vector that is equal to the projection of the input vector to the coordinate axis that corresponds
            to the original vector's largest value. The result is saved into a user-specified variable.
            </summary>
            <param name="value1">Source vector.</param><param name="result">[OutAttribute] The projected vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Clamp(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param>
        </member>
        <member name="M:VRageMath.Vector3.Clamp(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param><param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:VRageMath.Vector3.Lerp(VRageMath.Vector3,VRageMath.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.Vector3.Lerp(VRageMath.Vector3@,VRageMath.Vector3@,System.Single,VRageMath.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param><param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector3.Barycentric(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.Single,System.Single)">
            <summary>
            Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:VRageMath.Vector3.Barycentric(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,System.Single,System.Single,VRageMath.Vector3@)">
            <summary>
            Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param><param name="result">[OutAttribute] The 3D Cartesian coordinates of the specified point are placed in this Vector3 on exit.</param>
        </member>
        <member name="M:VRageMath.Vector3.SmoothStep(VRageMath.Vector3,VRageMath.Vector3,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param>
        </member>
        <member name="M:VRageMath.Vector3.SmoothStep(VRageMath.Vector3@,VRageMath.Vector3@,System.Single,VRageMath.Vector3@)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Weighting value.</param><param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:VRageMath.Vector3.CatmullRom(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector3.CatmullRom(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,System.Single,VRageMath.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector3.Hermite(VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,VRageMath.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector3.Hermite(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@,System.Single,VRageMath.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3,VRageMath.Matrix)">
            <summary>
            Transforms a 3D vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3,VRageMath.MatrixD)">
            <summary>
            Transforms a 3D vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3@,VRageMath.Matrix@,VRageMath.Vector3@)">
            <summary>
            Transforms a Vector3 by the given Matrix.
            </summary>
            <param name="position">The source Vector3.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The transformed vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.D3DXVec3TransformCoord_(VRageMath.Vector3*,VRageMath.Vector3*,VRageMath.Matrix*)">
            <summary>Native Interop Function</summary>
        </member>
        <member name="M:VRageMath.Vector3.TransformNormal(VRageMath.Vector3,VRageMath.Matrix)">
            <summary>
            Transforms a 3D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3.TransformNormal(VRageMath.Vector3,VRageMath.MatrixD)">
            <summary>
            Transforms a 3D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3.TransformNormal(VRageMath.Vector3D,VRageMath.Matrix)">
            <summary>
            Transforms a 3D vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:VRageMath.Vector3.TransformNormal(VRageMath.Vector3@,VRageMath.Matrix@,VRageMath.Vector3@)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="normal">The source vector.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector3 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector3 by a specified Quaternion rotation.
            </summary>
            <param name="value">The Vector3 to rotate.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3@,VRageMath.Quaternion@,VRageMath.Vector3@)">
            <summary>
            Transforms a Vector3 by a specified Quaternion rotation.
            </summary>
            <param name="value">The Vector3 to rotate.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] An existing Vector3 filled in with the results of the rotation.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3[],VRageMath.Matrix@,VRageMath.Vector3[])">
            <summary>
            Transforms a source array of Vector3s by a specified Matrix and writes the results to an existing destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3[],System.Int32,VRageMath.Matrix@,VRageMath.Vector3[],System.Int32,System.Int32)">
            <summary>
            Applies a specified transform Matrix to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index in the source array at which to start.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The existing destination array.</param><param name="destinationIndex">The index in the destination array at which to start.</param><param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector3.TransformNormal(VRageMath.Vector3[],VRageMath.Matrix@,VRageMath.Vector3[])">
            <summary>
            Transforms an array of 3D vector normals by a specified Matrix.
            </summary>
            <param name="sourceArray">The array of Vector3 normals to transform.</param><param name="matrix">The transform matrix to apply.</param><param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
        </member>
        <member name="M:VRageMath.Vector3.TransformNormal(VRageMath.Vector3[],System.Int32,VRageMath.Matrix@,VRageMath.Vector3[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of 3D vector normals by a specified Matrix and writes the results to a specified range in a destination array.
            </summary>
            <param name="sourceArray">The source array of Vector3 normals.</param><param name="sourceIndex">The starting index in the source array.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The destination Vector3 array.</param><param name="destinationIndex">The starting index in the destination array.</param><param name="length">The number of vectors to transform.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3[],VRageMath.Quaternion@,VRageMath.Vector3[])">
            <summary>
            Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:VRageMath.Vector3.Transform(VRageMath.Vector3[],System.Int32,VRageMath.Quaternion@,VRageMath.Vector3[],System.Int32,System.Int32)">
            <summary>
            Applies a specified Quaternion rotation to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.
            </summary>
            <param name="sourceArray">The source array.</param><param name="sourceIndex">The index in the source array at which to start.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The existing destination array.</param><param name="destinationIndex">The index in the destination array at which to start.</param><param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector3.Negate(VRageMath.Vector3)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Negate(VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:VRageMath.Vector3.Add(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Add(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:VRageMath.Vector3.Subtract(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Subtract(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Vector3.Multiply(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Multiply(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector3.Multiply(VRageMath.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector3.Multiply(VRageMath.Vector3@,System.Single,VRageMath.Vector3@)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector3.Divide(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector3.Divide(VRageMath.Vector3@,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.Vector3.Divide(VRageMath.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector3.Divide(VRageMath.Vector3@,System.Single,VRageMath.Vector3@)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="T:VRageMath.Vector4">
            <summary>
            Defines a vector with four components.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4.X">
            <summary>
            Gets or sets the x-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4.Y">
            <summary>
            Gets or sets the y-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4.Z">
            <summary>
            Gets or sets the z-component of the vector.
            </summary>
        </member>
        <member name="F:VRageMath.Vector4.W">
            <summary>
            Gets or sets the w-component of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="x">Initial value for the x-component of the vector.</param><param name="y">Initial value for the y-component of the vector.</param><param name="z">Initial value for the z-component of the vector.</param><param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.#ctor(VRageMath.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="value">A vector containing the values to initialize x and y components with.</param><param name="z">Initial value for the z-component of the vector.</param><param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.#ctor(VRageMath.Vector3,System.Single)">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="value">A vector containing the values to initialize x, y, and z components with.</param><param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.#ctor(System.Single)">
            <summary>
            Creates a new instance of Vector4.
            </summary>
            <param name="value">Value to initialize each component to.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_UnaryNegation(VRageMath.Vector4)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Equality(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Tests vectors for equality.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Inequality(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Tests vectors for inequality.
            </summary>
            <param name="value1">Vector to compare.</param><param name="value2">Vector to compare.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Addition(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Subtraction(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Multiply(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Multiply(VRageMath.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Multiply(System.Single,VRageMath.Vector4)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="scaleFactor">Scalar value.</param><param name="value1">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Division(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Division(VRageMath.Vector4,System.Single)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector4.op_Division(System.Single,VRageMath.Vector4)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector4.ToString">
            <summary>
            Retrieves a string representation of the current object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4.Equals(VRageMath.Vector4)">
            <summary>
            Determines whether the specified Object is equal to the Vector4.
            </summary>
            <param name="other">The Vector4 to compare with the current Vector4.</param>
        </member>
        <member name="M:VRageMath.Vector4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:VRageMath.Vector4.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4.LengthSquared">
            <summary>
            Calculates the length of the vector squared.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4.Distance(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Distance(VRageMath.Vector4@,VRageMath.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:VRageMath.Vector4.DistanceSquared(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.DistanceSquared(VRageMath.Vector4@,VRageMath.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors squared.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The distance between the two vectors squared.</param>
        </member>
        <member name="M:VRageMath.Vector4.Dot(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Dot(VRageMath.Vector4@,VRageMath.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">Source vector.</param><param name="vector2">Source vector.</param><param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:VRageMath.Vector4.Normalize">
            <summary>
            Turns the current vector into a unit vector.
            </summary>
        </member>
        <member name="M:VRageMath.Vector4.Normalize(VRageMath.Vector4)">
            <summary>
            Creates a unit vector from the specified vector.
            </summary>
            <param name="vector">The source Vector4.</param>
        </member>
        <member name="M:VRageMath.Vector4.Normalize(VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Returns a normalized version of the specified vector.
            </summary>
            <param name="vector">Source vector.</param><param name="result">[OutAttribute] The normalized vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Min(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Min(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Max(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Max(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Clamp(VRageMath.Vector4,VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param>
        </member>
        <member name="M:VRageMath.Vector4.Clamp(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value1">The value to clamp.</param><param name="min">The minimum value.</param><param name="max">The maximum value.</param><param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:VRageMath.Vector4.Lerp(VRageMath.Vector4,VRageMath.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:VRageMath.Vector4.Lerp(VRageMath.Vector4@,VRageMath.Vector4@,System.Single,VRageMath.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Value between 0 and 1 indicating the weight of value2.</param><param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Barycentric(VRageMath.Vector4,VRageMath.Vector4,VRageMath.Vector4,System.Single,System.Single)">
            <summary>
            Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:VRageMath.Vector4.Barycentric(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@,System.Single,System.Single,VRageMath.Vector4@)">
            <summary>
            Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric (areal) coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param><param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param><param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param><param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param><param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param><param name="result">[OutAttribute] The 4D Cartesian coordinates of the specified point are placed in this Vector4 on exit.</param>
        </member>
        <member name="M:VRageMath.Vector4.SmoothStep(VRageMath.Vector4,VRageMath.Vector4,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param><param name="value2">Source value.</param><param name="amount">Weighting value.</param>
        </member>
        <member name="M:VRageMath.Vector4.SmoothStep(VRageMath.Vector4@,VRageMath.Vector4@,System.Single,VRageMath.Vector4@)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:VRageMath.Vector4.CatmullRom(VRageMath.Vector4,VRageMath.Vector4,VRageMath.Vector4,VRageMath.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector4.CatmullRom(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@,System.Single,VRageMath.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param><param name="value2">The second position in the interpolation.</param><param name="value3">The third position in the interpolation.</param><param name="value4">The fourth position in the interpolation.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Hermite(VRageMath.Vector4,VRageMath.Vector4,VRageMath.Vector4,VRageMath.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param>
        </member>
        <member name="M:VRageMath.Vector4.Hermite(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@,System.Single,VRageMath.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position vector.</param><param name="tangent1">Source tangent vector.</param><param name="value2">Source position vector.</param><param name="tangent2">Source tangent vector.</param><param name="amount">Weighting factor.</param><param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector2,VRageMath.Matrix)">
            <summary>
            Transforms a Vector2 by the given Matrix.
            </summary>
            <param name="position">The source Vector2.</param><param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector2@,VRageMath.Matrix@,VRageMath.Vector4@)">
            <summary>
            Transforms a Vector2 by the given Matrix.
            </summary>
            <param name="position">The source Vector2.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector3,VRageMath.Matrix)">
            <summary>
            Transforms a Vector3 by the given Matrix.
            </summary>
            <param name="position">The source Vector3.</param><param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector3@,VRageMath.Matrix@,VRageMath.Vector4@)">
            <summary>
            Transforms a Vector3 by the given Matrix.
            </summary>
            <param name="position">The source Vector3.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4,VRageMath.Matrix)">
            <summary>
            Transforms a Vector4 by the specified Matrix.
            </summary>
            <param name="vector">The source Vector4.</param><param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4@,VRageMath.Matrix@,VRageMath.Vector4@)">
            <summary>
            Transforms a Vector4 by the given Matrix.
            </summary>
            <param name="vector">The source Vector4.</param><param name="matrix">The transformation Matrix.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector2,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector2 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector2 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector2@,VRageMath.Quaternion@,VRageMath.Vector4@)">
            <summary>
            Transforms a Vector2 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector2 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector3,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector3 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector3 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector3@,VRageMath.Quaternion@,VRageMath.Vector4@)">
            <summary>
            Transforms a Vector3 by a specified Quaternion into a Vector4.
            </summary>
            <param name="value">The Vector3 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4,VRageMath.Quaternion)">
            <summary>
            Transforms a Vector4 by a specified Quaternion.
            </summary>
            <param name="value">The Vector4 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4@,VRageMath.Quaternion@,VRageMath.Vector4@)">
            <summary>
            Transforms a Vector4 by a specified Quaternion.
            </summary>
            <param name="value">The Vector4 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4[],VRageMath.Matrix@,VRageMath.Vector4[])">
            <summary>
            Transforms an array of Vector4s by a specified Matrix.
            </summary>
            <param name="sourceArray">The array of Vector4s to transform.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4[],System.Int32,VRageMath.Matrix@,VRageMath.Vector4[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector4s by a specified Matrix into a specified range in a destination array.
            </summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param><param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param><param name="matrix">The transform Matrix to apply.</param><param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param><param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param><param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4[],VRageMath.Quaternion@,VRageMath.Vector4[])">
            <summary>
            Transforms an array of Vector4s by a specified Quaternion.
            </summary>
            <param name="sourceArray">The array of Vector4s to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:VRageMath.Vector4.Transform(VRageMath.Vector4[],System.Int32,VRageMath.Quaternion@,VRageMath.Vector4[],System.Int32,System.Int32)">
            <summary>
            Transforms a specified range in an array of Vector4s by a specified Quaternion into a specified range in a destination array.
            </summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param><param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param><param name="rotation">The Quaternion rotation to apply.</param><param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param><param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param><param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:VRageMath.Vector4.Negate(VRageMath.Vector4)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Negate(VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Returns a vector pointing in the opposite direction.
            </summary>
            <param name="value">Source vector.</param><param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:VRageMath.Vector4.Add(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Add(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:VRageMath.Vector4.Subtract(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Subtract(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:VRageMath.Vector4.Multiply(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Multiply(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Source vector.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector4.Multiply(VRageMath.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:VRageMath.Vector4.Multiply(VRageMath.Vector4@,System.Single,VRageMath.Vector4@)">
            <summary>
            Multiplies a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="scaleFactor">Scalar value.</param><param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:VRageMath.Vector4.Divide(VRageMath.Vector4,VRageMath.Vector4)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">Divisor vector.</param>
        </member>
        <member name="M:VRageMath.Vector4.Divide(VRageMath.Vector4@,VRageMath.Vector4@,VRageMath.Vector4@)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector.</param><param name="value2">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.Vector4.Divide(VRageMath.Vector4,System.Single)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param>
        </member>
        <member name="M:VRageMath.Vector4.Divide(VRageMath.Vector4@,System.Single,VRageMath.Vector4@)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="value1">Source vector.</param><param name="divider">The divisor.</param><param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:VRageMath.Vector4UByte.Normalize(VRageMath.Vector3,System.Single)">
            <summary>
            Normalizes Vector3 into Vector4UByte, scales vector from (-range, range) to (0, 255)
            </summary>
        </member>
    </members>
</doc>
