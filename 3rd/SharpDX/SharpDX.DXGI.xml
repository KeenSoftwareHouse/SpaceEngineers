<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.DXGI</name>
    </assembly>
    <members>
        <member name="T:SharpDX.DXGI.Adapter">
            <summary>	
            <p>The  <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface represents a display sub-system (including one or more GPU's, DACs and video memory).</p>	
            </summary>	
            <remarks>	
            <p>A display sub-system is often referred to as a video card, however, on some machines the display sub-system is part of the mother board.</p><p>To enumerate the display sub-systems, use <strong><see cref="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)"/></strong>. To get an interface to the adapter for a particular device, use <strong><see cref="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)"/></strong>. To create a software adapter, use <strong><see cref="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter']/*"/>	
            <msdn-id>bb174523</msdn-id>	
            <unmanaged>IDXGIAdapter</unmanaged>	
            <unmanaged-short>IDXGIAdapter</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIObject">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.DXGIObject"/></strong> interface is a base interface for all DXGI objects; <strong><see cref="T:SharpDX.DXGI.DXGIObject"/></strong> supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object.</p>	
            </summary>	
            <remarks>	
            <p><strong><see cref="T:SharpDX.DXGI.DXGIObject"/></strong> implements base class functionality for several other interfaces: <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong>, <strong><see cref="T:SharpDX.DXGI.Device"/></strong>, <strong><see cref="T:SharpDX.DXGI.Factory"/></strong>, <strong><see cref="T:SharpDX.DXGI.Output"/></strong> </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject']/*"/>	
            <msdn-id>bb174541</msdn-id>	
            <unmanaged>IDXGIObject</unmanaged>	
            <unmanaged-short>IDXGIObject</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetParent``1">
            <summary>
            Gets the parent of the object.
            </summary>
            <typeparam name="T">Type of the parent object</typeparam>
            <returns>Returns the parent object based on the GUID of the type of the parent object.</returns>
            <msdn-id>bb174542</msdn-id>
            <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>
            <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DXGIObject"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.op_Explicit(System.IntPtr)~SharpDX.DXGI.DXGIObject">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.DXGIObject"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            <p>Sets application-defined data to the object and associates that data with a <see cref="T:System.Guid"/>.</p>	
            </summary>	
            <param name="name"><dd>  <p>A <see cref="T:System.Guid"/> that identifies the data. Use this <see cref="T:System.Guid"/> in a call to <strong>GetPrivateData</strong> to get the data.</p> </dd></param>	
            <param name="dataSize"><dd>  <p>The size of the object's data.</p> </dd></param>	
            <param name="dataRef"><dd>  <p>A reference to the object's data.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong>SetPrivateData</strong> makes a copy of the specified data and stores it with the object.</p><p>Private data that <strong>SetPrivateData</strong> stores in the object occupies the same storage space as private data that is stored by associated Direct3D objects (for example, by a Microsoft Direct3D?11 device through <strong><see cref="!:SharpDX.Direct3D11.Device.SetPrivateData"/></strong> or by a Direct3D?11 child device through <strong><see cref="!:SharpDX.Direct3D11.DeviceChild.SetPrivateData"/></strong>).</p><p>The debug layer reports memory leaks by outputting a list of object interface references along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface reference caused the leak. To set the friendly name, use the <strong>SetPrivateData</strong> method and the well-known private data <see cref="T:System.Guid"/> (<strong><see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/></strong>) that is in D3Dcommon.h. For example, to give pContext a friendly name of <em>My name</em>, use the following code:</p><pre> static const char c_szName[] = "My name";	
            hr = pContext-&gt;SetPrivateData( <see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/>, sizeof( c_szName ) - 1, c_szName );	
            </pre><p>You can use <strong><see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/></strong> to track down memory leaks and understand performance characteristics of your applications. This information is reflected in the output of the debug layer that is related to memory leaks (<strong><see cref="!:SharpDX.Direct3D11.DeviceDebug.ReportLiveDeviceObjects"/></strong>) and with the event tracing for Windows events that we've added to Windows?8.	
            </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::SetPrivateData']/*"/>	
            <msdn-id>bb174544</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name,[In] unsigned int DataSize,[In, Buffer] const void* pData)</unmanaged>	
            <unmanaged-short>IDXGIObject::SetPrivateData</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            <p>Set an interface in the object's private data.</p>	
            </summary>	
            <param name="name"><dd>  <p>A <see cref="T:System.Guid"/> identifying the interface.</p> </dd></param>	
            <param name="unknownRef"><dd>  <p>The interface to set.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>This API associates an interface reference with the object.</p><p>When the interface is set its reference count is incremented. When the data are overwritten (by calling SPD or SPDI with the same <see cref="T:System.Guid"/>) or the object is destroyed, ::Release() is called and the interface's reference count is decremented.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::SetPrivateDataInterface']/*"/>	
            <msdn-id>bb174545</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name,[In] const IUnknown* pUnknown)</unmanaged>	
            <unmanaged-short>IDXGIObject::SetPrivateDataInterface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            <p>Get a reference to the object's data.</p>	
            </summary>	
            <param name="name"><dd>  <p>A <see cref="T:System.Guid"/> identifying the data.</p> </dd></param>	
            <param name="dataSizeRef"><dd>  <p>The size of the data.</p> </dd></param>	
            <param name="dataRef"><dd>  <p>Pointer to the data.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>If the data returned is a reference to an <strong><see cref="T:SharpDX.ComObject"/></strong>, or one of its derivative classes, previously set by <strong><see cref="M:SharpDX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)"/></strong>, you must call <strong>::Release()</strong> on the reference before the reference is freed to decrement the reference count.</p><p>You can pass <strong>GUID_DeviceType</strong> in the <em>Name</em> parameter of <strong>GetPrivateData</strong> to retrieve the device type from the display adapter object (<strong><see cref="T:SharpDX.DXGI.Adapter"/></strong>, <strong><see cref="T:SharpDX.DXGI.Adapter1"/></strong>, <strong><see cref="T:SharpDX.DXGI.Adapter2"/></strong>). </p><p><strong>To get the type of device on which the display adapter was created</strong></p><ol> <li>Call <strong>IUnknown::QueryInterface</strong> on the <strong><see cref="!:SharpDX.Direct3D11.Device"/></strong> or <strong>ID3D10Device</strong> object to retrieve the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> object.</li> <li>Call <strong>GetParent</strong> on the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> object to retrieve the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> object.</li> <li>Call <strong>GetPrivateData</strong> on the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> object with <strong>GUID_DeviceType</strong> to retrieve the type of device on which the display adapter was created. <em>pData</em> will point to a value from the driver-type enumeration (for example, a value from <strong><see cref="T:SharpDX.Direct3D.DriverType"/></strong>).</li> </ol><p>On Windows?7 or earlier, this type is either a value from <strong>D3D10_DRIVER_TYPE</strong> or <strong><see cref="T:SharpDX.Direct3D.DriverType"/></strong> depending on which kind of device was created. On Windows?8, this type is always a value from <strong><see cref="T:SharpDX.Direct3D.DriverType"/></strong>. Don't use <strong><see cref="M:SharpDX.DXGI.DXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)"/></strong> with <strong>GUID_DeviceType</strong> because the behavior when doing so is undefined.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::GetPrivateData']/*"/>	
            <msdn-id>bb174543</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name,[InOut] unsigned int* pDataSize,[Out, Buffer] void* pData)</unmanaged>	
            <unmanaged-short>IDXGIObject::GetPrivateData</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Gets the parent of the object.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The ID of the requested interface.</p> </dd></param>	
            <param name="parentOut"><dd>  <p>The address of a reference to the parent object.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::GetParent']/*"/>	
            <msdn-id>bb174542</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>	
            <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported(System.Type)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported``1">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported``1(System.Int64@)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported(System.Type,System.Int64@)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID.</param>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)">
            <summary>
            Gets an adapter (video card) outputs.
            </summary>
            <param name="outputIndex">The index of the output.</param>
            <returns>
            An instance of <see cref="T:SharpDX.DXGI.Output"/> 
            </returns>
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>
            <remarks>
            When the EnumOutputs method succeeds and fills the ppOutput parameter with the address of the reference to the output interface, EnumOutputs increments the output interface's reference count. To avoid a memory leak, when you finish using the  output interface, call the Release method to decrement the reference count.EnumOutputs first returns the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumOutputs then returns other outputs.
            </remarks>
            <exception cref="T:SharpDX.SharpDXException">if the index is greater than the number of outputs, result code <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/></exception>
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutputCount">
            <summary>
              Return the number of available outputs from this adapter.
            </summary>
            <returns>The number of outputs</returns>
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.op_Explicit(System.IntPtr)~SharpDX.DXGI.Adapter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Adapter"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32,SharpDX.DXGI.Output@)">
            <summary>	
            <p>Enumerate adapter (video card) outputs.</p>	
            </summary>	
            <param name="output"><dd>  <p>The index of the output.</p> </dd></param>	
            <param name="outputOut"><dd>  <p>The address of a reference to an <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface at the position specified by the <em>Output</em> parameter.</p> </dd></param>	
            <returns><p>A code that indicates success or failure (see DXGI_ERROR). Will return <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than the number of outputs.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>When the <strong>EnumOutputs</strong> method succeeds and fills the <em>ppOutput</em> parameter with the address of the reference to the output interface, <strong>EnumOutputs</strong> increments the output interface's reference count. To avoid a memory leak, when you finish using the  output interface, call the <strong>Release</strong> method to decrement the reference count.</p><p><strong>EnumOutputs</strong> first returns the output on which the desktop primary is displayed. This output corresponds with an index of zero. <strong>EnumOutputs</strong> then returns other outputs.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::EnumOutputs']/*"/>	
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)">
            <summary>	
            <p>Gets a DXGI 1.0 description of an adapter (or video card).</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure that describes the adapter. This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> and ?Software Adapter? for the description string in the <strong>Description</strong> member.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
            <remarks>	
            <p>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</p><ul> <li> Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.  <pre> HasWDDMDriver()	
            { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
            } </pre>  </li> <li> Retrieval of graphics memory values.? After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.  After you create a Direct3D device, use this code to obtain  a <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure that contains the amount of available graphics memory.  <pre> <see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
            <see cref="T:SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
            pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); </pre>  </li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
            <msdn-id>bb174526</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.CheckInterfaceSupport(System.Guid,System.Int64@)">
            <summary>	
            <p>Checks whether the system supports a device interface for a graphics component.</p>	
            </summary>	
            <param name="interfaceName"><dd>  <p>The <see cref="T:System.Guid"/> of the interface of the device version for which support is being checked. For example, __uuidof(ID3D10Device).</p> </dd></param>	
            <param name="uMDVersionRef"><dd>  <p>The user mode driver version of InterfaceName. This is  returned only if the interface is supported. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p><see cref="F:SharpDX.Result.Ok"/> indicates that the interface is supported, otherwise <see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/> is returned (For more information, see DXGI_ERROR).</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??You can  use <strong>CheckInterfaceSupport</strong> only to  check whether a Direct3D 10.x interface is supported, and only on Windows Vista SP1 and later versions of the operating system. If you try to use <strong>CheckInterfaceSupport</strong> to check whether a Direct3D 11.x and later version interface is supported, <strong>CheckInterfaceSupport</strong> returns <see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/>. Therefore, do not use <strong>CheckInterfaceSupport</strong>. Instead, to verify whether the operating system supports a particular interface, try to create the interface. For example, if you call the <strong><see cref="!:SharpDX.Direct3D11.Device.CreateBlendState"/></strong> method and it fails, the operating system does not support the <strong><see cref="!:SharpDX.Direct3D11.BlendState"/></strong> interface.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::CheckInterfaceSupport']/*"/>	
            <msdn-id>bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter.Outputs">
            <summary>
            Gets all outputs from this adapter.
            </summary>
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter.Description">
            <summary>	
            <p>Gets a DXGI 1.0 description of an adapter (or video card).</p>	
            </summary>	
            <remarks>	
            <p>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</p><ul> <li> Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.  <pre> HasWDDMDriver()	
            { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
            } </pre>  </li> <li> Retrieval of graphics memory values.? After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.  After you create a Direct3D device, use this code to obtain  a <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure that contains the amount of available graphics memory.  <pre> <see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
            <see cref="T:SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
            pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); </pre>  </li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
            <msdn-id>bb174526</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.AssemblyDoc">
            <summary>
            The <see cref="A:SharpDX.DXGI"/> assembly provides managed DXGI API.
            </summary>
            <msdn-id>hh404534</msdn-id>
            <unmanaged>DXGI</unmanaged>	
            <unmanaged-short>DXGI</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Factory4">
            <summary>	
            <p> An <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions). </p>	
            </summary>	
            <remarks>	
            <p> Create a factory by calling <strong>CreateDXGIFactory</strong>. </p><p> Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain. You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate the factory.  The following code shows how. </p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice = nullptr;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter = nullptr;	
            hr = pDXGIDevice-&gt;GetAdapter( &amp;pDXGIAdapter ); <see cref="T:SharpDX.DXGI.Factory"/> * pIDXGIFactory = nullptr;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);</pre><p><strong>Windows?Phone?8: </strong> This API is supported. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory4']/*"/>	
            <msdn-id>bb174535</msdn-id>	
            <unmanaged>IDXGIFactory4</unmanaged>	
            <unmanaged-short>IDXGIFactory4</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Factory3">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions).</p>	
            </summary>	
            <remarks>	
            <p>Create a factory by calling <strong>CreateDXGIFactory</strong>.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.Factory"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory3']/*"/>	
            <msdn-id>bb174535</msdn-id>	
            <unmanaged>IDXGIFactory3</unmanaged>	
            <unmanaged-short>IDXGIFactory3</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Factory2">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Factory2"/></strong> interface includes methods to create a newer version swap chain with more features than <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> and to monitor stereoscopic 3D capabilities.</p>	
            </summary>	
            <remarks>	
            <p>To create a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 factory interface, pass <strong><see cref="T:SharpDX.DXGI.Factory2"/></strong> into either the <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong> function or call <strong>QueryInterface</strong> from a factory object that either <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong> returns.	
            </p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong>, <strong><see cref="T:SharpDX.DXGI.Device1"/></strong>, or  <strong><see cref="T:SharpDX.DXGI.Device2"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device2"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device2"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.Factory2"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory2"/>), (void **)&amp;pIDXGIFactory);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2']/*"/>	
            <msdn-id>hh404556</msdn-id>	
            <unmanaged>IDXGIFactory2</unmanaged>	
            <unmanaged-short>IDXGIFactory2</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Factory1">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> interface implements methods for generating DXGI objects.</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>To create a factory, call the <strong>CreateDXGIFactory1</strong> function.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> or <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device1"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device1"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.Factory1"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory1"/>), (void **)&amp;pIDXGIFactory);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1']/*"/>	
            <msdn-id>ff471335</msdn-id>	
            <unmanaged>IDXGIFactory1</unmanaged>	
            <unmanaged-short>IDXGIFactory1</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Factory">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions).</p>	
            </summary>	
            <remarks>	
            <p>Create a factory by calling <strong>CreateDXGIFactory</strong>.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.Factory"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory']/*"/>	
            <msdn-id>bb174535</msdn-id>	
            <unmanaged>IDXGIFactory</unmanaged>	
            <unmanaged-short>IDXGIFactory</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)">
            <summary>
            Gets both adapters (video cards) with or without outputs.
            </summary>
            <param name="index"><para>The index of the adapter to enumerate.</para></param>
            <returns>a reference to an <see cref="T:SharpDX.DXGI.Adapter"/> interface at the position specified by the Adapter parameter</returns>
            <remarks>
            When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:SharpDX.DXGI.Factory"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters then returns other adapters with outputs.	
            </remarks>
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapterCount">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32,SharpDX.DXGI.Adapter@)">
            <summary>	
            <p>Enumerates the adapters (video cards).</p>	
            </summary>	
            <param name="adapter"><dd>  <p>The index of the adapter to enumerate.</p> </dd></param>	
            <param name="adapterOut"><dd>  <p>The address of a reference to an <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface at the position specified by the <em>Adapter</em> parameter.  This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than or equal to the number of adapters in the local system, or <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppAdapter</em> parameter is <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop. </p><p>When the <strong>EnumAdapters</strong> method succeeds and fills the <em>ppAdapter</em> parameter with the address of the reference to the adapter interface, <strong>EnumAdapters</strong> increments the adapter interface's reference count. When you finish using the  adapter interface, call the <strong>Release</strong> method to decrement the reference count before you destroy the reference.</p><p><strong>EnumAdapters</strong> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <strong>EnumAdapters</strong> next returns other adapters with outputs. <strong>EnumAdapters</strong> finally returns adapters without outputs. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::EnumAdapters']/*"/>	
            <msdn-id>bb174538</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory::EnumAdapters</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.MakeWindowAssociation(System.IntPtr,SharpDX.DXGI.WindowAssociationFlags)">
            <summary>	
            <p>Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).</p>	
            </summary>	
            <param name="windowHandle"><dd>  <p>The handle of the window that is to be monitored. This parameter can be <strong><c>null</c></strong>; but only if the flags are also 0. </p> </dd></param>	
            <param name="flags"><dd>  <p>One or more of the following values:</p> <ul> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter"/> - Prevent DXGI from responding to an alt-enter sequence.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen"/> - Prevent DXGI from responding to a print-screen key.</li> </ul> </dd></param>	
            <returns><p> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>WindowHandle</em> is invalid, or E_OUTOFMEMORY.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>The combination of <em>WindowHandle</em> and <em>Flags</em> informs DXGI to stop monitoring window messages for the previously-associated window.</p><p>If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.</p><p>Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to <strong>ResizeBuffers</strong> on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.</p><p>While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <strong><see cref="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)"/></strong>. If a matching mode is found, allow the resize. (The <see cref="T:SharpDX.DXGI.Output"/> can be retrieved from <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)</p><p>Applications that want to handle mode changes or Alt+Enter themselves should call <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swap chain creation. The <em>WindowHandle</em> argument, if non-<strong><c>null</c></strong>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <strong><see cref="T:System.IntPtr"/></strong>.  Calling <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::MakeWindowAssociation']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle,[In] DXGI_MWA_FLAGS Flags)</unmanaged>	
            <unmanaged-short>IDXGIFactory::MakeWindowAssociation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetWindowAssociation">
            <summary>	
            <p>Get the window through which the user controls the transition to and from full screen.</p>	
            </summary>	
            <returns><dd>  <p>A reference to a window handle.</p> </dd></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::GetWindowAssociation']/*"/>	
            <msdn-id>bb174539</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)</unmanaged>	
            <unmanaged-short>IDXGIFactory::GetWindowAssociation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>CreateSwapChain</strong> anymore to create a swap chain. Instead, use <strong>CreateSwapChainForHwnd</strong>, <strong>CreateSwapChainForCoreWindow</strong>, or <strong>CreateSwapChainForComposition</strong> depending on how you want to create the swap chain.]</p><p>Creates a swap chain.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>, <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> if you request full-screen mode and it is unavailable, or E_OUTOFMEMORY. Other error codes defined by the type of device passed in may also be returned.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> will be returned.</p><p>If the buffer width or the buffer height is zero, the sizes will be inferred from the output window size in the swap-chain description.</p><p>Because the target output can't be chosen explicitly when the swap chain is created, we recommend not to create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure that the sizes match:</p><ul> <li>Create a windowed swap chain and then set it full-screen using <strong><see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Mathematics.Interop.RawBool,SharpDX.DXGI.Output)"/></strong>.</li> <li>Save a reference to the swap chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>) during the transition from windowed to full-screen.</li> </ul><p>If the swap chain is in full-screen mode, before you release it you must use <strong>SetFullscreenState</strong> to switch it to windowed mode. For more information about releasing a swap chain, see the "Destroying a Swap Chain" section of DXGI Overview.</p><p>After the runtime renders the initial frame in full screen, the runtime might unexpectedly exit full screen during a call to <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong>. To work around this issue, we recommend that you execute the following code right after you call <strong>CreateSwapChain</strong> to create a full-screen swap chain (<strong>Windowed</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> set to <strong><see cref="F:SharpDX.Result.False"/></strong>).	
            </p><pre> // Detect if newly created full-screen swap chain isn't actually full screen.	
            <see cref="T:SharpDX.DXGI.Output"/>* pTarget; <see cref="T:SharpDX.Mathematics.Interop.RawBool"/> bFullscreen;	
            if (SUCCEEDED(pSwapChain-&gt;GetFullscreenState(&amp;bFullscreen, &amp;pTarget)))	
            { pTarget-&gt;Release();	
            }	
            else bFullscreen = <see cref="F:SharpDX.Result.False"/>;	
            // If not full screen, enable full screen again.	
            if (!bFullscreen)	
            { ShowWindow(hWnd, SW_MINIMIZE); ShowWindow(hWnd, SW_RESTORE); pSwapChain-&gt;SetFullscreenState(TRUE, <c>null</c>);	
            }	
            </pre><p>You can specify <strong><see cref="T:SharpDX.DXGI.SwapEffect"/></strong> and <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> values in the swap-chain description that <em>pDesc</em> points to. These values allow you to use features like flip-model presentation and content protection by using pre-Windows?8 APIs.</p><p>However, to use stereo presentation and to change resize behavior for the flip model, applications must use the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method. Otherwise, the back-buffer contents implicitly scale to fit the presentation target size; that is, you can't turn off scaling.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::CreateSwapChain']/*"/>	
            <msdn-id>bb174537</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)">
            <summary>	
            <p>Create an adapter interface that represents a software adapter.</p>	
            </summary>	
            <param name="module"><dd>  <p>Handle to the software adapter's dll. HMODULE can be obtained with <strong>GetModuleHandle</strong> or <strong>LoadLibrary</strong>.</p> </dd></param>	
            <returns><dd>  <p>Address of a reference to an adapter (see <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong>).</p> </dd></returns>	
            <remarks>	
            <p>A software adapter is a DLL that implements the entirety of a device driver interface, plus emulation, if necessary, of kernel-mode graphics components for Windows. Details on implementing a software adapter can be found in the Windows Vista Driver Development Kit. This is a very complex development task, and is not recommended for general readers.</p><p>Calling this method will increment the module's reference count by one. The reference count can be decremented by calling <strong>FreeLibrary</strong>.</p><p>The typical calling scenario is to call <strong>LoadLibrary</strong>, pass the handle to <strong>CreateSoftwareAdapter</strong>, then immediately call <strong>FreeLibrary</strong> on the DLL and forget the DLL's <strong>HMODULE</strong>. Since the software adapter calls <strong>FreeLibrary</strong> when it is destroyed, the lifetime of the DLL will now be owned by the adapter, and the application is free of any further consideration of its lifetime.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::CreateSoftwareAdapter']/*"/>	
            <msdn-id>bb174536</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory::CreateSoftwareAdapter</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Factory.Adapters">
            <summary>
            Return an array of <see cref="T:SharpDX.DXGI.Adapter"/> available from this factory.
            </summary>
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.#ctor">
            <summary>
              Default Constructor for Factory1.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)">
            <summary>	
            Gets both adapters (video cards) with or without outputs.	
            </summary>	
            <param name="index"><para>The index of the adapter to enumerate.</para></param>	
            <returns>a reference to an <see cref="T:SharpDX.DXGI.Adapter1"/> interface at the position specified by the Adapter parameter</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:SharpDX.DXGI.Factory1"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters1 method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters1 increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters1 first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters1 next returns other adapters with outputs. EnumAdapters1 finally returns adapters without outputs.	
            </remarks>	
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapterCount1">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32,SharpDX.DXGI.Adapter1@)">
            <summary>	
            <p>Enumerates both adapters (video cards) with or without outputs.</p>	
            </summary>	
            <param name="adapter"><dd>  <p>The index of the adapter to enumerate.</p> </dd></param>	
            <param name="adapterOut"><dd>  <p>The address of a reference to an <strong><see cref="T:SharpDX.DXGI.Adapter1"/></strong> interface at the position specified by the <em>Adapter</em> parameter.   This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than or equal to the number of adapters in the local  system, or <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppAdapter</em> parameter is <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop. </p><p>When the <strong>EnumAdapters1</strong> method succeeds and fills the <em>ppAdapter</em> parameter with the address of the reference to the adapter interface, <strong>EnumAdapters1</strong> increments the adapter interface's reference count. When you finish using the  adapter interface, call the <strong>Release</strong> method to decrement the reference count before you destroy the reference.</p><p><strong>EnumAdapters1</strong> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <strong>EnumAdapters1</strong> next returns other adapters with outputs. <strong>EnumAdapters1</strong> finally returns adapters without outputs.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::EnumAdapters1']/*"/>	
            <msdn-id>ff471336</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory1::EnumAdapters1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.IsCurrent_">
            <summary>	
            <p>Informs an application of the possible need to re-enumerate adapters.</p>	
            </summary>	
            <returns><p><strong><see cref="F:SharpDX.Result.False"/></strong>, if a new adapter is becoming available or the current adapter is going away. <strong>TRUE</strong>, no adapter changes.</p><p><strong>IsCurrent</strong> returns <strong><see cref="F:SharpDX.Result.False"/></strong> to inform the calling application to re-enumerate adapters.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
            <msdn-id>ff471337</msdn-id>	
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>	
            <unmanaged-short>IDXGIFactory1::IsCurrent</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Factory1.Adapters1">
            <summary>
            Return an array of <see cref="T:SharpDX.DXGI.Adapter1"/> available from this factory.
            </summary>
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Factory1.IsCurrent">
            <summary>	
            <p>Informs an application of the possible need to re-enumerate adapters.</p>	
            </summary>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
            <msdn-id>ff471337</msdn-id>	
            <unmanaged>IsCurrent</unmanaged>	
            <unmanaged-short>IsCurrent</unmanaged-short>	
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Factory2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpDX.DXGI.Factory2"/> class.
            </summary>
            <param name="debug">True - to set the DXGI_CREATE_FACTORY_DEBUG flag.</param>
        </member>
        <member name="M:SharpDX.DXGI.Factory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory2.IsWindowedStereoEnabled_">
            <summary>	
            <p>Determines whether to use stereo mode.</p>	
            </summary>	
            <returns><p>Indicates whether to use stereo mode. <strong>TRUE</strong> indicates that you can use stereo mode; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>IsWindowedStereoEnabled</strong> always returns <see cref="F:SharpDX.Result.False"/> because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>We recommend that windowed applications call <strong>IsWindowedStereoEnabled</strong> before they attempt to use stereo.  <strong>IsWindowedStereoEnabled</strong> returns <strong>TRUE</strong> if both of the following items are true:</p><ul> <li>All adapters in the computer have drivers that are capable of stereo.  This only means that the driver is implemented to the Windows Display Driver Model (WDDM) for Windows?8 (WDDM 1.2).  However, the adapter does not necessarily have to be able to scan out stereo.</li> <li>The current desktop mode (desktop modes are mono) and system policy and hardware are configured so that the Desktop Window Manager (DWM) performs stereo composition on at least one adapter output.</li> </ul><p>The creation of a windowed stereo swap chain succeeds if the first requirement is met. However, if the adapter can't scan out stereo, the output on that adapter is reduced to mono.</p><p>The Direct3D 11.1 Simple Stereo 3D Sample shows how to add a stereoscopic 3D effect and how to respond to system stereo changes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::IsWindowedStereoEnabled']/*"/>	
            <msdn-id>hh404561</msdn-id>	
            <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>	
            <unmanaged-short>IDXGIFactory2::IsWindowedStereoEnabled</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)">
            <summary>	
            <p>Creates a swap chain that is associated with an <strong><see cref="T:System.IntPtr"/></strong> handle to the output window for the swap chain.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hWnd">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="fullscreenDescRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p><strong>CreateSwapChainForHwnd</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul><p><strong>Platform Update for Windows?7:??</strong><strong><see cref="F:SharpDX.DXGI.Scaling.None"/></strong> is not supported on Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed and causes <strong>CreateSwapChainForHwnd</strong> to return <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> when called. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p><strong>Note</strong>??Do not use this method in Windows Store apps. Instead, use <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>.</p><p>If you specify the width, height, or both (<strong>Width</strong> and <strong>Height</strong> members of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> that <em>pDesc</em> points to) of the swap chain as zero, the runtime obtains the size from the output window that the <em>hWnd</em> parameter specifies. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong> method to retrieve the assigned width or height value.</p><p>Because you can associate only one flip presentation model swap chain at a time with an <strong><see cref="T:System.IntPtr"/></strong>, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see <strong>Deferred Destruction Issues with Flip Presentation Swap Chains</strong>.</p><p>For info about how to choose a format for the swap chain's back buffer, see Converting data for the color space.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForHwnd']/*"/>	
            <msdn-id>hh404557</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForHwnd([In] IUnknown* pDevice,[In] HWND hWnd,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::CreateSwapChainForHwnd</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)">
            <summary>	
            <p>Creates a swap chain that is associated with the <strong>CoreWindow</strong> object for the output window for the swap chain.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="windowRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p><strong>CreateSwapChainForCoreWindow</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>CreateSwapChainForCoreWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p><strong>Note</strong>??Use this method in Windows Store apps rather than <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>.</p><p>If you specify the width, height, or both (<strong>Width</strong> and <strong>Height</strong> members of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> that <em>pDesc</em> points to) of the swap chain as zero, the runtime obtains the size from the output window that the <em>pWindow</em> parameter specifies. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong> method to retrieve the assigned width or height value.</p><p>Because you can associate only one flip presentation model swap chain (per layer) at a time with a <strong>CoreWindow</strong>, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see <strong>Deferred Destruction Issues with Flip Presentation Swap Chains</strong>.</p><p>For info about how to choose a format for the swap chain's back buffer, see Converting data for the color space.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForCoreWindow']/*"/>	
            <msdn-id>hh404559</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForCoreWindow([In] IUnknown* pDevice,[In] IUnknown* pWindow,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::CreateSwapChainForCoreWindow</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.GetSharedResourceAdapterLuid(System.IntPtr,System.Int64@)">
            <summary>	
            <p>Identifies the adapter on which a shared resource object was created.</p>	
            </summary>	
            <param name="hResource"><dd> <p>A handle to a shared resource object. The <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.String,SharpDX.DXGI.SharedResourceFlags,System.Nullable{SharpDX.Win32.SecurityAttributes})"/></strong> method returns this handle.</p> </dd></param>	
            <param name="luidRef"><dd> <p>A reference to a variable that receives a locally unique identifier (<strong><see cref="T:System.Int64"/></strong>) value that identifies the adapter. <strong><see cref="T:System.Int64"/></strong> is defined in Dxgi.h. An <strong><see cref="T:System.Int64"/></strong> is a 64-bit value that is guaranteed to be unique only on the operating system on which it was generated. The uniqueness of an <strong><see cref="T:System.Int64"/></strong> is guaranteed only until the operating system is restarted.</p> </dd></param>	
            <returns><p><strong>GetSharedResourceAdapterLuid</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it  identified the adapter.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>hResource</em> is invalid.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>GetSharedResourceAdapterLuid</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>You cannot share resources across adapters. Therefore, you cannot open a shared resource on an adapter other than the adapter on which the resource was created.  Call <strong>GetSharedResourceAdapterLuid</strong> before you open a shared resource to ensure that the resource was created on the appropriate adapter. To open a shared resource, call the <strong><see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/></strong> or <strong><see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::GetSharedResourceAdapterLuid']/*"/>	
            <msdn-id>hh404560</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::GetSharedResourceAdapterLuid([In] void* hResource,[Out] LUID* pLuid)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::GetSharedResourceAdapterLuid</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32,System.Int32@)">
            <summary>	
            <p>Registers an application window to receive notification messages of changes of stereo status.</p>	
            </summary>	
            <param name="windowHandle"><dd> <p>The handle of the window to send a notification message to when stereo status change occurs.</p> </dd></param>	
            <param name="wMsg"><dd> <p>Identifies the notification message to send. </p> </dd></param>	
            <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="M:SharpDX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)"/></strong> method  to unregister the notification message that <em>wMsg</em> specifies.</p> </dd></param>	
            <returns><p><strong>RegisterStereoStatusWindow</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully registered the window.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterStereoStatusWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterStereoStatusWindow']/*"/>	
            <msdn-id>hh404587</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::RegisterStereoStatusWindow</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterStereoStatusEvent(System.IntPtr,System.Int32@)">
            <summary>	
            <p>Registers to receive notification of changes in stereo status by using event signaling.</p>	
            </summary>	
            <param name="hEvent"><dd> <p>A handle to the event object that the operating system sets when notification of stereo status change occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. </p> </dd></param>	
            <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="M:SharpDX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)"/></strong> method  to unregister the notification event that <em>hEvent</em> specifies.</p> </dd></param>	
            <returns><p><strong>RegisterStereoStatusEvent</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully registered the event.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterStereoStatusEvent</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterStereoStatusEvent']/*"/>	
            <msdn-id>hh404584</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::RegisterStereoStatusEvent</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)">
            <summary>	
            <p>Unregisters a window or an event to stop it from receiving notification when stereo status changes.</p>	
            </summary>	
            <param name="dwCookie"><dd> <p>A key value for the window or event to unregister. The  <strong><see cref="M:SharpDX.DXGI.Factory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32,System.Int32@)"/></strong> or  <strong><see cref="M:SharpDX.DXGI.Factory2.RegisterStereoStatusEvent(System.IntPtr,System.Int32@)"/></strong> method returns this value. </p> </dd></param>	
            <remarks>	
            <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>UnregisterStereoStatus</strong> has no effect. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::UnregisterStereoStatus']/*"/>	
            <msdn-id>hh404593</msdn-id>	
            <unmanaged>void IDXGIFactory2::UnregisterStereoStatus([In] unsigned int dwCookie)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::UnregisterStereoStatus</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusWindow(System.IntPtr,System.Int32,System.Int32@)">
            <summary>	
            <p>Registers an application window to receive notification messages of changes of occlusion status.</p>	
            </summary>	
            <param name="windowHandle"><dd> <p>The handle of the window to send a notification message to when occlusion status change occurs.</p> </dd></param>	
            <param name="wMsg"><dd> <p>Identifies the notification message to send. </p> </dd></param>	
            <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="M:SharpDX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)"/></strong> method  to unregister the notification message that <em>wMsg</em> specifies.</p> </dd></param>	
            <returns><p><strong>RegisterOcclusionStatusWindow</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully registered the window.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>WindowHandle</em> is not a valid window handle or not the window handle that the current process owns.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterOcclusionStatusWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>Apps choose the Windows message that Windows sends when occlusion status changes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterOcclusionStatusWindow']/*"/>	
            <msdn-id>hh404581</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusWindow</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusEvent(System.IntPtr,System.Int32@)">
            <summary>	
            <p>Registers to receive notification of  changes in occlusion status by using event signaling.</p>	
            </summary>	
            <param name="hEvent"><dd> <p>A handle to the event object that the operating system sets when notification of occlusion status change occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle.</p> </dd></param>	
            <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="M:SharpDX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)"/></strong> method  to unregister the notification event that <em>hEvent</em> specifies.</p> </dd></param>	
            <returns><p><strong>RegisterOcclusionStatusEvent</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if the method successfully registered the event.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>hEvent</em> is not a valid handle or not an event handle. </li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterOcclusionStatusEvent</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>If you call <strong>RegisterOcclusionStatusEvent</strong> multiple times with the same event handle, <strong>RegisterOcclusionStatusEvent</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>.</p><p>If you call <strong>RegisterOcclusionStatusEvent</strong> multiple times with the different event handles, <strong>RegisterOcclusionStatusEvent</strong> properly registers the events.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterOcclusionStatusEvent']/*"/>	
            <msdn-id>hh404578</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusEvent</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)">
            <summary>	
            <p>Unregisters a window or an event to stop it from receiving notification when occlusion status changes.</p>	
            </summary>	
            <param name="dwCookie"><dd> <p>A key value for the window or event to unregister. The  <strong><see cref="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusWindow(System.IntPtr,System.Int32,System.Int32@)"/></strong> or  <strong><see cref="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusEvent(System.IntPtr,System.Int32@)"/></strong> method returns this value. </p> </dd></param>	
            <remarks>	
            <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>UnregisterOcclusionStatus</strong> has no effect. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::UnregisterOcclusionStatus']/*"/>	
            <msdn-id>hh404590</msdn-id>	
            <unmanaged>void IDXGIFactory2::UnregisterOcclusionStatus([In] unsigned int dwCookie)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::UnregisterOcclusionStatus</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)">
            <summary>	
            <p>Creates a swap chain that you can use to send Direct3D content into the DirectComposition API or the <strong>Windows.UI.Xaml</strong> framework to compose in a window.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p><strong>CreateSwapChainForComposition</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>CreateSwapChainForComposition</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>You can use composition swap chains with either DirectComposition?s <strong><see cref="!:SharpDX.DirectComposition.Visual"/></strong> interface or XAML?s <strong>SwapChainBackgroundPanel</strong> class. For DirectComposition, you can call the <strong><see cref="!:SharpDX.DirectComposition.Visual.SetContent"/></strong> method to set the swap chain as the content of a visual object, which then allows you to bind the swap chain to the visual tree. For XAML, the <strong>SwapChainBackgroundPanel</strong> class exposes a classic COM interface <strong><see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/></strong>. You can use the <strong><see cref="M:SharpDX.DXGI.ISwapChainBackgroundPanelNative.SetSwapChain(SharpDX.DXGI.SwapChain)"/></strong> method to bind to the XAML UI graph. For info about how to use composition swap chains with XAML?s <strong>SwapChainBackgroundPanel</strong> class, see DirectX and XAML interop.</p><p>The <strong><see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Mathematics.Interop.RawBool,SharpDX.DXGI.Output)"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetHwnd(System.IntPtr@)"/></strong>, and <strong>IDXGISwapChain::GetCoreWindow</strong> methods aren't valid on this type of swap chain. If you call any of these methods on this type of swap chain, they fail.</p><p>For info about how to choose a format for the swap chain's back buffer, see Converting data for the color space.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForComposition']/*"/>	
            <msdn-id>hh404558</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForComposition([In] IUnknown* pDevice,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory2::CreateSwapChainForComposition</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Factory2.IsWindowedStereoEnabled">
            <summary>	
            <p>Determines whether to use stereo mode.</p>	
            </summary>	
            <remarks>	
            <p>We recommend that windowed applications call <strong>IsWindowedStereoEnabled</strong> before they attempt to use stereo.  <strong>IsWindowedStereoEnabled</strong> returns <strong>TRUE</strong> if both of the following items are true:</p><ul> <li>All adapters in the computer have drivers that are capable of stereo.  This only means that the driver is implemented to the Windows Display Driver Model (WDDM) for Windows?8 (WDDM 1.2).  However, the adapter does not necessarily have to be able to scan out stereo.</li> <li>The current desktop mode (desktop modes are mono) and system policy and hardware are configured so that the Desktop Window Manager (DWM) performs stereo composition on at least one adapter output.</li> </ul><p>The creation of a windowed stereo swap chain succeeds if the first requirement is met. However, if the adapter can't scan out stereo, the output on that adapter is reduced to mono.</p><p>The Direct3D 11.1 Simple Stereo 3D Sample shows how to add a stereoscopic 3D effect and how to respond to system stereo changes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::IsWindowedStereoEnabled']/*"/>	
            <msdn-id>hh404561</msdn-id>	
            <unmanaged>IsWindowedStereoEnabled</unmanaged>	
            <unmanaged-short>IsWindowedStereoEnabled</unmanaged-short>	
            <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Factory3.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory3"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory3.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory3"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory3.GetCreationFlags">
            <summary>	
            <p>Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created.</p>	
            </summary>	
            <returns><p>The creation flags.</p></returns>	
            <remarks>	
            <p>The <strong>GetCreationFlags</strong> method returns flags that were passed to the  <strong>CreateDXGIFactory2</strong> function, or were implicitly constructed by <strong>CreateDXGIFactory</strong>, <strong>CreateDXGIFactory1</strong>,  <strong><see cref="!:SharpDX.Direct3D11.D3D11.CreateDevice"/></strong>, or <strong>D3D11CreateDeviceAndSwapChain</strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory3::GetCreationFlags']/*"/>	
            <msdn-id>dn457943</msdn-id>	
            <unmanaged>unsigned int IDXGIFactory3::GetCreationFlags()</unmanaged>	
            <unmanaged-short>IDXGIFactory3::GetCreationFlags</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Factory3.CreationFlags">
            <summary>	
            <p>Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created.</p>	
            </summary>	
            <remarks>	
            <p>The <strong>GetCreationFlags</strong> method returns flags that were passed to the  <strong>CreateDXGIFactory2</strong> function, or were implicitly constructed by <strong>CreateDXGIFactory</strong>, <strong>CreateDXGIFactory1</strong>,  <strong><see cref="!:SharpDX.Direct3D11.D3D11.CreateDevice"/></strong>, or <strong>D3D11CreateDeviceAndSwapChain</strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory3::GetCreationFlags']/*"/>	
            <msdn-id>dn457943</msdn-id>	
            <unmanaged>GetCreationFlags</unmanaged>	
            <unmanaged-short>GetCreationFlags</unmanaged-short>	
            <unmanaged>unsigned int IDXGIFactory3::GetCreationFlags()</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Factory4.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SharpDX.DXGI.Factory4"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Factory4.GetWarpAdapter">
            <summary>
            Gets the default warp adapter.
            </summary>
            <returns>The warp adapter.</returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory4.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory4"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory4.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory4"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory4.EnumAdapterByLuid(System.Int64,System.Guid,System.IntPtr@)">
            <summary>	
            <p> Outputs the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> for the specified <see cref="T:System.Int64"/>. </p>	
            </summary>	
            <param name="adapterLuid">No documentation.</param>	
            <param name="riid">No documentation.</param>	
            <param name="vAdapterOut">No documentation.</param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. See also Direct3D 12 Return Codes. </p></returns>	
            <remarks>	
            <p> For Direct3D 12, it's no longer possible to backtrack from a device to the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> that was used to create it. <strong><see cref="M:SharpDX.DXGI.Factory4.EnumAdapterByLuid(System.Int64,System.Guid,System.IntPtr@)"/></strong> enables an app to retrieve information about the adapter where a D3D12 device was created. <strong><see cref="M:SharpDX.DXGI.Factory4.EnumAdapterByLuid(System.Int64,System.Guid,System.IntPtr@)"/></strong> is designed to be paired with <strong><see cref="!:SharpDX.Direct3D12.Device.GetAdapterLuid"/></strong>. For more information, see DXGI 1.4 Improvements. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory4::EnumAdapterByLuid']/*"/>	
            <msdn-id>mt427786</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory4::EnumAdapterByLuid([In] LUID AdapterLuid,[In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory4::EnumAdapterByLuid</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory4.EnumWarpAdapter(System.Guid,System.IntPtr@)">
            <summary>	
            <p> Provides an adapter which can be provided to <see cref="!:SharpDX.Direct3D12.D3D12.CreateDevice"/> to use the WARP renderer. </p>	
            </summary>	
            <param name="riid"><dd>  <p> The globally unique identifier (<see cref="T:System.Guid"/>) of the <strong><see cref="T:SharpDX.DXGI.Factory4"/></strong> object referenced by the <em>ppvAdapter</em> parameter. </p> </dd></param>	
            <param name="vAdapterOut"><dd>  <p> The address of an <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface reference to the adapter. This parameter must not be <c>null</c>. </p> </dd></param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. See also Direct3D 12 Return Codes. </p></returns>	
            <remarks>	
            <p> For more information, see DXGI 1.4 Improvements. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory4::EnumWarpAdapter']/*"/>	
            <msdn-id>mt427787</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory4::EnumWarpAdapter([In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory4::EnumWarpAdapter</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Output1">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Output1"/></strong> interface represents an adapter output (such as a monitor).</p>	
            </summary>	
            <remarks>	
            <p>To determine  the outputs that are available from the adapter, use <strong><see cref="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)"/></strong>. To determine the specific output that the swap chain will update, use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>. You can then call <strong>QueryInterface</strong> from any  <strong><see cref="T:SharpDX.DXGI.Output"/></strong> object to obtain an <strong><see cref="T:SharpDX.DXGI.Output1"/></strong> object.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1']/*"/>	
            <msdn-id>hh404597</msdn-id>	
            <unmanaged>IDXGIOutput1</unmanaged>	
            <unmanaged-short>IDXGIOutput1</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Output">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
            </summary>	
            <remarks>	
            <p>To see the outputs available, use <strong><see cref="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput']/*"/>	
            <msdn-id>bb174546</msdn-id>	
            <unmanaged>IDXGIOutput</unmanaged>	
            <unmanaged-short>IDXGIOutput</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output.op_Explicit(System.IntPtr)~SharpDX.DXGI.Output">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Output"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)">
            <summary>	
            <p>Get a description of the output.</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to the output description (see <strong><see cref="T:SharpDX.DXGI.OutputDescription"/></strong>).</p> </dd></param>	
            <returns><p>Returns a code that indicates success or failure. <see cref="F:SharpDX.Result.Ok"/> if successful, <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>pDesc</em> is passed in as <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p> On a high DPI desktop, <strong>GetDesc</strong> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see High DPI.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
            <msdn-id>bb174548</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription[])">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDisplayModeList</strong> anymore to retrieve the matching display mode. Instead, use <strong><see cref="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)"/></strong>, which supports stereo display mode.]</p><p>Gets the display modes that match the requested format and other input options.</p>	
            </summary>	
            <param name="enumFormat">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="numModesRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <returns><p>Returns one of the following DXGI_ERROR. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> is returned (if there is not enough room for all the display modes).   If <strong>GetDisplayModeList</strong> is called from a Remote Desktop Services session (formerly Terminal Services session), <see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/> is returned.</p></returns>	
            <remarks>	
            <p>In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).</p><p>As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes.</p><pre> UINT num = 0;	
            <see cref="T:SharpDX.DXGI.Format"/> format = <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
            UINT flags         = <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... <see cref="T:SharpDX.DXGI.ModeDescription"/> * pDescs = new <see cref="T:SharpDX.DXGI.ModeDescription"/>[num];	
            pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDisplayModeList']/*"/>	
            <msdn-id>bb174549</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetDisplayModeList</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>FindClosestMatchingMode</strong> anymore to find the display mode that most closely matches the requested display mode. Instead, use <strong><see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/></strong>, which supports stereo display mode.]</p><p>Finds the display mode that most closely matches the requested display mode.</p>	
            </summary>	
            <param name="modeToMatchRef">No documentation.</param>	
            <param name="closestMatchRef">No documentation.</param>	
            <param name="concernedDeviceRef">No documentation.</param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>FindClosestMatchingMode</strong> behaves similarly to the <strong><see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/></strong> except <strong>FindClosestMatchingMode</strong> considers only the mono display modes. <strong><see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/></strong> considers only stereo modes if you set the <strong>Stereo</strong> member in the <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> structure that <em>pModeToMatch</em> points to, and considers only mono modes if <strong>Stereo</strong> is not set.</p><p> <strong><see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/></strong> returns a matched display-mode set with only stereo modes or only mono modes.	
            <strong>FindClosestMatchingMode</strong> behaves as though you specified the input mode as mono.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::FindClosestMatchingMode']/*"/>	
            <msdn-id>bb174547</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
            <unmanaged-short>IDXGIOutput::FindClosestMatchingMode</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.WaitForVerticalBlank">
            <summary>	
            <p>Halt a thread until the next vertical blank occurs.</p>	
            </summary>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>A vertical blank occurs when the raster moves from the lower right corner to the upper left corner to begin drawing the next frame.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::WaitForVBlank']/*"/>	
            <msdn-id>bb174559</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>	
            <unmanaged-short>IDXGIOutput::WaitForVBlank</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,SharpDX.Mathematics.Interop.RawBool)">
            <summary>	
            <p>Takes ownership of an output.</p>	
            </summary>	
            <param name="deviceRef"><dd>  <p>A reference to the <strong><see cref="T:SharpDX.ComObject"/></strong> interface of a device (such as an <strong>ID3D10Device</strong>).</p> </dd></param>	
            <param name="exclusive"><dd>  <p>Set to <strong>TRUE</strong> to enable other threads or applications to take ownership of the device; otherwise, set to <strong><see cref="F:SharpDX.Result.False"/></strong>.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p>When you are finished with the output, call <strong><see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/></strong>.</p><p><strong>TakeOwnership</strong> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::TakeOwnership']/*"/>	
            <msdn-id>bb174558</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[In] BOOL Exclusive)</unmanaged>	
            <unmanaged-short>IDXGIOutput::TakeOwnership</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.ReleaseOwnership">
            <summary>	
            <p>Releases ownership of the output.</p>	
            </summary>	
            <remarks>	
            <p>If you are not using a swap chain, get access to an output by calling <strong><see cref="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,SharpDX.Mathematics.Interop.RawBool)"/></strong> and release it when you are finished by calling <strong><see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/></strong>. An application that uses a swap chain will typically not call either of these methods.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::ReleaseOwnership']/*"/>	
            <msdn-id>bb174554</msdn-id>	
            <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>	
            <unmanaged-short>IDXGIOutput::ReleaseOwnership</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetGammaControlCapabilities(SharpDX.DXGI.GammaControlCapabilities@)">
            <summary>	
            <p>Gets a description of the gamma-control capabilities.</p>	
            </summary>	
            <param name="gammaCapsRef"><dd>  <p>A reference to a  description of the gamma-control capabilities (see <strong><see cref="T:SharpDX.DXGI.GammaControlCapabilities"/></strong>).</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
            <msdn-id>bb174553</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetGammaControlCapabilities</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.SetGammaControl(SharpDX.DXGI.GammaControl@)">
            <summary>	
            <p>Sets the gamma controls.</p>	
            </summary>	
            <param name="arrayRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.GammaControl"/></strong> structure that describes the gamma curve to set.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::SetGammaControl']/*"/>	
            <msdn-id>bb174557</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
            <unmanaged-short>IDXGIOutput::SetGammaControl</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetGammaControl(SharpDX.DXGI.GammaControl@)">
            <summary>	
            <p>Gets the gamma control settings.</p>	
            </summary>	
            <param name="arrayRef"><dd>  <p>An array of gamma control settings (see <strong><see cref="T:SharpDX.DXGI.GammaControl"/></strong>).</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
            <msdn-id>bb174552</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetGammaControl</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.SetDisplaySurface(SharpDX.DXGI.Surface)">
            <summary>	
            <p>Changes the display mode.</p>	
            </summary>	
            <param name="scanoutSurfaceRef"><dd>  <p>A reference to a surface (see <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>) used for rendering an image to the screen. The surface must have been created as a back buffer (DXGI_USAGE_BACKBUFFER).</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong><see cref="M:SharpDX.DXGI.Output.SetDisplaySurface(SharpDX.DXGI.Surface)"/></strong> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.</p><p>This method should only be called between <strong><see cref="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,SharpDX.Mathematics.Interop.RawBool)"/></strong> and <strong><see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/></strong> calls.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::SetDisplaySurface']/*"/>	
            <msdn-id>bb174556</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>	
            <unmanaged-short>IDXGIOutput::SetDisplaySurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDisplaySurfaceData</strong> anymore to retrieve the current display surface. Instead, use <strong><see cref="M:SharpDX.DXGI.Output1.GetDisplaySurfaceData1(SharpDX.DXGI.Resource)"/></strong>, which supports stereo display mode.]</p><p>Gets a copy of the current display surface.</p>	
            </summary>	
            <param name="destinationRef">No documentation.</param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> can only be called when an output is in full-screen mode. If the method succeeds, DXGI fills the destination surface.</p><p>Use <strong><see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/></strong> to determine the size (width and height) of the output when you want to allocate space for the destination surface. This is true regardless of target monitor rotation. A destination surface created by a graphics component (such as Direct3D 10) must be created with CPU-write permission (see D3D10_CPU_ACCESS_WRITE). Other surfaces should be created with CPU read-write permission (see D3D10_CPU_ACCESS_READ_WRITE). This method will modify the surface data to fit the destination surface (stretch, shrink, convert format, rotate). The stretch and shrink is performed with point-sampling.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDisplaySurfaceData']/*"/>	
            <msdn-id>bb174550</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetDisplaySurfaceData</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)">
            <summary>	
            <p>Gets statistics about recently rendered frames.</p>	
            </summary>	
            <param name="statsRef"><dd>  <p>A reference to frame statistics (see <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong>).</p> </dd></param>	
            <returns><p>If this function succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it might return <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>.</p></returns>	
            <remarks>	
            <p>This API is similar to <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong>.</p><p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
            <msdn-id>bb174551</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetFrameStatistics</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetClosestMatchingMode(SharpDX.ComObject,SharpDX.DXGI.ModeDescription,SharpDX.DXGI.ModeDescription@)">
            <summary>	
            Find the display mode that most closely matches the requested display mode.	
            </summary>	
            <remarks>	
            Direct3D devices require UNORM formats. This method finds the closest matching available display mode to the mode specified in pModeToMatch. Similarly ranked fields (i.e. all specified, or all unspecified, etc) are resolved in the following order.  ScanlineOrdering Scaling Format Resolution RefreshRate  When determining the closest value for a particular field, previously matched fields are used to filter the display mode list choices, and  other fields are ignored. For example, when matching Resolution, the display mode list will have already been filtered by a certain ScanlineOrdering,  Scaling, and Format, while RefreshRate is ignored. This ordering doesn't define the absolute ordering for every usage scenario of FindClosestMatchingMode, because  the application can choose some values initially, effectively changing the order that fields are chosen. Fields of the display mode are matched one at a time, generally in a specified order. If a field is unspecified, FindClosestMatchingMode gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, then the default desktop output is used to find values. If an application uses a fully unspecified  display mode, FindClosestMatchingMode will typically return a display mode that matches the desktop settings for this output.   Unspecified fields are lower priority than specified fields and will be resolved later than specified fields. 	
            </remarks>	
            <param name="device">A reference to the Direct3D device interface. If this parameter is NULL, only modes whose format matches that of pModeToMatch will  be returned; otherwise, only those formats that are supported for scan-out by the device are returned. </param>
            <param name="modeToMatch">The desired display mode (see <see cref="T:SharpDX.DXGI.ModeDescription"/>). Members of DXGI_MODE_DESC can be unspecified indicating no preference for  that member.  A value of 0 for Width or Height indicates the value is unspecified.  If either Width or  Height are 0 both must be 0.  A numerator and denominator of 0 in RefreshRate indicate it is unspecified. Other members  of DXGI_MODE_DESC have enumeration values indicating the member is unspecified.  If pConnectedDevice is NULL Format cannot be DXGI_FORMAT_UNKNOWN. </param>
            <param name="closestMatch">The mode that most closely matches pModeToMatch. </param>
            <returns>Returns one of the following <see cref="!:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)">
            <summary>	
            Gets the display modes that match the requested format and other input options.	
            </summary>	
            <remarks>	
            In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor). As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes. 	
            <code> UINT num = 0;	
            DXGI_FORMAT format = DXGI_FORMAT_R32G32B32A32_FLOAT;	
            UINT flags         = DXGI_ENUM_MODES_INTERLACED; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... DXGI_MODE_DESC * pDescs = new DXGI_MODE_DESC[num];	
            pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); </code>	
            	
             	
            </remarks>	
            <param name="format">The color format (see <see cref="T:SharpDX.DXGI.Format"/>). </param>
            <param name="flags">format for modes to include (see {{DXGI_ENUM_MODES}}). DXGI_ENUM_MODES_SCALING needs to be specified to expose the display modes that require scaling.  Centered modes, requiring no  scaling and corresponding directly to the display output, are enumerated by default. </param>
            <returns>Returns a list of display modes (see <see cref="T:SharpDX.DXGI.ModeDescription"/>); </returns>
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([None] DXGI_FORMAT EnumFormat,[None] int Flags,[InOut] int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.Description">
            <summary>	
            <p>Get a description of the output.</p>	
            </summary>	
            <remarks>	
            <p> On a high DPI desktop, <strong>GetDesc</strong> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see High DPI.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
            <msdn-id>bb174548</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.GammaControlCapabilities">
            <summary>	
            <p>Gets a description of the gamma-control capabilities.</p>	
            </summary>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
            <msdn-id>bb174553</msdn-id>	
            <unmanaged>GetGammaControlCapabilities</unmanaged>	
            <unmanaged-short>GetGammaControlCapabilities</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.GammaControl">
            <summary>	
            <p>Gets or sets the gamma control settings.</p>	
            </summary>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
            <msdn-id>bb174552</msdn-id>	
            <unmanaged>GetGammaControl / SetGammaControl</unmanaged>	
            <unmanaged-short>GetGammaControl</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.FrameStatistics">
            <summary>	
            <p>Gets statistics about recently rendered frames.</p>	
            </summary>	
            <remarks>	
            <p>This API is similar to <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong>.</p><p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
            <msdn-id>bb174551</msdn-id>	
            <unmanaged>GetFrameStatistics</unmanaged>	
            <unmanaged-short>GetFrameStatistics</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)">
            <summary>	
            <p>[This documentation is preliminary and is subject to change.]</p><p><strong>Applies to: </strong>desktop apps | Metro style apps</p><p>Gets the display modes that match the requested format and other input options.</p>	
            </summary>	
            <param name="enumFormat"><dd> <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the color format.</p> </dd></param>	
            <param name="flags"><dd> <p>A combination of DXGI_ENUM_MODES-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for display modes to include. You must specify <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling"/> to expose the display modes that require scaling.  Centered modes that require no  scaling and correspond directly to the display output are enumerated by default.</p> </dd></param>	
            <returns>A list of display modes</returns>	
            <remarks>	
            <p><strong>GetDisplayModeList1</strong> is updated from  <strong>GetDisplayModeList</strong> to return a list of <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> structures, which are updated mode descriptions.  <strong>GetDisplayModeList</strong> behaves as though it calls <strong>GetDisplayModeList1</strong> because  <strong>GetDisplayModeList</strong> can return all of the modes that are specified by DXGI_ENUM_MODES, including stereo mode.  However, <strong>GetDisplayModeList</strong> returns a list of <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> structures, which are the former mode descriptions and do not indicate stereo mode.</p><p>The <strong>GetDisplayModeList1</strong> method does not enumerate stereo modes unless you specify the <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/> flag in the <em>Flags</em> parameter.  If you specify <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/>, stereo modes are included in the list of returned modes that the <em>pDesc</em> parameter points to.  In other words, the method returns both stereo and mono modes.</p><p>In general, when you switch from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth, and refresh rate of the swap chain. To exercise more control over the display mode, use <strong>GetDisplayModeList1</strong> to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).</p><p>The following example code shows that you need to call <strong>GetDisplayModeList1</strong> twice. First call <strong>GetDisplayModeList1</strong> to get the number of modes available, and second call <strong>GetDisplayModeList1</strong> to return a description of the modes.</p><pre><code> UINT num = 0;	
            <see cref="T:SharpDX.DXGI.Format"/> format = <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
            UINT flags         = <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, 0); ... <see cref="T:SharpDX.DXGI.ModeDescription1"/> * pDescs = new <see cref="T:SharpDX.DXGI.ModeDescription1"/>[num];	
            pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, pDescs); </code></pre>	
            </remarks>	
            <msdn-id>hh404606</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutput1::GetDisplayModeList1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Output1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Output1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription1[])">
            <summary>	
            <p>Gets the display modes that match the requested format and other input options.</p>	
            </summary>	
            <param name="enumFormat"><dd> <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the color format.</p> </dd></param>	
            <param name="flags"><dd> <p>A combination of DXGI_ENUM_MODES-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for display modes to include. You must specify <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling"/> to expose the display modes that require scaling.  Centered modes that require no  scaling and correspond directly to the display output are enumerated by default.</p> </dd></param>	
            <param name="numModesRef"><dd> <p>A reference to a variable that receives the number of display modes that <strong>GetDisplayModeList1</strong> returns in the memory block to which <em>pDesc</em> points. Set <em>pDesc</em> to <strong><c>null</c></strong> so that <em>pNumModes</em> returns the number of display modes that match the format and the options. Otherwise, <em>pNumModes</em> returns the number of display modes returned in <em>pDesc</em>.</p> </dd></param>	
            <param name="descRef"><dd> <p>A reference to a list of display modes; set to <strong><c>null</c></strong> to get the number of display modes.</p> </dd></param>	
            <returns><p>Returns one of the error codes described in the DXGI_ERROR topic. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> is returned (if there is not enough room for all the display modes).</p></returns>	
            <remarks>	
            <p><strong>GetDisplayModeList1</strong> is updated from  <strong>GetDisplayModeList</strong> to return a list of <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> structures, which are updated mode descriptions.  <strong>GetDisplayModeList</strong> behaves as though it calls <strong>GetDisplayModeList1</strong> because  <strong>GetDisplayModeList</strong> can return all of the modes that are specified by DXGI_ENUM_MODES, including stereo mode.  However, <strong>GetDisplayModeList</strong> returns a list of <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> structures, which are the former mode descriptions and do not indicate stereo mode.</p><p>The <strong>GetDisplayModeList1</strong> method does not enumerate stereo modes unless you specify the <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/> flag in the <em>Flags</em> parameter.  If you specify <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/>, stereo modes are included in the list of returned modes that the <em>pDesc</em> parameter points to.  In other words, the method returns both stereo and mono modes.</p><p>In general, when you switch from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth, and refresh rate of the swap chain. To exercise more control over the display mode, use <strong>GetDisplayModeList1</strong> to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).</p><p>The following example code shows that you need to call <strong>GetDisplayModeList1</strong> twice. First call <strong>GetDisplayModeList1</strong> to get the number of modes available, and second call <strong>GetDisplayModeList1</strong> to return a description of the modes.</p><pre> UINT num = 0;	
            <see cref="T:SharpDX.DXGI.Format"/> format = <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
            UINT flags         = <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, 0); ... <see cref="T:SharpDX.DXGI.ModeDescription1"/> * pDescs = new <see cref="T:SharpDX.DXGI.ModeDescription1"/>[num];	
            pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, pDescs); </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::GetDisplayModeList1']/*"/>	
            <msdn-id>hh404606</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutput1::GetDisplayModeList1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)">
            <summary>	
            <p>Finds the display mode that most closely matches the requested display mode.</p>	
            </summary>	
            <param name="modeToMatchRef"><dd> <p>A reference to the <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> structure that describes the display mode to match. Members of <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> can be unspecified, which indicates no preference for  that member.  A value of 0 for <strong>Width</strong> or <strong>Height</strong> indicates that the value is unspecified.  If either <strong>Width</strong> or  <strong>Height</strong> is 0, both must be 0.  A numerator and denominator of 0 in <strong>RefreshRate</strong> indicate it is unspecified. Other members  of <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> have enumeration values that indicate that the member is unspecified.  If <em>pConcernedDevice</em> is <strong><c>null</c></strong>, the <strong>Format</strong> member of <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> cannot be <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong>.</p> </dd></param>	
            <param name="closestMatchRef"><dd> <p>A reference to the <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> structure that receives a description of the display mode that most closely matches the display mode described at <em>pModeToMatch</em>.</p> </dd></param>	
            <param name="concernedDeviceRef"><dd> <p>A reference to the Direct3D device interface. If this parameter is <strong><c>null</c></strong>, <strong>FindClosestMatchingMode1</strong> returns only modes whose format matches that of <em>pModeToMatch</em>; otherwise, <strong>FindClosestMatchingMode1</strong> returns only those formats that are supported for scan-out by the device. For info about the formats that are supported for scan-out by the device at each feature level, see Hardware Support for Direct3D 10 Formats, Hardware Support for Direct3D 10.1 Formats, Hardware Support for Direct3D 10Level9 Formats, Hardware Support for Direct3D 11 Formats, and Hardware Support for Direct3D 11.1 Formats.</p> </dd></param>	
            <returns><p>Returns one of the error codes described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p>Direct3D devices require UNORM formats.</p><p><strong>FindClosestMatchingMode1</strong> finds the closest matching available display mode to the mode that you specify in <em>pModeToMatch</em>.</p><p>If you set the <strong>Stereo</strong> member in the <strong><see cref="T:SharpDX.DXGI.ModeDescription1"/></strong> structure to which <em>pModeToMatch</em> points to specify a stereo mode as input, <strong>FindClosestMatchingMode1</strong> considers only stereo modes. <strong>FindClosestMatchingMode1</strong> considers only mono modes if <strong>Stereo</strong> is not set.</p><p><strong>FindClosestMatchingMode1</strong> resolves similarly ranked members of display modes (that is, all specified, or all unspecified, and so on) in the following order:</p><ol> <li><strong>ScanlineOrdering</strong></li> <li><strong>Scaling</strong></li> <li><strong>Format</strong></li> <li><strong>Resolution</strong></li> <li><strong>RefreshRate</strong></li> </ol><p>When <strong>FindClosestMatchingMode1</strong> determines the closest value for a particular member, it uses previously matched members to filter the display mode list choices, and  ignores other members. For example, when <strong>FindClosestMatchingMode1</strong> matches <strong>Resolution</strong>, it already filtered the display mode list by a certain <strong>ScanlineOrdering</strong>,  <strong>Scaling</strong>, and <strong>Format</strong>, while it ignores <strong>RefreshRate</strong>. This ordering doesn't define the absolute ordering for every usage scenario of <strong>FindClosestMatchingMode1</strong>, because  the application can choose some values initially, which effectively changes the order of resolving members.</p><p><strong>FindClosestMatchingMode1</strong> matches members of the display mode one at a time, generally in a specified order.</p><p>If a member is unspecified, <strong>FindClosestMatchingMode1</strong> gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, <strong>FindClosestMatchingMode1</strong> uses the default desktop output to find values. If an application uses a fully unspecified  display mode, <strong>FindClosestMatchingMode1</strong> typically returns a display mode that matches the desktop settings for this output.   Because unspecified members are lower priority than specified members, <strong>FindClosestMatchingMode1</strong> resolves unspecified members later than specified members.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::FindClosestMatchingMode1']/*"/>	
            <msdn-id>hh404603</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput1::FindClosestMatchingMode1([In] const DXGI_MODE_DESC1* pModeToMatch,[Out] DXGI_MODE_DESC1* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
            <unmanaged-short>IDXGIOutput1::FindClosestMatchingMode1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.GetDisplaySurfaceData1(SharpDX.DXGI.Resource)">
            <summary>	
            <p>Copies the display surface (front buffer) to a user-provided resource.</p>	
            </summary>	
            <param name="destinationRef"><dd> <p>A reference to a resource interface that represents the resource to which <strong>GetDisplaySurfaceData1</strong> copies the display surface.</p> </dd></param>	
            <returns><p>Returns one of the error codes described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p><strong>GetDisplaySurfaceData1</strong> is similar to <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> except <strong>GetDisplaySurfaceData1</strong> takes an <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> and <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> takes an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>.</p><p><strong>GetDisplaySurfaceData1</strong> returns an error if the input resource is not a 2D texture (represented by the <strong><see cref="!:SharpDX.Direct3D11.Texture2D"/></strong> interface) with an array size (<strong>ArraySize</strong> member of the <strong><see cref="!:SharpDX.Direct3D11.Texture2DDescription"/></strong> structure) that is equal to the swap chain buffers.</p><p>The original <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> and the updated <strong>GetDisplaySurfaceData1</strong> behave exactly the same. <strong>GetDisplaySurfaceData1</strong> was required because textures with an array size equal to 2 (<strong>ArraySize</strong> = 2) do not implement <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>.</p><p> You can call <strong>GetDisplaySurfaceData1</strong> only when an output is in full-screen mode. If <strong>GetDisplaySurfaceData1</strong> succeeds, it fills the destination resource.</p><p>Use <strong><see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/></strong> to determine the size (width and height) of the output when you want to allocate space for the destination resource. This is true regardless of target monitor rotation. A destination resource created by a graphics component (such as Direct3D 11) must be created with CPU write permission (see <strong><see cref="!:SharpDX.Direct3D11.CpuAccessFlags.Write"/></strong>). Other surfaces can be created with CPU read-write permission (<strong><see cref="!:SharpDX.Direct3D11.CpuAccessFlags.Read"/></strong> | <strong><see cref="!:SharpDX.Direct3D11.CpuAccessFlags.Write"/></strong>). <strong>GetDisplaySurfaceData1</strong> modifies the surface data to fit the destination resource (stretch, shrink, convert format, rotate). <strong>GetDisplaySurfaceData1</strong> performs the stretch and shrink with point sampling. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::GetDisplaySurfaceData1']/*"/>	
            <msdn-id>hh404609</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput1::GetDisplaySurfaceData1([In] IDXGIResource* pDestination)</unmanaged>	
            <unmanaged-short>IDXGIOutput1::GetDisplaySurfaceData1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.DuplicateOutput(SharpDX.ComObject)">
            <summary>	
            <p>Creates a desktop duplication interface from the <strong><see cref="T:SharpDX.DXGI.Output1"/></strong> interface that represents an adapter output.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <remarks>	
            <p>If an application wants to duplicate the entire desktop, it must create a desktop duplication interface on each active output on the desktop. This interface does not provide an explicit way to synchronize the timing of each output image. Instead, the application must use the time stamp of each output, and then determine how to combine the images.</p><p>For <strong>DuplicateOutput</strong> to succeed, you must create <em>pDevice</em> from <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> or a later version of a DXGI factory interface that inherits from <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>.</p><p>If the current mode is a stereo mode, the desktop duplication interface provides the image for the left stereo image only.</p><p>By default, only four processes can use a <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface at the same time within a single session. A process can have only one desktop duplication interface on a single desktop output; however, that process can have a desktop duplication interface for each output that is part of the desktop. </p><p>If <strong>DuplicateOutput</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/>, the application can wait for system notification of desktop switches and mode changes and then call <strong>DuplicateOutput</strong> again after such a notification occurs.  For more information, see information in desktop switch (<strong>EVENT_SYSTEM_DESKTOPSWITCH</strong>) and mode change notification (<strong>WM_DISPLAYCHANGE</strong>). </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::DuplicateOutput']/*"/>	
            <msdn-id>hh404600</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput1::DuplicateOutput([In] IUnknown* pDevice,[Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>	
            <unmanaged-short>IDXGIOutput1::DuplicateOutput</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.NamespaceDoc">
            <summary>
            The <see cref="N:SharpDX.DXGI"/> namespace provides a managed DXGI API.
            </summary>
            <msdn-id>hh404534</msdn-id>
            <unmanaged>DXGI</unmanaged>	
            <unmanaged-short>DXGI</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Output2">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
            </summary>	
            <remarks>	
            <p>To see the outputs available, use <strong><see cref="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput2']/*"/>	
            <msdn-id>bb174546</msdn-id>	
            <unmanaged>IDXGIOutput2</unmanaged>	
            <unmanaged-short>IDXGIOutput2</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output2.op_Explicit(System.IntPtr)~SharpDX.DXGI.Output2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Output2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Output2.SupportsOverlays_">
            <summary>	
            <p>Queries an adapter output for multiplane overlay support. If this API returns ?TRUE?, multiple swap chain composition takes place in a performant manner using overlay hardware. If this API returns false, apps should avoid using foreground swap chains (that is, avoid using swap chains created with the <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.ForegroundLayer"/></strong> flag).</p>	
            </summary>	
            <returns><p>TRUE if the output adapter is the primary adapter and it supports multiplane overlays, otherwise returns <see cref="F:SharpDX.Result.False"/>.</p></returns>	
            <remarks>	
            <p>See <strong>CreateSwapChainForCoreWindow</strong> for info on creating a foreground swap chain.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput2::SupportsOverlays']/*"/>	
            <msdn-id>dn280411</msdn-id>	
            <unmanaged>BOOL IDXGIOutput2::SupportsOverlays()</unmanaged>	
            <unmanaged-short>IDXGIOutput2::SupportsOverlays</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Output2.SupportsOverlays">
            <summary>	
            <p>[This documentation is preliminary and is subject to change.]</p><p>Queries an adapter output for multiplane overlay support.</p>	
            </summary>	
            <returns><p>TRUE if the output adapter is the primary adapter and it supports multiplane overlays, otherwise returns <see cref="F:SharpDX.Result.False"/>.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput2::SupportsOverlays']/*"/>	
            <msdn-id>dn280411</msdn-id>	
            <unmanaged>BOOL IDXGIOutput2::SupportsOverlays()</unmanaged>	
            <unmanaged-short>IDXGIOutput2::SupportsOverlays</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Surface2">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface extends the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface by adding support for subresource surfaces and getting a handle to a shared resource.</p>	
            </summary>	
            <remarks>	
            <p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong>. Then, call <strong>QueryInterface</strong> on the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> object that <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> returns to retrieve the <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface.</p><p>Any object that supports <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> also supports <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong>.</p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface when you call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong>.</p><p>You can call the <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSubresourceSurface(System.Int32,SharpDX.DXGI.Surface2)"/></strong> method to create an <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface that refers to one subresource of a stereo resource.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface2']/*"/>	
            <msdn-id>hh404628</msdn-id>	
            <unmanaged>IDXGISurface2</unmanaged>	
            <unmanaged-short>IDXGISurface2</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Surface1">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface extends the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong>. Then, call <strong>QueryInterface</strong> on the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> object that <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> returns to retrieve the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface.</p><p>Any object that supports <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> also supports <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong>.</p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface when you call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong>ID3D10Device::CreateTexture2D</strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1']/*"/>	
            <msdn-id>ff471343</msdn-id>	
            <unmanaged>IDXGISurface1</unmanaged>	
            <unmanaged-short>IDXGISurface1</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Surface">
            <summary>	
            <p>The  <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface implements methods for image-data objects.</p>	
            </summary>	
            <remarks>	
            <p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong>. </p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when you call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong>ID3D10Device::CreateTexture2D</strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface']/*"/>	
            <msdn-id>bb174565</msdn-id>	
            <unmanaged>IDXGISurface</unmanaged>	
            <unmanaged-short>IDXGISurface</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DeviceChild">
            <summary>	
            <p>Inherited from objects that are tied to the device so that they can retrieve a reference to it.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDeviceSubObject']/*"/>	
            <msdn-id>bb174528</msdn-id>	
            <unmanaged>IDXGIDeviceSubObject</unmanaged>	
            <unmanaged-short>IDXGIDeviceSubObject</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.GetDevice``1">
            <summary>
            Retrieves the device.
            </summary>
            <typeparam name="T">The interface that is returned can be any interface published by the device.</typeparam>
            <returns>The associated device. </returns>
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] GUID* riid,[Out] void** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.op_Explicit(System.IntPtr)~SharpDX.DXGI.DeviceChild">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.DeviceChild"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.GetDevice(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Retrieves the device.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The reference id for the device.</p> </dd></param>	
            <param name="deviceOut"><dd>  <p>The address of a reference to the device.</p> </dd></param>	
            <returns><p>A code that indicates success or failure (see DXGI_ERROR).</p></returns>	
            <remarks>	
            <p>The type of interface that is returned can be any interface published by the device. For example, it could be an <see cref="T:SharpDX.DXGI.Device"/> * called pDevice, and therefore the REFIID would be obtained by calling __uuidof(pDevice).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDeviceSubObject::GetDevice']/*"/>	
            <msdn-id>bb174529</msdn-id>	
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid,[Out] void** ppDevice)</unmanaged>	
            <unmanaged-short>IDXGIDeviceSubObject::GetDevice</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.DeviceChild.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
            <value>
            The debug name.
            </value>
        </member>
        <member name="M:SharpDX.DXGI.Surface.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.op_Explicit(System.IntPtr)~SharpDX.DXGI.Surface">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Surface"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Surface.GetDescription(SharpDX.DXGI.SurfaceDescription@)">
            <summary>	
            <p>Get a description of the surface.</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to the surface description (see <strong><see cref="T:SharpDX.DXGI.SurfaceDescription"/></strong>).</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
            <msdn-id>bb174566</msdn-id>	
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGISurface::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)">
            <summary>	
            <p>Get a reference to the data contained in the surface, and deny GPU access to the surface.</p>	
            </summary>	
            <param name="lockedRectRef"><dd>  <p>A reference to the surface data (see <strong><see cref="T:SharpDX.DXGI.MappedRectangle"/></strong>).</p> </dd></param>	
            <param name="mapFlags"><dd>  <p>CPU read-write flags. These flags can be combined with a logical OR. </p> <ul> <li><see cref="F:SharpDX.DXGI.MapFlags.Read"/> - Allow CPU read access.</li> <li><see cref="F:SharpDX.DXGI.MapFlags.Write"/> - Allow CPU write access.</li> <li><see cref="F:SharpDX.DXGI.MapFlags.Discard"/> - Discard the previous contents of a resource when it is mapped.</li> </ul> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p>Use <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> to access a surface from the CPU. To release a mapped surface (and allow GPU access) call <strong><see cref="M:SharpDX.DXGI.Surface.Unmap"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::Map']/*"/>	
            <msdn-id>bb174567</msdn-id>	
            <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[In] unsigned int MapFlags)</unmanaged>	
            <unmanaged-short>IDXGISurface::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Unmap">
            <summary>	
            <p>Invalidate the reference to the surface retrieved by <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> and re-enable GPU access to the resource.</p>	
            </summary>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::Unmap']/*"/>	
            <msdn-id>bb174568</msdn-id>	
            <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>	
            <unmanaged-short>IDXGISurface::Unmap</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MapFlags)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <returns>A <see cref="T:SharpDX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MapFlags,SharpDX.DataStream@)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <param name="dataStream">Stream to contain the surface data.</param>
            <returns>A <see cref="T:SharpDX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:SharpDX.DXGI.Surface.FromSwapChain(SharpDX.DXGI.SwapChain,System.Int32)">
            <summary>
            Gets a swap chain back buffer.
            </summary>
            <param name="swapChain">The swap chain to get the buffer from.</param>
            <param name="index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="P:SharpDX.DXGI.Surface.Description">
            <summary>	
            <p>Get a description of the surface.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
            <msdn-id>bb174566</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Surface1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Surface1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Surface1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Surface1.GetDC(SharpDX.Mathematics.Interop.RawBool)">
            <summary>	
            <p>Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).</p>	
            </summary>	
            <param name="discard"><dd>  <p>A Boolean value that specifies whether to preserve Direct3D contents in the GDI DC. <strong>TRUE</strong> directs the runtime not to preserve Direct3D contents in the GDI DC; that is, the runtime discards the Direct3D contents. <strong><see cref="F:SharpDX.Result.False"/></strong> guarantees that Direct3D contents are available in the GDI DC.</p> </dd></param>	
            <returns><dd>  <p>A reference to an <strong><see cref="T:System.IntPtr"/></strong> handle that represents the current device context for GDI rendering.</p> </dd></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>After you use the <strong>GetDC</strong> method to retrieve a DC, you can render to the DXGI surface by using GDI.   The <strong>GetDC</strong> method readies the surface for GDI rendering and allows inter-operation between DXGI and GDI technologies.  </p><p>Keep the following in mind when using this method:</p><ul> <li>You must create the surface by using the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/></strong> flag for a surface or by using the <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong> flag for swap chains,  otherwise this method fails.</li> <li>You must release the device and call the <strong><see cref="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Mathematics.Interop.RawRectangle})"/></strong> method before you issue any new Direct3D commands.</li> <li>This method fails if an outstanding DC has already been created by this method.</li> <li>The format for the surface or swap chain must be <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> or <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</li> <li>On <strong>GetDC</strong>, the render target in the output merger of the Direct3D pipeline is unbound from the surface.   You must call the <strong><see cref="!:SharpDX.Direct3D11.OutputMergerStage.SetRenderTargets"/></strong> method on the device prior to Direct3D rendering after GDI rendering.</li> <li>Prior to resizing buffers you must release all outstanding DCs.</li> </ul><p> You can also call <strong>GetDC</strong> on the back buffer at index 0 of a swap chain by obtaining an <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> from the swap chain.   The following code illustrates the process.</p><pre> <see cref="T:SharpDX.DXGI.SwapChain"/>* g_pSwapChain = <c>null</c>;	
            <see cref="T:SharpDX.DXGI.Surface1"/>* g_pSurface1 = <c>null</c>;	
            ...	
            //Setup the device and and swapchain	
            g_pSwapChain-&gt;GetBuffer(0, __uuidof(<see cref="T:SharpDX.DXGI.Surface1"/>), (void**) &amp;g_pSurface1);	
            g_pSurface1-&gt;GetDC( <see cref="F:SharpDX.Result.False"/>, &amp;g_hDC );	
            ...      	
            //Draw on the DC using GDI	
            ...	
            //When finish drawing release the DC	
            g_pSurface1-&gt;ReleaseDC( <c>null</c> ); </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1::GetDC']/*"/>	
            <msdn-id>ff471345</msdn-id>	
            <unmanaged>HRESULT IDXGISurface1::GetDC([In] BOOL Discard,[Out] HDC* phdc)</unmanaged>	
            <unmanaged-short>IDXGISurface1::GetDC</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Mathematics.Interop.RawRectangle})">
            <summary>	
            <p>Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.</p>	
            </summary>	
            <param name="dirtyRectRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve.  This area is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region.  If you pass in <strong><c>null</c></strong>, <strong>ReleaseDC</strong> considers the whole surface as dirty.  Otherwise, <strong>ReleaseDC</strong> uses the area specified by the <see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/> as a performance hint to indicate what areas have been manipulated by GDI rendering.</p> <p>You can pass a reference to an empty <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure (a rectangle with no position or area) if you didn't change any content.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>ReleaseDC</strong> method to release the DC and indicate that your application finished all GDI rendering to this surface.   You must call the <strong>ReleaseDC</strong> method before you can use Direct3D to perform additional rendering.</p><p>Prior to resizing buffers you must release all outstanding DCs.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1::ReleaseDC']/*"/>	
            <msdn-id>ff471346</msdn-id>	
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>	
            <unmanaged-short>IDXGISurface1::ReleaseDC</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D. The whole surface to be considered dirty.
            </summary>	
            <remarks>	
            Use the ReleaseDC method to release the DC and indicate that your application has finished all GDI rendering to this surface.   You must call the ReleaseDC method before you perform addition rendering using Direct3D. Prior to resizing buffers all outstanding DCs must be released. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC(SharpDX.Mathematics.Interop.RawRectangle)">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D.	
            </summary>	
            <remarks>	
            Use the ReleaseDC method to release the DC and indicate that your application has finished all GDI rendering to this surface.   You must call the ReleaseDC method before you perform addition rendering using Direct3D. Prior to resizing buffers all outstanding DCs must be released. 	
            </remarks>	
            <param name="dirtyRect">A reference to a <see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you have used for GDI rendering and that you want to preserve.  This is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region. The area specified by the <see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/> will be used as a performance hint to indicate what areas have been manipulated by GDI rendering. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Surface2.#ctor(SharpDX.DXGI.Resource1,System.Int32)">
            <summary>
            Initializes a new sub resource surface instance of <see cref="T:SharpDX.DXGI.Surface2"/> class.
            </summary>
            <param name="resource"></param>
            <param name="index"></param>
        </member>
        <member name="M:SharpDX.DXGI.Surface2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface2.op_Explicit(System.IntPtr)~SharpDX.DXGI.Surface2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Surface2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Surface2.GetResource(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>	
            <p>Gets the parent resource and subresource index that support a subresource surface.</p>	
            </summary>	
            <param name="riid"><dd> <p>The globally unique identifier (<see cref="T:System.Guid"/>)  of the requested interface type.</p> </dd></param>	
            <param name="parentResourceOut"><dd> <p>A reference to a buffer that receives a reference to the parent resource object for the subresource surface.</p> </dd></param>	
            <param name="subresourceIndexRef"><dd> <p>A reference to a variable that receives the index of the subresource surface.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:</p><ul> <li>E_NOINTERFACE if the object does not implement the <see cref="T:System.Guid"/> that the <em>riid</em> parameter specifies.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p>For subresource surface objects that the <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSubresourceSurface(System.Int32,SharpDX.DXGI.Surface2)"/></strong> method creates, <strong>GetResource</strong> simply returns the values that were used to create the subresource surface.</p><p>Current objects that implement <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> are either resources or views.  <strong>GetResource</strong> for these objects returns ?this? or the resource that supports the view respectively.  In this situation, the subresource index is 0.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface2::GetResource']/*"/>	
            <msdn-id>hh404629</msdn-id>	
            <unmanaged>HRESULT IDXGISurface2::GetResource([In] const GUID&amp; riid,[Out] void** ppParentResource,[Out] unsigned int* pSubresourceIndex)</unmanaged>	
            <unmanaged-short>IDXGISurface2::GetResource</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Resource1">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface allows resource sharing and identifies the memory that a resource resides in.</p>	
            </summary>	
            <remarks>	
            <p>To find out what type of memory a resource is currently located in, use <strong><see cref="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[])"/></strong>. To share resources between processes, use <strong>ID3D10Device::OpenSharedResource</strong>. For information about how to share resources between multiple Windows graphics APIs, including Direct3D 11, Direct2D, Direct3D 10, and Direct3D 9Ex, see Surface Sharing Between Windows Graphics APIs.</p><p>You can retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface from any video memory resource that you create from a Direct3D 10 and later function. Any Direct3D object that supports <strong>ID3D10Resource</strong> or <strong><see cref="!:SharpDX.Direct3D11.Resource"/></strong> also supports <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>. For example, the Direct3D 2D texture object that you create from <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> supports <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>. You can call <strong>QueryInterface</strong> on the 2D texture object (<strong><see cref="!:SharpDX.Direct3D11.Texture2D"/></strong>) to retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface. For example, to retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface from  the 2D texture object, use the following code.</p><pre><see cref="T:SharpDX.DXGI.Resource"/> * pDXGIResource;	
            hr = g_pd3dTexture2D-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Resource"/>), (void **)&amp;pDXGIResource);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource1']/*"/>	
            <msdn-id>bb174560</msdn-id>	
            <unmanaged>IDXGIResource1</unmanaged>	
            <unmanaged-short>IDXGIResource1</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Resource">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface allows resource sharing and identifies the memory that a resource resides in.</p>	
            </summary>	
            <remarks>	
            <p>To find out what type of memory a resource is currently located in, use <strong><see cref="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[])"/></strong>. To share resources between processes, use <strong>ID3D10Device::OpenSharedResource</strong>. For information about how to share resources between multiple Windows graphics APIs, including Direct3D 11, Direct2D, Direct3D 10, and Direct3D 9Ex, see Surface Sharing Between Windows Graphics APIs.</p><p>You can retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface from any video memory resource that you create from a Direct3D 10 and later function. Any Direct3D object that supports <strong>ID3D10Resource</strong> or <strong><see cref="!:SharpDX.Direct3D11.Resource"/></strong> also supports <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>. For example, the Direct3D 2D texture object that you create from <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> supports <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>. You can call <strong>QueryInterface</strong> on the 2D texture object (<strong><see cref="!:SharpDX.Direct3D11.Texture2D"/></strong>) to retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface. For example, to retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface from  the 2D texture object, use the following code.</p><pre><see cref="T:SharpDX.DXGI.Resource"/> * pDXGIResource;	
            hr = g_pd3dTexture2D-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Resource"/>), (void **)&amp;pDXGIResource);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource']/*"/>	
            <msdn-id>bb174560</msdn-id>	
            <unmanaged>IDXGIResource</unmanaged>	
            <unmanaged-short>IDXGIResource</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.op_Explicit(System.IntPtr)~SharpDX.DXGI.Resource">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Resource"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetSharedHandle(System.IntPtr@)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetSharedHandle</strong> anymore to retrieve the handle to a shared resource. Instead, use <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.String,SharpDX.DXGI.SharedResourceFlags,System.Nullable{SharpDX.Win32.SecurityAttributes})"/></strong> to get a handle for sharing. To use <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.String,SharpDX.DXGI.SharedResourceFlags,System.Nullable{SharpDX.Win32.SecurityAttributes})"/></strong>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/></strong> flag). We also recommend that you create shared resources that use NT handles so you can use <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on on those shared resources.]</p><p>Gets the handle to a shared resource.</p>	
            </summary>	
            <param name="sharedHandleRef">No documentation.</param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong>GetSharedHandle</strong> returns a handle for the resource that you created as shared (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/></strong> with or without the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag). You can pass this handle to the <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> method to give another device access to the shared resource. You can also marshal this handle to another process to share a resource with a device in another process. However, this handle is not an NT handle. Therefore, don't use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on.</p><p>The creator of a shared resource must not destroy the resource until all intended entities have opened the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.</p><p><strong>GetSharedHandle</strong> can also return handles for resources that were passed into <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> to open those resources.</p><p><strong>GetSharedHandle</strong> fails if the resource to which it wants to get a handle is not shared.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
            <msdn-id>bb174562</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>	
            <unmanaged-short>IDXGIResource::GetSharedHandle</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetUsage(System.Int32)">
            <summary>	
            <p>Get the expected resource usage.</p>	
            </summary>	
            <param name="usageRef"><dd>  <p>A reference to a usage flag (see DXGI_USAGE). For Direct3D 10, a surface can be used as a shader input or a render-target output.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetUsage']/*"/>	
            <msdn-id>bb174563</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::GetUsage([In] unsigned int* pUsage)</unmanaged>	
            <unmanaged-short>IDXGIResource::GetUsage</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.SetEvictionPriority(System.Int32)">
            <summary>	
            <p>Set the priority for evicting the resource from memory.</p>	
            </summary>	
            <param name="evictionPriority"><dd>  <p>The priority is one of the following values: </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>The eviction priority is a memory-management variable that is used by DXGI for determining how to populate overcommitted memory.</p><p>You can set priority levels other than the defined values when appropriate. For example, you can set a resource with a priority level of 0x78000001 to indicate that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::SetEvictionPriority']/*"/>	
            <msdn-id>bb174564</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::SetEvictionPriority([In] unsigned int EvictionPriority)</unmanaged>	
            <unmanaged-short>IDXGIResource::SetEvictionPriority</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetEvictionPriority(System.Int32@)">
            <summary>	
            <p>Get the eviction priority.</p>	
            </summary>	
            <param name="evictionPriorityRef"><dd>  <p>A reference to the eviction priority, which determines when a resource can be evicted from memory.  </p> <p>The following defined values are possible.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.</p><p>Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
            <msdn-id>bb174561</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>	
            <unmanaged-short>IDXGIResource::GetEvictionPriority</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Resource.SharedHandle">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetSharedHandle</strong> anymore to retrieve the handle to a shared resource. Instead, use <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.String,SharpDX.DXGI.SharedResourceFlags,System.Nullable{SharpDX.Win32.SecurityAttributes})"/></strong> to get a handle for sharing. To use <strong><see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.String,SharpDX.DXGI.SharedResourceFlags,System.Nullable{SharpDX.Win32.SecurityAttributes})"/></strong>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/></strong> flag). We also recommend that you create shared resources that use NT handles so you can use <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on on those shared resources.]</p><p>Gets the handle to a shared resource.</p>	
            </summary>	
            <remarks>	
            <p><strong>GetSharedHandle</strong> returns a handle for the resource that you created as shared (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/></strong> with or without the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag). You can pass this handle to the <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> method to give another device access to the shared resource. You can also marshal this handle to another process to share a resource with a device in another process. However, this handle is not an NT handle. Therefore, don't use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on.</p><p>The creator of a shared resource must not destroy the resource until all intended entities have opened the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.</p><p><strong>GetSharedHandle</strong> can also return handles for resources that were passed into <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> to open those resources.</p><p><strong>GetSharedHandle</strong> fails if the resource to which it wants to get a handle is not shared.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
            <msdn-id>bb174562</msdn-id>	
            <unmanaged>GetSharedHandle</unmanaged>	
            <unmanaged-short>GetSharedHandle</unmanaged-short>	
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Resource.EvictionPriority">
            <summary>	
            <p>Get or sets the eviction priority.</p>	
            </summary>	
            <remarks>	
            <p>The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.</p><p>Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
            <msdn-id>bb174561</msdn-id>	
            <unmanaged>GetEvictionPriority / SetEvictionPriority</unmanaged>	
            <unmanaged-short>GetEvictionPriority</unmanaged-short>	
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.String,SharpDX.DXGI.SharedResourceFlags,System.Nullable{SharpDX.Win32.SecurityAttributes})">
            <summary>	
            Creates a handle to a shared resource. You can then use the returned handle with multiple Direct3D devices. 
            </summary>	
            <param name="attributesRef"><para>A reference to a <see cref="T:SharpDX.Win32.SecurityAttributes"/> structure that contains two separate but related data members: an optional security descriptor, and a Boolean  value that determines whether child processes can inherit the returned handle.</para> <para>Set this parameter to <c>null</c> if you want child processes that the  application might create to not  inherit  the handle returned by  CreateSharedHandle, and if you want the resource that is associated with the returned handle to get a default security  descriptor.</para> <para>The lpSecurityDescriptor member of the structure specifies a  SECURITY_DESCRIPTOR for the resource. Set  this member to <c>null</c> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle.</para></param>	
            <param name="dwAccess"><para>The requested access rights to the resource.  In addition to the generic access rights, DXGI defines the following values:</para>  <see cref="F:SharpDX.DXGI.SharedResourceFlags.Read"/> ( 0x80000000L ) - specifies read access to the resource. <see cref="F:SharpDX.DXGI.SharedResourceFlags.Write"/> ( 1 ) - specifies  write access to the resource.  <para>You can combine these values by using a bitwise OR operation.</para></param>	
            <param name="name"><para>The name of the resource to share. You will need the  resource name if you  call the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/> method to access the shared resource by name. If you instead  call the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/> method to access the shared resource by handle, set this parameter to <c>null</c>.</para></param>	
            <returns><para>A reference to a variable that receives the NT HANDLE value to the resource to share.  You can  use this handle in calls to access the resource.</para></returns>	
            <remarks>	
            If you  created the resource as shared and specified that it uses NT handles (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/> flag), you must use CreateSharedHandle to get a handle for sharing.  In this situation, you cannot use the <see cref="M:SharpDX.DXGI.Resource.GetSharedHandle(System.IntPtr@)"/> method because it will fail.  Similarly, if you  created the resource as shared and did not specify that it uses NT handles, you cannot use CreateSharedHandle to get a handle for sharing because CreateSharedHandle will fail.You can pass the handle that  CreateSharedHandle returns in a call to the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/> or <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/> method to give a device access to a shared resource that you created on a different device.CreateSharedHandle only returns the NT handle when you  created the resource as shared (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/> and <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/> flags).Because the handle that  CreateSharedHandle returns is an NT handle, you can use the handle with CloseHandle, DuplicateHandle, and so on. You can call CreateSharedHandle only once for a shared resource; later calls fail.  If you need more handles to the same shared resource, call DuplicateHandle. When you no longer need the shared resource handle, call CloseHandle to close the handle, in order to avoid memory leaks.The creator of a shared resource must not destroy the resource until all entities that  opened the resource have destroyed the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.	
            </remarks>	
            <unmanaged>HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes,[In] DXGI_SHARED_RESOURCE_FLAGS dwAccess,[In, Optional] const wchar_t* name,[Out] void** pHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Resource1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Resource1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Resource1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Resource1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Resource1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Resource1.CreateSubresourceSurface(System.Int32,SharpDX.DXGI.Surface2)">
            <summary>	
            <p>Creates a subresource surface object.</p>	
            </summary>	
            <param name="index"><dd> <p>The index of the subresource surface object to enumerate.</p> </dd></param>	
            <param name="surfaceOut"><dd> <p>The address of a reference to a <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface that represents the created subresource surface object at the position specified by the <em>index</em> parameter.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:</p><ul> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the index is out of range or if the subresource is not a valid surface.</li> <li>E_OUTOFMEMORY if insufficient memory is available to create the subresource surface object.</li> </ul><p>A subresource is a valid surface if the original resource would have been a valid surface had its array size been equal to 1.</p></returns>	
            <remarks>	
            <p>Subresource surface objects implement the <strong><see cref="T:SharpDX.DXGI.Surface2"/></strong> interface, which inherits from  <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> and indirectly <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>.  Therefore, the GDI-interoperable methods of <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> work if the original resource interface object was created with the GDI-interoperable flag (<strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/></strong>).</p><p><strong>CreateSubresourceSurface</strong> creates a subresource surface that is based on the resource interface on which <strong>CreateSubresourceSurface</strong> is called. For example, if the original resource interface object is a 2D texture, the created subresource surface is also a 2D texture.</p><p>You can use <strong>CreateSubresourceSurface</strong> to create parts of  a stereo resource so you can use Direct2D on either the left or right part of the stereo resource.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource1::CreateSubresourceSurface']/*"/>	
            <msdn-id>hh404627</msdn-id>	
            <unmanaged>HRESULT IDXGIResource1::CreateSubresourceSurface([In] unsigned int index,[Out, Fast] IDXGISurface2** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGIResource1::CreateSubresourceSurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},SharpDX.DXGI.SharedResourceFlags,System.String)">
            <summary>	
            <p>Creates a handle to a shared resource. You can then use the returned handle with multiple Direct3D devices. </p>	
            </summary>	
            <param name="attributesRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.Win32.SecurityAttributes"/></strong> structure that contains two separate but related data members: an optional security descriptor, and a Boolean  value that determines whether child processes can inherit the returned handle.</p> <p>Set this parameter to <strong><c>null</c></strong> if you want child processes that the  application might create to not  inherit  the handle returned by  <strong>CreateSharedHandle</strong>, and if you want the resource that is associated with the returned handle to get a default security  descriptor.</p> <p>The <strong>lpSecurityDescriptor</strong> member of the structure specifies a  <strong>SECURITY_DESCRIPTOR</strong> for the resource. Set  this member to <strong><c>null</c></strong> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle. The ACLs in the default security descriptor for the resource come from the primary or impersonation token of the creator. For more info, see Synchronization Object Security and Access Rights.</p> </dd></param>	
            <param name="dwAccess"><dd> <p>The requested access rights to the resource.  In addition to the generic access rights, DXGI defines the following values:</p> <ul> <li><strong><see cref="F:SharpDX.DXGI.SharedResourceFlags.Read"/></strong> ( 0x80000000L ) - specifies read access to the resource.</li> <li><strong><see cref="F:SharpDX.DXGI.SharedResourceFlags.Write"/></strong> ( 1 ) - specifies  write access to the resource.</li> </ul> <p>You can combine these values by using a bitwise OR operation.</p> </dd></param>	
            <param name="lpName"><dd> <p>The name of the resource to share. The name is limited to MAX_PATH characters. Name comparison is case sensitive.  You will need the  resource name if you  call the <strong><see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/></strong> method to access the shared resource by name. If you instead  call the <strong><see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/></strong> method to access the shared resource by handle, set this parameter to <strong><c>null</c></strong>.</p> <p>If <em>lpName</em> matches the name of an existing resource, <strong>CreateSharedHandle</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.NameAlreadyExists"/>. This occurs because these objects share the same namespace.</p> <p>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see Kernel Object Namespaces. Fast user switching is implemented using Terminal Services sessions. Kernel object names must follow the guidelines outlined for Terminal Services so that applications can support multiple users.</p> <p>The object can be created in a private namespace. For more information, see Object Namespaces.</p> </dd></param>	
            <returns><dd> <p>A reference to a variable that receives the NT HANDLE value to the resource to share.  You can  use this handle in calls to access the resource.</p> </dd></returns>	
            <remarks>	
            <p><strong>CreateSharedHandle</strong> only returns the NT handle when you  created the resource as shared and specified that it uses NT handles (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/></strong> and <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flags). If you  created the resource as shared and specified that it uses NT handles, you must use <strong>CreateSharedHandle</strong> to get a handle for sharing.  In this situation, you can't use the <strong><see cref="M:SharpDX.DXGI.Resource.GetSharedHandle(System.IntPtr@)"/></strong> method because it will fail.</p><p>You can pass the handle that  <strong>CreateSharedHandle</strong> returns in a call to the <strong><see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/></strong> method to give a device access to a shared resource that you created on a different device.</p><p>Because the handle that  <strong>CreateSharedHandle</strong> returns is an NT handle, you can use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on. You can call <strong>CreateSharedHandle</strong> only once for a shared resource; later calls fail.  If you need more handles to the same shared resource, call <strong>DuplicateHandle</strong>. When you no longer need the shared resource handle, call <strong>CloseHandle</strong> to close the handle, in order to avoid memory leaks.</p><p>If you pass a name for the resource to <em>lpName</em> when you call <strong>CreateSharedHandle</strong> to share the resource, you can subsequently pass this name in a call to the <strong><see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/></strong> method to give another device access to the shared resource. If you use a named resource, a malicious user can use this named resource before you do and prevent your app from starting. To prevent this situation, create a randomly named resource and store the name so that it can only be obtained by an authorized user. Alternatively, you can use a file for this purpose. To limit your app to one instance per user, create a locked file in the user's profile directory.</p><p>If you  created the resource as shared and did not specify that it uses NT handles, you cannot use <strong>CreateSharedHandle</strong> to get a handle for sharing because <strong>CreateSharedHandle</strong> will fail.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource1::CreateSharedHandle']/*"/>	
            <msdn-id>hh404626</msdn-id>	
            <unmanaged>HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes,[In] DXGI_SHARED_RESOURCE_FLAGS dwAccess,[In, Optional] const wchar_t* lpName,[Out] void** pHandle)</unmanaged>	
            <unmanaged-short>IDXGIResource1::CreateSharedHandle</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative">
            <summary>	
            <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
            </summary>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
            // ...	
            IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
            vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative']/*"/>	
            <msdn-id>hh848328</msdn-id>	
            <unmanaged>IVirtualSurfaceImageSourceNative</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ISurfaceImageSourceNative">
            <summary>	
            <p>Provides the implementation of a shared fixed-size surface for Direct2D drawing.</p><p><strong>Note</strong>??If the surface is larger than the screen size, use <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong> instead.</p>	
            </summary>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>SurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/></strong>, you must cast a <strong>SurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/>&gt;	m_sisNative;	
            // ...	
            IInspectable* sisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(surfaceImageSource);	
            sisInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/>), (void **)&amp;m_sisNative) </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNative']/*"/>	
            <msdn-id>hh848322</msdn-id>	
            <unmanaged>ISurfaceImageSourceNative</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNative</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNative.op_Explicit(System.IntPtr)~SharpDX.DXGI.ISurfaceImageSourceNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNative.SetDevice(SharpDX.DXGI.Device)">
            <summary>	
            <p>Sets the DXGI device, created with <see cref="!:SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/>, that will draw the surface.  This method must be called from the UI thread.</p>	
            </summary>	
            <param name="device"><dd> <p>Pointer to the DXGI device interface.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNative::SetDevice']/*"/>	
            <msdn-id>hh848325</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNative::SetDevice</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNative.BeginDraw(SharpDX.Mathematics.Interop.RawRectangle,SharpDX.Mathematics.Interop.RawPoint@)">
            <summary>	
            <p>Opens the supplied DXGI surface for drawing.</p>	
            </summary>	
            <param name="updateRect"><dd> <p>The region of the surface that will be drawn into.</p> </dd></param>	
            <param name="offset"><dd> <p>Receives the point (x,y) offset of the surface that will be drawn into.</p> </dd></param>	
            <returns><dd> <p>Receives a reference to the surface for drawing. </p> </dd></returns>	
            <remarks>	
            <p>If the app window that contains the <strong>SurfaceImageSource</strong> isn't active, like when it's suspended, calling the <strong>BeginDraw</strong> method returns an error.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNative::BeginDraw']/*"/>	
            <msdn-id>hh848323</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNative::BeginDraw([In] RECT updateRect,[Out] IDXGISurface** surface,[Out] POINT* offset)</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNative::BeginDraw</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNative.EndDraw">
            <summary>	
            <p>Closes the surface draw operation.</p>	
            </summary>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNative::EndDraw']/*"/>	
            <msdn-id>hh848324</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNative::EndDraw()</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNative::EndDraw</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.ISurfaceImageSourceNative.Device">
            <summary>	
            <p>Sets the DXGI device, created with <see cref="!:SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/>, that will draw the surface.  This method must be called from the UI thread.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNative::SetDevice']/*"/>	
            <msdn-id>hh848325</msdn-id>	
            <unmanaged>SetDevice</unmanaged>	
            <unmanaged-short>SetDevice</unmanaged-short>	
            <unmanaged>HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.op_Explicit(System.IntPtr)~SharpDX.DXGI.IVirtualSurfaceImageSourceNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.Invalidate(SharpDX.Mathematics.Interop.RawRectangle)">
            <summary>	
            <p>Invalidates a specific region of the shared surface for drawing.</p>	
            </summary>	
            <param name="updateRect"><dd> <p>The region of the surface to invalidate.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::Invalidate']/*"/>	
            <msdn-id>hh848332</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Invalidate([In] RECT updateRect)</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative::Invalidate</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.GetUpdateRectCount">
            <summary>	
            <p>Gets the total number of regions of the surface that must be updated.</p>	
            </summary>	
            <returns><dd> <p>Receives the number of regions to update.</p> </dd></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetUpdateRectCount']/*"/>	
            <msdn-id>hh848329</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRectCount([Out] unsigned int* count)</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRectCount</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.GetUpdateRects(SharpDX.Mathematics.Interop.RawRectangle[],System.Int32)">
            <summary>	
            <p>Gets the set of regions that must be updated on the shared surface.</p>	
            </summary>	
            <param name="updates"><dd> <p>The number of regions that must be updated. You obtain this by calling <strong>GetUpdateRectCount</strong>.</p> </dd></param>	
            <param name="count"><dd> <p>Receives a list of regions that must be updated.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetUpdateRects']/*"/>	
            <msdn-id>hh848330</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRects([Out, Buffer] RECT* updates,[In] unsigned int count)</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRects</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.GetVisibleBounds(SharpDX.Mathematics.Interop.RawRectangle@)">
            <summary>	
            <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
            </summary>	
            <param name="bounds">No documentation.</param>	
            <returns>No documentation.</returns>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
            // ...	
            IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
            vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetVisibleBounds']/*"/>	
            <msdn-id>hh848328</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetVisibleBounds</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.RegisterForUpdatesNeeded_(System.IntPtr)">
            <summary>	
            <p>Registers for the callback that will perform the drawing when an update to the shared surface is requested.</p>	
            </summary>	
            <param name="callback"><dd> <p>Pointer to an implementation of <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative"/></strong>.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded']/*"/>	
            <msdn-id>hh848334</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded([In, Optional] IVirtualSurfaceUpdatesCallbackNative* callback)</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.Resize(System.Int32,System.Int32)">
            <summary>	
            <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
            </summary>	
            <param name="newWidth">No documentation.</param>	
            <param name="newHeight">No documentation.</param>	
            <returns>No documentation.</returns>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
            // ...	
            IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
            vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::Resize']/*"/>	
            <msdn-id>hh848328</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Resize([In] int newWidth,[In] int newHeight)</unmanaged>	
            <unmanaged-short>IVirtualSurfaceImageSourceNative::Resize</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.UpdateRectangles">
            <summary>
            Gets the set of regions that must be updated on the shared surface.
            </summary>
        </member>
        <member name="E:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.UpdatesNeeded">
            <summary>
            Event fired when an update is needed. Use <see cref="P:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.UpdateRectangles"/> to get the region to update.
            </summary>
        </member>
        <member name="P:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.VisibleBounds">
            <summary>	
            <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
            </summary>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
            // ...	
            IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
            vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetVisibleBounds']/*"/>	
            <msdn-id>hh848328</msdn-id>	
            <unmanaged>GetVisibleBounds</unmanaged>	
            <unmanaged-short>GetVisibleBounds</unmanaged-short>	
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative">
            <summary>	
            <p>Provides an interface for the implementation of drawing behaviors when a <strong>VirtualSurfaceImageSource</strong> requests an update. </p>	
            </summary>	
            <remarks>	
            <p>This interface is implemented by the developer to provide specific drawing behaviors for updates to a <strong>VirtualSurfaceImageSource</strong>. Classes that implement  this interface are provided to the <strong><see cref="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.RegisterForUpdatesNeeded_(System.IntPtr)"/></strong>, which calls the <strong>UpdatesNeeded</strong> method implementation whenever an update is requested.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative']/*"/>	
            <msdn-id>hh848336</msdn-id>	
            <unmanaged>IVirtualSurfaceUpdatesCallbackNative</unmanaged>	
            <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative.UpdatesNeeded">
            <summary>	
            Callback method for IVirtualSurfaceUpdatesCallbackNative
            </summary>	
            <unmanaged>HRESULT IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded()</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Device">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="T:SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice']/*"/>	
            <msdn-id>bb174527</msdn-id>	
            <unmanaged>IDXGIDevice</unmanaged>	
            <unmanaged-short>IDXGIDevice</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[])">
            <summary>	
            Gets the residency status of an array of resources.	
            </summary>	
            <remarks>	
            The information returned by the pResidencyStatus argument array describes the residency status at the time that the QueryResourceResidency method was called.   Note that the residency status will constantly change. If you call the QueryResourceResidency method during a device removed state, the pResidencyStatus argument will return the DXGI_RESIDENCY_EVICTED_TO_DISK flag. Note??This method should not be called every frame as it incurs a non-trivial amount of overhead. 	
            </remarks>	
            <param name="comObjects">An array of <see cref="T:SharpDX.DXGI.Resource"/> interfaces. </param>
            <returns>Returns an array of <see cref="T:SharpDX.DXGI.Residency"/> flags. Each element describes the residency status for corresponding element in  the ppResources argument array. </returns>
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[None] int NumResources)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device.op_Explicit(System.IntPtr)~SharpDX.DXGI.Device">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Device"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)">
            <summary>	
            <p>Returns the adapter for the specified device.</p>	
            </summary>	
            <param name="adapterRef"><dd>  <p>The address of an <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface reference to the adapter.  This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the DXGI_ERROR that indicates failure. If the <em>pAdapter</em> parameter is <strong><c>null</c></strong> this method returns E_INVALIDARG.</p></returns>	
            <remarks>	
            <p>If the <strong>GetAdapter</strong> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
            <msdn-id>bb174531</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>	
            <unmanaged-short>IDXGIDevice::GetAdapter</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)">
            <summary>	
            <p>Returns a surface. This method is used internally and you should not call it directly in your application.</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.SurfaceDescription"/></strong> structure that describes the surface.</p> </dd></param>	
            <param name="numSurfaces"><dd>  <p>The number of surfaces to create.</p> </dd></param>	
            <param name="usage"><dd>  <p>A DXGI_USAGE flag that specifies how the surface is expected to be used.</p> </dd></param>	
            <param name="sharedResourceRef"><dd>  <p>An optional reference to a <strong><see cref="T:SharpDX.DXGI.SharedResource"/></strong> structure that contains shared resource information for opening views of such resources.</p> </dd></param>	
            <param name="surfaceOut"><dd>  <p>The address of an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface reference to the first created surface.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>The <strong>CreateSurface</strong> method creates a buffer to exchange data between one or more devices. It is used internally, and you should not directly call it.</p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when it calls <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong>ID3D10Device::CreateTexture2D</strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>. 	
            </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::CreateSurface']/*"/>	
            <msdn-id>bb174530</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[In] unsigned int NumSurfaces,[In] unsigned int Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGIDevice::CreateSurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[],SharpDX.DXGI.Residency[],System.Int32)">
            <summary>	
            <p>Gets the residency status of an array of resources.</p>	
            </summary>	
            <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
            <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
            <remarks>	
            <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="F:SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <msdn-id>bb174533</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
            <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComArray{SharpDX.ComObject},SharpDX.DXGI.Residency[],System.Int32)">
            <summary>	
            <p>Gets the residency status of an array of resources.</p>	
            </summary>	
            <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
            <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
            <remarks>	
            <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="F:SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <msdn-id>bb174533</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
            <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>	
            <p>Gets the residency status of an array of resources.</p>	
            </summary>	
            <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
            <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
            <remarks>	
            <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="F:SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <msdn-id>bb174533</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
            <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.SetGPUThreadPriority(System.Int32)">
            <summary>	
            <p>Sets the GPU thread priority.</p>	
            </summary>	
            <param name="priority"><dd>  <p>A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</p> </dd></param>	
            <returns><p>Return <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>Priority</em> parameter is invalid.</p></returns>	
            <remarks>	
            <p>The values for the <em>Priority</em> parameter function as follows:</p><ul> <li>Positive values increase the likelihood that the GPU scheduler will grant GPU execution cycles to the device when rendering.</li> <li>Negative values lessen the likelihood that the device will receive GPU execution cycles when devices compete for them.</li> <li>The device is guaranteed to receive some GPU execution cycles at all settings.</li> </ul><p>To use the <strong>SetGPUThreadPriority</strong> method, you should have a comprehensive understanding of GPU scheduling. You should profile your application to ensure that it behaves as intended. If used inappropriately, the <strong>SetGPUThreadPriority</strong> method can impede rendering speed and result in a poor user experience.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::SetGPUThreadPriority']/*"/>	
            <msdn-id>bb174534</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>	
            <unmanaged-short>IDXGIDevice::SetGPUThreadPriority</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.GetGPUThreadPriority(System.Int32@)">
            <summary>	
            <p>Gets the GPU thread priority.</p>	
            </summary>	
            <param name="priorityRef"><dd>  <p>A reference to a variable that receives a value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</p> </dd></param>	
            <returns><p>Return <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_POINTER if the <em>pPriority</em> parameter is <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
            <msdn-id>bb174532</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>	
            <unmanaged-short>IDXGIDevice::GetGPUThreadPriority</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Device.Adapter">
            <summary>	
            <p>Returns the adapter for the specified device.</p>	
            </summary>	
            <remarks>	
            <p>If the <strong>GetAdapter</strong> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
            <msdn-id>bb174531</msdn-id>	
            <unmanaged>GetAdapter</unmanaged>	
            <unmanaged-short>GetAdapter</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Device.GPUThreadPriority">
            <summary>	
            <p>Gets or sets the GPU thread priority.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
            <msdn-id>bb174532</msdn-id>	
            <unmanaged>GetGPUThreadPriority / SetGPUThreadPriority</unmanaged>	
            <unmanaged-short>GetGPUThreadPriority</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.FormatHelper">
            <summary>
            Helper to use with <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.SizeOfInBytes(SharpDX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:SharpDX.DXGI.Format"/> in bytes. Can be 0 for compressed format (as they are less than 1 byte)
            </summary>
            <param name="format">The DXGI format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.SizeOfInBits(SharpDX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:SharpDX.DXGI.Format"/> in bits.
            </summary>
            <param name="format">The DXGI format.</param>
            <returns>size of in bits</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsValid(SharpDX.DXGI.Format)">
            <summary>
            Returns true if the <see cref="T:SharpDX.DXGI.Format"/> is valid.
            </summary>
            <param name="format">A format to validate</param>
            <returns>True if the <see cref="T:SharpDX.DXGI.Format"/> is valid.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsCompressed(SharpDX.DXGI.Format)">
            <summary>
            Returns true if the <see cref="T:SharpDX.DXGI.Format"/> is a compressed format.
            </summary>
            <param name="fmt">The format to check for compressed.</param>
            <returns>True if the <see cref="T:SharpDX.DXGI.Format"/> is a compressed format</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsPacked(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is packed.
            </summary>
            <param name="fmt">The DXGI Format.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is packed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsVideo(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is video.
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is video; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsSRgb(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is a SRGB format.
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is a SRGB format; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsTypeless(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is typeless.
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is typeless; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.ComputeScanlineCount(SharpDX.DXGI.Format,System.Int32)">
            <summary>
            Computes the scanline count (number of scanlines).
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <param name="height">The height.</param>
            <returns>The scanline count.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.#cctor">
            <summary>
            Static initializer to speed up size calculation (not sure the JIT is enough "smart" for this kind of thing).
            </summary>
        </member>
        <member name="T:SharpDX.DXGI.AdapterFlags">
            <summary>	
            <p>Identifies the type of DXGI adapter.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterFlags"/></strong> enumerated type is used by the <strong>Flags</strong> member of the <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> or <strong><see cref="T:SharpDX.DXGI.AdapterDescription2"/></strong> structure to  identify the type of DXGI adapter.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.None">
            <summary>	
            <dd> <p>Specifies no flags.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_NONE']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG_NONE</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG_NONE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.Remote">
            <summary>	
            <dd> <p>Value always set to 0. This flag is reserved.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_REMOTE']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG_REMOTE</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG_REMOTE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.Software">
            <summary>	
            <dd> <p>Specifies a software adapter. For more info about this flag, see new info in Windows?8 about enumerating adapters.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_SOFTWARE']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.AlphaMode">
            <summary>	
            <p>Identifies the alpha value, transparency behavior, of a surface.</p>	
            </summary>	
            <remarks>	
            <p>For more information about alpha mode, see <strong><see cref="!:SharpDX.Direct2D1.AlphaMode"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE']/*"/>	
            <msdn-id>hh404496</msdn-id>	
            <unmanaged>DXGI_ALPHA_MODE</unmanaged>	
            <unmanaged-short>DXGI_ALPHA_MODE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Unspecified">
            <summary>	
            <dd> <p>Indicates that the transparency behavior is not specified.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_UNSPECIFIED']/*"/>	
            <msdn-id>hh404496</msdn-id>	
            <unmanaged>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Premultiplied">
            <summary>	
            <dd> <p>Indicates that the transparency behavior is premultiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and premultiplied alpha. Typically, no color channel value is greater than the alpha channel value. If a color channel value in a premultiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_PREMULTIPLIED']/*"/>	
            <msdn-id>hh404496</msdn-id>	
            <unmanaged>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
            <unmanaged-short>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Straight">
            <summary>	
            <dd> <p>Indicates that the transparency behavior is not premultiplied. The alpha channel indicates the transparency of the color.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_STRAIGHT']/*"/>	
            <msdn-id>hh404496</msdn-id>	
            <unmanaged>DXGI_ALPHA_MODE_STRAIGHT</unmanaged>	
            <unmanaged-short>DXGI_ALPHA_MODE_STRAIGHT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Ignore">
            <summary>	
            <dd> <p>Indicates to ignore the transparency behavior.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_IGNORE']/*"/>	
            <msdn-id>hh404496</msdn-id>	
            <unmanaged>DXGI_ALPHA_MODE_IGNORE</unmanaged>	
            <unmanaged-short>DXGI_ALPHA_MODE_IGNORE</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ColorSpaceType">
            <summary>	
            <p>Specifies color space types.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_TYPE']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_TYPE</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_TYPE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.RgbFullG22NoneP709">
            <summary>	
            <dd> <p>RGB full G22 and no P709.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.RgbFullG10NoneP709">
            <summary>	
            <dd> <p>RGB full G10 and no P709.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.RgbStudioG22NoneP709">
            <summary>	
            <dd> <p>RGB studio G22 and no P709.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.RgbStudioG22NoneP2020">
            <summary>	
            <dd> <p>RGB studio G22 and no P2020.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.Reserved">
            <summary>	
            <dd> <p>Reserved.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_RESERVED']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_RESERVED</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_RESERVED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrFullG22NoneP709X601">
            <summary>	
            <dd> <p>YCBCR full G22 and no P709 or X601.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrStudioG22LeftP601">
            <summary>	
            <dd> <p>YCBCR studio G22 and left P601.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrFullG22LeftP601">
            <summary>	
            <dd> <p>YCBCR full G22 and left P601.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrStudioG22LeftP709">
            <summary>	
            <dd> <p>YCBCR studio G22 and left P709.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrFullG22LeftP709">
            <summary>	
            <dd> <p>YCBCR full G22 and left P709.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrStudioG22LeftP2020">
            <summary>	
            <dd> <p>YCBCR studio G22 and left P2020.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.YcbcrFullG22LeftP2020">
            <summary>	
            <dd> <p>YCBCR full G22 and left P2020.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ColorSpaceType.Custom">
            <summary>	
            <dd> <p>Custom color space.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COLOR_SPACE_CUSTOM']/*"/>	
            <msdn-id>dn903661</msdn-id>	
            <unmanaged>DXGI_COLOR_SPACE_CUSTOM</unmanaged>	
            <unmanaged-short>DXGI_COLOR_SPACE_CUSTOM</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ComputePreemptionGranularity">
            <summary>	
            <p>Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current compute task.</p>	
            </summary>	
            <remarks>	
            <p>You call the <strong><see cref="M:SharpDX.DXGI.Adapter2.GetDescription2(SharpDX.DXGI.AdapterDescription2@)"/></strong> method to retrieve the granularity level at which the GPU can be preempted from performing its current compute task. The operating system specifies the compute granularity level in the  <strong>ComputePreemptionGranularity</strong> member of the <strong><see cref="T:SharpDX.DXGI.AdapterDescription2"/></strong> structure.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_GRANULARITY']/*"/>	
            <msdn-id>hh404499</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.DmaBufferBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a compute packet.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY']/*"/>	
            <msdn-id>hh404499</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.DispatchBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a dispatch (for example, a call to the <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method). A dispatch is a part of a compute packet.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY']/*"/>	
            <msdn-id>hh404499</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.ThreadGroupBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a thread group. A thread group is a part of a dispatch.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY']/*"/>	
            <msdn-id>hh404499</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.ThreadBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a thread in a thread group. A thread is a part of a thread group.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY']/*"/>	
            <msdn-id>hh404499</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.InstructionBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a compute instruction in a thread.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY']/*"/>	
            <msdn-id>hh404499</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeEnumerationFlags">
            <summary>	
            <p>Options for enumerating display modes.</p><p></p>	
            </summary>	
            <remarks>	
            <p>These flag options are used in <strong><see cref="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription[])"/></strong> to enumerate display modes.</p><p>These flag options are also used in <strong><see cref="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)"/></strong> to enumerate display modes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_FLAGS']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_INTERLACED']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_INTERLACED</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_INTERLACED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_SCALING']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_SCALING</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_SCALING</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_STEREO']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_STEREO</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_STEREO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.DisabledStereo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_DISABLED_STEREO']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeRotation">
            <summary>	
            <p>Flags that indicate how the back buffers should be rotated to fit the physical rotation of a monitor.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Unspecified">
            <summary>	
            <dd> <p>Unspecified rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_UNSPECIFIED']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Identity">
            <summary>	
            <dd> <p>Specifies no rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_IDENTITY']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_IDENTITY</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_IDENTITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate90">
            <summary>	
            <dd> <p>Specifies 90 degrees of rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE90']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE90</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_ROTATE90</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate180">
            <summary>	
            <dd> <p>Specifies 180 degrees of rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE180']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE180</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_ROTATE180</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate270">
            <summary>	
            <dd> <p>Specifies 270 degrees of rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE270']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE270</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_ROTATE270</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeScaling">
            <summary>	
            <p>Flags indicating how an image is stretched to fit a given monitor's resolution.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Unspecified">
            <summary>	
            <dd> <p>Unspecified scaling.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_UNSPECIFIED']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Centered">
            <summary>	
            <dd> <p>Specifies no scaling. The image is centered on the display. This flag is typically used for a fixed-dot-pitch display (such as an LED display).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_CENTERED']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING_CENTERED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING_CENTERED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Stretched">
            <summary>	
            <dd> <p>Specifies stretched scaling.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_STRETCHED']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING_STRETCHED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING_STRETCHED</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeScanlineOrder">
            <summary>	
            <p>Flags indicating the method the raster uses to create an image on a surface.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.Unspecified">
            <summary>	
            <dd> <p>Scanline order is unspecified.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.Progressive">
            <summary>	
            <dd> <p>The image is created from the first scanline to the last without skipping any.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.UpperFieldFirst">
            <summary>	
            <dd> <p>The image is created beginning with the upper field.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.LowerFieldFirst">
            <summary>	
            <dd> <p>The image is created beginning with the lower field.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIStatus">
            <summary>	
            <p>Status codes that can be returned by DXGI functions.</p><p></p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.Result"/></strong> value for each <strong><see cref="T:SharpDX.DXGI.DXGIStatus"/></strong> value is determined from this macro that is defined in DXGItype.h:</p><pre> #define _FACDXGI    0x87a	
            #define MAKE_DXGI_STATUS(code)  MAKE_HRESULT(0, _FACDXGI, code)	
            </pre><p>For example, <strong><see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/></strong> is defined as <strong>0x087A0001</strong>:</p><pre> #define <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/>                    MAKE_DXGI_STATUS(1)	
            </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS</unmanaged>	
            <unmanaged-short>DXGI_STATUS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Occluded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_OCCLUDED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_OCCLUDED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_OCCLUDED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Clipped">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_CLIPPED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_CLIPPED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_CLIPPED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.NoRedirection">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_NO_REDIRECTION']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_NO_REDIRECTION</unmanaged>	
            <unmanaged-short>DXGI_STATUS_NO_REDIRECTION</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.NoDesktopAccess">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_NO_DESKTOP_ACCESS']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged>	
            <unmanaged-short>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.GraphicsVidpnSourceInUse">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>	
            <unmanaged-short>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.ModeChanged">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_MODE_CHANGED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_MODE_CHANGED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGE_IN_PROGRESS']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged>	
            <unmanaged-short>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Unoccluded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_UNOCCLUDED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_UNOCCLUDED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_UNOCCLUDED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.DdaWasStillDrawing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_DDA_WAS_STILL_DRAWING']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_DDA_WAS_STILL_DRAWING</unmanaged>	
            <unmanaged-short>DXGI_STATUS_DDA_WAS_STILL_DRAWING</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.PresentRequired">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_PRESENT_REQUIRED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_PRESENT_REQUIRED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_PRESENT_REQUIRED</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Format">
            <summary>	
            <p>Resource data formats which includes fully-typed and typeless formats. There is a list of format modifiers at the bottom of the page,  that more fully describes each format type.</p>	
            </summary>	
            <remarks>	
            <p>A few formats have additional restrictions.</p><ol> <li>A resource declared with the DXGI_FORMAT_R32G32B32 family of formats cannot be used simultaneously for vertex and texture data. That is, you may not create a buffer resource with the DXGI_FORMAT_R32G32B32 family of formats that uses any of the following bind flags: D3D10_BIND_VERTEX_BUFFER, D3D10_BIND_INDEX_BUFFER, D3D10_BIND_CONSTANT_BUFFER, or D3D10_BIND_STREAM_OUTPUT (see <strong>D3D10_BIND_FLAG</strong>).</li> <li><see cref="F:SharpDX.DXGI.Format.R1_UNorm"/> is designed specifically for text filtering, and must be used with a format-specific, configurable 8x8 filter mode. When calling an HLSL sampling function using this format, the address offset parameter must be set to (0,0).</li> <li>A resource using a sub-sampled format (such as DXGI_FORMAT_R8G8_B8G8) must have a size that is a multiple of 2 in the x dimension.</li> <li>Format is not available in Direct3D 10 and Direct3D 10.1</li> </ol><p>The following topics provide lists of the formats that particular hardware feature levels support:</p><ul> <li> Hardware Support for Direct3D 11.1 Formats </li> <li> Hardware Support for Direct3D 11 Formats </li> <li> Hardware Support for Direct3D 10.1 Formats </li> <li> Hardware Support for Direct3D 10 Formats </li> <li> Hardware Support for Direct3D 10Level9 Formats </li> </ul><p>For a list of the <strong>DirectXMath</strong> types that map to <strong><see cref="T:SharpDX.DXGI.Format"/></strong> values, see DirectXMath Library Internals.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Unknown">
            <summary>	
            <dd> <p>The format is not known.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_UNKNOWN']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_UNKNOWN</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_UNKNOWN</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_Typeless">
            <summary>	
            <dd> <p>A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_Float">
            <summary>	
            <dd> <p>A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_UInt">
            <summary>	
            <dd> <p>A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_SInt">
            <summary>	
            <dd> <p>A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_Typeless">
            <summary>	
            <dd> <p>A three-component, 96-bit typeless format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_Float">
            <summary>	
            <dd> <p>A three-component, 96-bit floating-point format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_UInt">
            <summary>	
            <dd> <p>A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_SInt">
            <summary>	
            <dd> <p>A three-component, 96-bit signed-integer format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_Typeless">
            <summary>	
            <dd> <p>A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_Float">
            <summary>	
            <dd> <p>A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm">
            <summary>	
            <dd> <p>A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_UInt">
            <summary>	
            <dd> <p>A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_SNorm">
            <summary>	
            <dd> <p>A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_SInt">
            <summary>	
            <dd> <p>A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_Typeless">
            <summary>	
            <dd> <p>A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_Float">
            <summary>	
            <dd> <p>A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_UInt">
            <summary>	
            <dd> <p>A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_SInt">
            <summary>	
            <dd> <p>A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G8X24_Typeless">
            <summary>	
            <dd> <p>A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G8X24_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D32_Float_S8X24_UInt">
            <summary>	
            <dd> <p>A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT_S8X24_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Float_X8X24_Typeless">
            <summary>	
            <dd> <p>A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.X32_Typeless_G8X24_UInt">
            <summary>	
            <dd> <p>A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_X32_TYPELESS_G8X24_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_UInt">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R11G11B10_Float">
            <summary>	
            <dd> <p>Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa  for R and G, and a 5-bit mantissa for B, as shown in the following illustration.</p> <p></p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R11G11B10_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UInt">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_SNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_SInt">
            <summary>	
            <dd> <p>A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_Typeless">
            <summary>	
            <dd> <p>A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_Float">
            <summary>	
            <dd> <p>A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_UNorm">
            <summary>	
            <dd> <p>A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_UInt">
            <summary>	
            <dd> <p>A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_SNorm">
            <summary>	
            <dd> <p>A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_SInt">
            <summary>	
            <dd> <p>A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Typeless">
            <summary>	
            <dd> <p>A single-component, 32-bit typeless format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D32_Float">
            <summary>	
            <dd> <p>A single-component, 32-bit floating-point format that supports 32 bits for depth.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Float">
            <summary>	
            <dd> <p>A single-component, 32-bit floating-point format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_UInt">
            <summary>	
            <dd> <p>A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_SInt">
            <summary>	
            <dd> <p>A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R24G8_Typeless">
            <summary>	
            <dd> <p>A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R24G8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R24G8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R24G8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D24_UNorm_S8_UInt">
            <summary>	
            <dd> <p>A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D24_UNORM_S8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R24_UNorm_X8_Typeless">
            <summary>	
            <dd> <p>A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R24_UNORM_X8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.X24_Typeless_G8_UInt">
            <summary>	
            <dd> <p>A 32-bit format, that contains a 24 bit, single-component, typeless format,  with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_X24_TYPELESS_G8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_Typeless">
            <summary>	
            <dd> <p>A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_UNorm">
            <summary>	
            <dd> <p>A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_UInt">
            <summary>	
            <dd> <p>A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_SNorm">
            <summary>	
            <dd> <p>A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_SInt">
            <summary>	
            <dd> <p>A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_Typeless">
            <summary>	
            <dd> <p>A single-component, 16-bit typeless format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_Float">
            <summary>	
            <dd> <p>A single-component, 16-bit floating-point format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D16_UNorm">
            <summary>	
            <dd> <p>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_UNorm">
            <summary>	
            <dd> <p>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_UInt">
            <summary>	
            <dd> <p>A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_SNorm">
            <summary>	
            <dd> <p>A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_SInt">
            <summary>	
            <dd> <p>A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_Typeless">
            <summary>	
            <dd> <p>A single-component, 8-bit typeless format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_UNorm">
            <summary>	
            <dd> <p>A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_UInt">
            <summary>	
            <dd> <p>A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_SNorm">
            <summary>	
            <dd> <p>A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_SInt">
            <summary>	
            <dd> <p>A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.A8_UNorm">
            <summary>	
            <dd> <p>A single-component, 8-bit unsigned-normalized-integer format for alpha only.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_A8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_A8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_A8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R1_UNorm">
            <summary>	
            <dd> <p>A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. 2.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R1_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R1_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R1_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R9G9B9E5_Sharedexp">
            <summary>	
            <dd> <p>Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. 2.</p> <p></p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R9G9B9E5_SHAREDEXP']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_B8G8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3</p> <p>Width must be even.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_B8G8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.G8R8_G8B8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3</p> <p>Width must be even.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_G8R8_G8B8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_Typeless">
            <summary>	
            <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC1_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC1_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_UNorm">
            <summary>	
            <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC1_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC1_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_UNorm_SRgb">
            <summary>	
            <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_Typeless">
            <summary>	
            <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC2_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC2_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_UNorm">
            <summary>	
            <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC2_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC2_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_UNorm_SRgb">
            <summary>	
            <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_Typeless">
            <summary>	
            <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC3_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC3_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_UNorm">
            <summary>	
            <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC3_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC3_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_UNorm_SRgb">
            <summary>	
            <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_Typeless">
            <summary>	
            <dd> <p>One-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC4_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC4_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_UNorm">
            <summary>	
            <dd> <p>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC4_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC4_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_SNorm">
            <summary>	
            <dd> <p>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC4_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC4_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_Typeless">
            <summary>	
            <dd> <p>Two-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC5_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC5_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_UNorm">
            <summary>	
            <dd> <p>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC5_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC5_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_SNorm">
            <summary>	
            <dd> <p>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC5_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC5_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B5G6R5_UNorm">
            <summary>	
            <dd> <p>A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.</p> <p><strong>Direct3D 10 through Direct3D 11:??</strong>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B5G6R5_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B5G6R5_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B5G6R5_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B5G5R5A1_UNorm">
            <summary>	
            <dd> <p>A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.</p> <p><strong>Direct3D 10 through Direct3D 11:??</strong>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B5G5R5A1_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_UNorm_SRgb">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Typeless">
            <summary>	
            <dd> <p>A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC6H_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC6H_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Uf16">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_UF16']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC6H_UF16</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC6H_UF16</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Sf16">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_SF16']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC6H_SF16</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC6H_SF16</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_Typeless">
            <summary>	
            <dd> <p>A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC7_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC7_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_UNorm">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC7_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC7_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_UNorm_SRgb">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.AYUV">
            <summary>	
            <dd> <p>Most common YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. For UAVs, an additional valid view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. Supported view types are SRV, RTV, and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is V-&gt;R8, 	
            U-&gt;G8, 	
            Y-&gt;B8, 	
            and A-&gt;A8.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_AYUV']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_AYUV</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_AYUV</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y410">
            <summary>	
            <dd> <p>10-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UInt"/>. For UAVs, an additional valid view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R10,	
            Y-&gt;G10,	
            V-&gt;B10,	
            and A-&gt;A2.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y410']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_Y410</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_Y410</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y416">
            <summary>	
            <dd> <p>16-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R16,	
            Y-&gt;G16,	
            V-&gt;B16,	
            and A-&gt;A16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y416']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_Y416</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_Y416</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.NV12">
            <summary>	
            <dd> <p>Most common YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8_UInt"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and	
            V-&gt;G8.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_NV12']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_NV12</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_NV12</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P010">
            <summary>	
            <dd> <p>10-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16_UInt"/>. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, <see cref="F:SharpDX.DXGI.Format.P010"/> is no different than <see cref="F:SharpDX.DXGI.Format.P016"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. For UAVs, an additional valid chrominance data view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and	
            V-&gt;G16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P010']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_P010</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_P010</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P016">
            <summary>	
            <dd> <p>16-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16_UInt"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. For UAVs, an additional valid chrominance data view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and	
            V-&gt;G16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the UV plane.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P016']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_P016</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_P016</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Opaque420">
            <summary>	
            <dd> <p>8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. The runtime requires that the width and height of all resources that are created with this format are multiples of 2. The runtime also requires that the left, right, top, and bottom members of any <see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/> that are used for this format are multiples of 2. This format differs from <see cref="F:SharpDX.DXGI.Format.NV12"/> in that the layout of the data within the resource is completely opaque to applications. Applications cannot use the CPU to map the resource and then access the data within the resource. You cannot use shaders with this format. Because of this behavior, legacy hardware that supports a non-NV12 4:2:0 layout (for example, YV12, and so on) can be used. Also, new hardware that has a 4:2:0 implementation better than NV12 can be used when the application does not need the data to be in a standard layout. </p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width and height must be even. Direct3D 11 staging resources and initData parameters for this format use (rowPitch * (height + (height / 2))) bytes. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_420_OPAQUE']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_420_OPAQUE</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_420_OPAQUE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.YUY2">
            <summary>	
            <dd> <p>Most common YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. For UAVs, an additional valid view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R8, 	
            U0-&gt;G8, 	
            Y1-&gt;B8, 	
            and V0-&gt;A8.</p> <p>A unique valid view format for this video resource format is <see cref="F:SharpDX.DXGI.Format.R8G8_B8G8_UNorm"/>. With this view format, the width of the view appears to be twice what the <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> or <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/> view would be when hardware reconstructs RGBA automatically on read and before filtering.  This Direct3D hardware behavior is legacy and is likely not useful any more. With this view format, the mapping to the view channel is Y0-&gt;R8, 	
            U0-&gt;	
            G8[0], 	
            Y1-&gt;B8, 	
            and V0-&gt;	
            G8[1].</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be even.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_YUY2']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_YUY2</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_YUY2</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y210">
            <summary>	
            <dd> <p>10-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, <see cref="F:SharpDX.DXGI.Format.Y210"/> is no different than <see cref="F:SharpDX.DXGI.Format.Y216"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16,	
            U-&gt;G16,	
            Y1-&gt;B16,	
            and V-&gt;A16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be even.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y210']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_Y210</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_Y210</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y216">
            <summary>	
            <dd> <p>16-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16,	
            U-&gt;G16,	
            Y1-&gt;B16,	
            and V-&gt;A16.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be even.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y216']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_Y216</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_Y216</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.NV11">
            <summary>	
            <dd> <p>Most common planar YUV 4:1:1 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8_UInt"/>. Valid chrominance data view formats (width and height are each 1/4 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and	
            V-&gt;G8.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p>Width must be a multiple of 4. Direct3D11 staging resources and initData parameters for this format use (rowPitch * height * 2) bytes. The first (SysMemPitch * height) bytes are the Y plane, the next ((SysMemPitch / 2) * height) bytes are the UV plane, and the remainder is padding. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_NV11']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_NV11</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_NV11</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.AI44">
            <summary>	
            <dd> <p>4-bit palletized YUV format that is commonly used for DVD subpicture.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_AI44']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_AI44</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_AI44</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.IA44">
            <summary>	
            <dd> <p>4-bit palletized YUV format that is commonly used for DVD subpicture.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_IA44']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_IA44</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_IA44</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P8">
            <summary>	
            <dd> <p>8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes BluRay data.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P8']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_P8</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_P8</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.A8P8">
            <summary>	
            <dd> <p>8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes BluRay data.</p> <p>For more info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. </p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_A8P8']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_A8P8</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_A8P8</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B4G4R4A4_UNorm">
            <summary>	
            <dd> <p>A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B4G4R4A4_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B4G4R4A4_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B4G4R4A4_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P208">
            <summary>	
            <dd> <p>Forces this enumeration to compile to 32 bits in size. Without this value, some compilers would allow this enumeration to compile to a  size other than 32 bits. This value is not used.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P208']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_P208</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_P208</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.V208">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_V208']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_V208</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_V208</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.V408">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_V408']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_V408</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_V408</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.FramePresentationMode">
            <summary>	
            <p>Indicates options for presenting frames to the swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE']/*"/>	
            <msdn-id>dn384107</msdn-id>	
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE</unmanaged>	
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FramePresentationMode.Composed">
            <summary>	
            <dd> <p>Specifies that the presentation mode is a composition surface, meaning that the conversion from YUV to RGB is happening once per output refresh (for example, 60 Hz). When this value is returned, the media app should discontinue use of the decode swap chain and perform YUV to RGB conversion itself, reducing the frequency of YUV to RGB conversion to once per video frame.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_COMPOSED']/*"/>	
            <msdn-id>dn384107</msdn-id>	
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_COMPOSED</unmanaged>	
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_COMPOSED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FramePresentationMode.Overlay">
            <summary>	
            <dd> <p>Specifies that the presentation mode is an overlay surface, meaning that the YUV to RGB conversion is happening efficiently in hardware (once per video frame). When this value is returned, the media app can continue to use the decode swap chain. See <strong><see cref="T:SharpDX.DXGI.DecodeSwapChain"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_OVERLAY']/*"/>	
            <msdn-id>dn384107</msdn-id>	
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_OVERLAY</unmanaged>	
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_OVERLAY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FramePresentationMode.None">
            <summary>	
            <dd> <p>No presentation is specified.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_NONE']/*"/>	
            <msdn-id>dn384107</msdn-id>	
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_NONE</unmanaged>	
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_NONE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FramePresentationMode.CompositionFailure">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE']/*"/>	
            <msdn-id>dn384107</msdn-id>	
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE</unmanaged>	
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.GraphicsPreemptionGranularity">
            <summary>	
            <p>Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current graphics rendering task.</p>	
            </summary>	
            <remarks>	
            <p>You call the <strong><see cref="M:SharpDX.DXGI.Adapter2.GetDescription2(SharpDX.DXGI.AdapterDescription2@)"/></strong> method to retrieve the granularity level at which the GPU can be preempted from performing its current graphics rendering task. The operating system specifies the graphics granularity level in the  <strong>GraphicsPreemptionGranularity</strong> member of the <strong><see cref="T:SharpDX.DXGI.AdapterDescription2"/></strong> structure.</p><p>The following figure shows granularity of graphics rendering tasks.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_GRANULARITY']/*"/>	
            <msdn-id>hh404504</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.DmaBufferBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a DMA buffer.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY']/*"/>	
            <msdn-id>hh404504</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.PrimitiveBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a graphics primitive. A primitive is a section in a DMA buffer and can be a group of triangles.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY']/*"/>	
            <msdn-id>hh404504</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.TriangleBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a triangle. A triangle is a part of a primitive.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY']/*"/>	
            <msdn-id>hh404504</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.PixelBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a pixel. A pixel is a part of a triangle.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY']/*"/>	
            <msdn-id>hh404504</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.InstructionBoundary">
            <summary>	
            <dd> <p>Indicates the preemption granularity as a graphics instruction. A graphics instruction operates on a pixel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY']/*"/>	
            <msdn-id>hh404504</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.MapFlags">
            <summary>	
            <p>Identifies how to perform a present operation.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_FLAGS']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_MAP_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Read">
            <summary>	
            <dd> <p>Specifies whether to perform a bit-block transfer (bitblt) data to the primary surface. </p> <p>Setting this member is equivalent to setting the first bit of the 32-bit <strong>Value</strong> member (0x00000001).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_READ']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_READ</unmanaged>	
            <unmanaged-short>DXGI_MAP_READ</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Write">
            <summary>	
            <dd> <p>Specifies whether to flip to a new surface. </p> <p>Setting this member is equivalent to setting the second bit of the 32-bit <strong>Value</strong> member (0x00000002).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_WRITE']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_WRITE</unmanaged>	
            <unmanaged-short>DXGI_MAP_WRITE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Discard">
            <summary>	
            <dd> <p>Supported in Windows?8 and later versions.</p> <p>Specifies that, if a stereo present operation must be reduced to mono, the present operation should show the view from the right eye.</p> <p>If this member is not set, the default mono present operation shows the view from the left eye.</p> <p>Setting this member is equivalent to setting the third bit of the 32-bit <strong>Value</strong> member (0x00000004).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_DISCARD']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_DISCARD</unmanaged>	
            <unmanaged-short>DXGI_MAP_DISCARD</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.MemorySegmentGroup">
            <summary>	
            <p>Specifies the memory segment group to use.</p>	
            </summary>	
            <remarks>	
            <p>This enum is used by <strong>QueryVideoMemoryInfo</strong> and <strong>SetVideoMemoryReservation</strong>.</p><p>Refer to the remarks for <strong><see cref="!:SharpDX.Direct3D12.MemoryPool"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MEMORY_SEGMENT_GROUP']/*"/>	
            <msdn-id>dn933219</msdn-id>	
            <unmanaged>DXGI_MEMORY_SEGMENT_GROUP</unmanaged>	
            <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MemorySegmentGroup.Local">
            <summary>	
            <dd> <p> The grouping of segments which is considered local to the video adapter, and represents the fastest available memory to the GPU. Applications should target the local segment group as the target size for their working set.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MEMORY_SEGMENT_GROUP_LOCAL']/*"/>	
            <msdn-id>dn933219</msdn-id>	
            <unmanaged>DXGI_MEMORY_SEGMENT_GROUP_LOCAL</unmanaged>	
            <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP_LOCAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MemorySegmentGroup.NonLocal">
            <summary>	
            <dd> <p>The grouping of segments which is considered non-local to the video adapter, and may have slower performance than the local segment group.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL']/*"/>	
            <msdn-id>dn933219</msdn-id>	
            <unmanaged>DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL</unmanaged>	
            <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags">
            <summary>	
            <p>Options for swap-chain color space.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags.NominalRange">
            <summary>	
            <dd> <p>Specifies nominal range YCbCr, which isn't an absolute color space, but a way of encoding RGB info.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE</unmanaged>	
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags.Bt709">
            <summary>	
            <dd> <p>Specifies BT.709, which standardizes the format of high-definition television and has 16:9 (widescreen) aspect ratio.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709</unmanaged>	
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags.XvYCC">
            <summary>	
            <dd> <p>Specifies xvYCC or extended-gamut YCC (also x.v.Color) color space that can be used in the video electronics of television sets to support a gamut 1.8 times as large as that of the sRGB color space.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC</unmanaged>	
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OfferResourcePriority">
            <summary>	
            <p>Identifies the importance of a resource?s content when you call the  <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong> method to offer the resource.</p>	
            </summary>	
            <remarks>	
            <p>Priority determines how likely the operating system is to discard an offered resource.  Resources offered with lower priority are discarded first.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged>	
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OfferResourcePriority.Low">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_LOW']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged>	
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OfferResourcePriority.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_NORMAL']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged>	
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OfferResourcePriority.High">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_HIGH']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged>	
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplicatePointerShapeType">
            <summary>	
            <p>Identifies the type of reference shape.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE']/*"/>	
            <msdn-id>hh404520</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeType.Monochrome">
            <summary>	
            <dd> <p>The reference type is a monochrome mouse reference, which is  a monochrome bitmap. The bitmap's size is specified by width and height in a 1 bits per pixel (bpp) device independent bitmap (DIB) format AND mask that is followed by another 1 bpp DIB format XOR mask of the same size.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME']/*"/>	
            <msdn-id>hh404520</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeType.Color">
            <summary>	
            <dd> <p>The reference type is a color mouse reference, which is  a color bitmap. The bitmap's size is specified by width and height in a 32 bpp ARGB DIB format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR']/*"/>	
            <msdn-id>hh404520</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeType.MaskedColor">
            <summary>	
            <dd> <p>The reference type is a masked color mouse reference.  A masked color mouse reference is a 32 bpp ARGB format bitmap with the mask value in the alpha bits. The only allowed mask values are 0 and 0xFF. When the mask value is 0, the RGB value should replace the screen pixel. When the mask value is 0xFF, an XOR operation is performed on the RGB value and the screen pixel; the result replaces the screen pixel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR']/*"/>	
            <msdn-id>hh404520</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OverlayColorSpaceSupportFlags">
            <summary>	
            <p>Specifies support for overlay color space.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG']/*"/>	
            <msdn-id>dn903665</msdn-id>	
            <unmanaged>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</unmanaged>	
            <unmanaged-short>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OverlayColorSpaceSupportFlags.Present">
            <summary>	
            <dd> <p>Overlay color space support is present.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT']/*"/>	
            <msdn-id>dn903665</msdn-id>	
            <unmanaged>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged>	
            <unmanaged-short>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OverlayColorSpaceSupportFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OverlaySupportFlags">
            <summary>	
            <p>Options for swap-chain color space.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OVERLAY_SUPPORT_FLAG']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG</unmanaged>	
            <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OverlaySupportFlags.Direct">
            <summary>	
            <dd> <p>Specifies nominal range YCbCr, which isn't an absolute color space, but a way of encoding RGB info.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OVERLAY_SUPPORT_FLAG_DIRECT']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG_DIRECT</unmanaged>	
            <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG_DIRECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OverlaySupportFlags.Scaling">
            <summary>	
            <dd> <p>Specifies BT.709, which standardizes the format of high-definition television and has 16:9 (widescreen) aspect ratio.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OVERLAY_SUPPORT_FLAG_SCALING']/*"/>	
            <msdn-id>dn313170</msdn-id>	
            <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG_SCALING</unmanaged>	
            <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG_SCALING</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OverlaySupportFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.PresentFlags">
            <summary>	
            <p>Identifies how to perform a present operation.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_FLAGS']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.Test">
            <summary>	
            <dd> <p>Specifies whether to perform a bit-block transfer (bitblt) data to the primary surface. </p> <p>Setting this member is equivalent to setting the first bit of the 32-bit <strong>Value</strong> member (0x00000001).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_TEST']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_TEST</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_TEST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.DoNotSequence">
            <summary>	
            <dd> <p>Specifies whether to flip to a new surface. </p> <p>Setting this member is equivalent to setting the second bit of the 32-bit <strong>Value</strong> member (0x00000002).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_SEQUENCE']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.Restart">
            <summary>	
            <dd> <p>Supported in Windows?8 and later versions.</p> <p>Specifies that, if a stereo present operation must be reduced to mono, the present operation should show the view from the right eye.</p> <p>If this member is not set, the default mono present operation shows the view from the left eye.</p> <p>Setting this member is equivalent to setting the third bit of the 32-bit <strong>Value</strong> member (0x00000004).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_RESTART']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_RESTART</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_RESTART</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.DoNotWait">
            <summary>	
            <dd> <p>Supported in Windows?8 and later versions.</p> <p>Specifies that  a present operation should use the left buffer as a mono (non-stereo) buffer.</p> <p>Setting this member is equivalent to setting the fourth bit of the 32-bit <strong>Value</strong> member (0x00000008).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_WAIT']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_DO_NOT_WAIT</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_DO_NOT_WAIT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.StereoPreferRight">
            <summary>	
            <dd> <p>This member is reserved and should be set to zero. Setting this member to zero is equivalent to setting the remaining 28 bits (0xFFFFFFF0) of the 32-bit <strong>Value</strong> member to zeros.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_STEREO_PREFER_RIGHT']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.StereoTemporaryMono">
            <summary>	
            <dd> <p>A member in the union that is contained in DXGI_DDI_PRESENT_FLAGS that can hold one 32-bit value that identifies how to perform a present operation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_STEREO_TEMPORARY_MONO']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.RestrictToOutput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_RESTRICT_TO_OUTPUT']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.UseDuration">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_USE_DURATION']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_USE_DURATION</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_USE_DURATION</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Residency">
            <summary>	
            <p>Flags indicating the memory location of a resource.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.FullyResident">
            <summary>	
            <dd> <p>The resource is located in video memory.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_FULLY_RESIDENT']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.ResidentInSharedMemory">
            <summary>	
            <dd> <p>At least some of the resource is located in CPU memory.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.EvictedToDisk">
            <summary>	
            <dd> <p>At least some of the resource has been paged out to the hard drive.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_EVICTED_TO_DISK']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ResourcePriority">
            <summary>	
            <p>Identifies the importance of a resource?s content when you call the  <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong> method to offer the resource.</p>	
            </summary>	
            <remarks>	
            <p>Priority determines how likely the operating system is to discard an offered resource.  Resources offered with lower priority are discarded first.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Minimum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MINIMUM']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Low">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_LOW']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_LOW</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_LOW</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_NORMAL']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.High">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_HIGH']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Maximum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MAXIMUM']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Scaling">
            <summary>	
            <p>Identifies resize behavior when the back-buffer size does not match the size of the target output.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="F:SharpDX.DXGI.Scaling.None"/></strong> value is supported only for flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value. You pass these values in a call to <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING']/*"/>	
            <msdn-id>hh404526</msdn-id>	
            <unmanaged>DXGI_SCALING</unmanaged>	
            <unmanaged-short>DXGI_SCALING</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Scaling.Stretch">
            <summary>	
            <dd> <p>Directs DXGI to make the back-buffer contents scale to fit the presentation target size. This is the implicit behavior of DXGI when you call the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING_STRETCH']/*"/>	
            <msdn-id>hh404526</msdn-id>	
            <unmanaged>DXGI_SCALING_STRETCH</unmanaged>	
            <unmanaged-short>DXGI_SCALING_STRETCH</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Scaling.None">
            <summary>	
            <dd> <p>Directs DXGI to make the back-buffer contents appear without any scaling when the presentation target size is not equal to the back-buffer size. The top edges of the back buffer and presentation target are aligned together. If the WS_EX_LAYOUTRTL style is associated with the <strong><see cref="T:System.IntPtr"/></strong> handle to the target output window, the right edges of the back buffer and presentation target are aligned together; otherwise, the left edges are aligned together. All target area outside the back buffer is filled with window background color.</p> <p>This value specifies that all target areas outside the back buffer of a swap chain are filled with the background color that you specify in a call to <strong><see cref="M:SharpDX.DXGI.SwapChain1.SetBackgroundColor(SharpDX.Mathematics.Interop.RawColor4)"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING_NONE']/*"/>	
            <msdn-id>hh404526</msdn-id>	
            <unmanaged>DXGI_SCALING_NONE</unmanaged>	
            <unmanaged-short>DXGI_SCALING_NONE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Scaling.AspectRatioStretch">
            <summary>	
            <dd> <p>Windows Phone only. Directs DXGI to make the back-buffer contents scale to fit the presentation target size, while preserving the aspect ratio of the back-buffer. If the scaled back-buffer does not fill the presentation area, it will be centered with black borders.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING_ASPECT_RATIO_STRETCH']/*"/>	
            <msdn-id>hh404526</msdn-id>	
            <unmanaged>DXGI_SCALING_ASPECT_RATIO_STRETCH</unmanaged>	
            <unmanaged-short>DXGI_SCALING_ASPECT_RATIO_STRETCH</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SharedResourceFlags">
            <summary>	
            <p>Options for swap-chain behavior.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is used by the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> structure and the <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong> method.</p><p>This enumeration is also used by the  <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure.</p><p>You don't need to set <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> for swap chains that you create in full-screen mode  with the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method because those swap chains already behave as if <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is set. That is, presented content is not accessible by remote access or through the <strong>desktop duplication APIs</strong>.</p><p>Swap chains that you create with the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, and  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> methods are not protected if <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is not set and are protected if <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is set. When swap chains are protected, screen scraping is prevented and, in full-screen mode, presented content is not accessible through the <strong>desktop duplication APIs</strong>.</p><p>When you call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> to change the swap chain's back buffer, you can reset or change all <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> flags.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE_FLAGS']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SHARED_RESOURCE_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_SHARED_RESOURCE_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResourceFlags.Read">
            <summary>	
            <dd> <p>Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor.  Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE_READ']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SHARED_RESOURCE_READ</unmanaged>	
            <unmanaged-short>DXGI_SHARED_RESOURCE_READ</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResourceFlags.Write">
            <summary>	
            <dd> <p>Set this flag to enable an application to switch modes by calling <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong>.  When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE_WRITE']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SHARED_RESOURCE_WRITE</unmanaged>	
            <unmanaged-short>DXGI_SHARED_RESOURCE_WRITE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResourceFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapEffect">
            <summary>	
            <p>Options for handling pixels in a display surface after calling <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is used by the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> structure.</p><p>This enumeration is also used by the  <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure.</p><p>To use multisampling with <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> or <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>, you must perform the multisampling in a separate render target. For example, create a multisampled texture by calling <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> with a filled <strong><see cref="!:SharpDX.Direct3D11.Texture2DDescription"/></strong> structure (<strong>BindFlags</strong> member set to <strong><see cref="!:SharpDX.Direct3D11.BindFlags.RenderTarget"/></strong> and <strong>SampleDesc</strong> member with multisampling parameters). Next call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateRenderTargetView"/></strong> to create a render-target view for the texture, and render your scene into the texture. Finally call <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.ResolveSubresource_"/></strong> to resolve the multisampled texture into your non-multisampled swap chain.</p><p>The primary difference between presentation models is how back-buffer contents get to the Desktop Window Manager (DWM) for composition. In the bitblt model, which is used with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.Discard"/></strong> and <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> values, contents of the back buffer get copied into the redirection surface on each call to <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>. In the flip model, which is used with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value, all back buffers are shared with the DWM. Therefore, the DWM can compose straight from those back buffers without any additional copy operations.	
            In general, the flip model is the more efficient model. The flip model also provides more features, such as enhanced present statistics.	
            </p><p>When you call <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> on a flip model swap chain (<strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>) with 0 specified in the <em>SyncInterval</em> parameter, <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>'s behavior is the same as the behavior of Direct3D 9Ex's <strong>IDirect3DDevice9Ex::PresentEx</strong> with <strong>D3DSWAPEFFECT_FLIPEX</strong> and D3DPRESENT_FORCEIMMEDIATE. That is, the runtime not only presents the next frame instead of any previously queued frames, it also terminates any remaining time left on the previously queued frames.</p><p>Regardless of whether the flip model is more efficient, an application still might choose the bitblt model because the bitblt model is the only way to mix GDI and DirectX presentation. In the flip model, the application must create the swap chain with <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong>, and then must use <strong>GetDC</strong> on the back buffer explicitly. After the first successful call to <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> on a flip-model swap chain, GDI no longer works with the <strong><see cref="T:System.IntPtr"/></strong> that is associated with that swap chain, even after the destruction of the swap chain. This restriction even extends to methods like <strong>ScrollWindowEx</strong>.</p><p>For more info about the flip-model swap chain and optimizing presentation, see Enhancing presentation with the flip model, dirty rectangles, and scrolled areas.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.Discard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_DISCARD']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT_DISCARD</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT_DISCARD</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.Sequential">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_SEQUENTIAL']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.FlipSequential">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.FlipDiscard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_FLIP_DISCARD']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT_FLIP_DISCARD</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT_FLIP_DISCARD</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainColorSpaceSupportFlags">
            <summary>	
            <p>Specifies color space support for the swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG']/*"/>	
            <msdn-id>dn903668</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainColorSpaceSupportFlags.Present">
            <summary>	
            <dd> <p>Color space support is present.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT']/*"/>	
            <msdn-id>dn903668</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainColorSpaceSupportFlags.OverlayPresent">
            <summary>	
            <dd> <p>Overlay color space support is present.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT']/*"/>	
            <msdn-id>dn903668</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainColorSpaceSupportFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainFlags">
            <summary>	
            <p>Options for swap-chain behavior.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is used by the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> structure and the <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong> method.</p><p>This enumeration is also used by the  <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure.</p><p>You don't need to set <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> for swap chains that you create in full-screen mode  with the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method because those swap chains already behave as if <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is set. That is, presented content is not accessible by remote access or through the <strong>desktop duplication APIs</strong>.</p><p>Swap chains that you create with the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, and  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> methods are not protected if <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is not set and are protected if <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/></strong> is set. When swap chains are protected, screen scraping is prevented and, in full-screen mode, presented content is not accessible through the <strong>desktop duplication APIs</strong>.</p><p>When you call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> to change the swap chain's back buffer, you can reset or change all <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> flags.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.Nonprerotated">
            <summary>	
            <dd> <p>Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor.  Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_NONPREROTATED']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.AllowModeSwitch">
            <summary>	
            <dd> <p>Set this flag to enable an application to switch modes by calling <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong>.  When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible">
            <summary>	
            <dd> <p>Set this flag to enable an application to render using GDI on a swap chain or a surface.  This will allow the application to call <strong><see cref="M:SharpDX.DXGI.Surface1.GetDC(SharpDX.Mathematics.Interop.RawBool)"/></strong> on the 0th back buffer or a surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.RestrictedContent">
            <summary>	
            <dd> <p>Set this flag to indicate that the swap chain might contain protected content; therefore, the operating system supports the creation of the swap chain only when driver and hardware protection is used.  If the driver and hardware do not support content protection, the call to create a resource for the swap chain fails.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.RestrictSharedResourceDriver">
            <summary>	
            <dd> <p>Set this flag to indicate that shared resources that are created within the swap chain must be protected by using the driver?s mechanism for restricting access to shared surfaces.</p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly">
            <summary>	
            <dd> <p>Set this flag to restrict presented content to the local displays. Therefore, the presented content is not accessible via remote accessing or through the <strong>desktop duplication APIs</strong>.  </p> <p>This flag supports the window content protection features of Windows. Applications can use this flag to protect their own onscreen window content from being captured or copied through a specific set of public operating system features and APIs.</p> <p>If you use this flag with windowed (<strong><see cref="T:System.IntPtr"/></strong> or <strong>IWindow</strong>) swap chains where another process created the <strong><see cref="T:System.IntPtr"/></strong>, the owner of the <strong><see cref="T:System.IntPtr"/></strong> must use the  <strong>SetWindowDisplayAffinity</strong> function appropriately in order to allow calls to <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> to succeed.	
            </p> <p><strong>Direct3D 11:??</strong>This enumeration value is supported starting with Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject">
            <summary>	
            <dd> <p>Set this flag to create a waitable object you can use to ensure rendering does not begin while a frame is still being presented. When this flag is used, the swapchain's latency must be set with the <strong><see cref="M:SharpDX.DXGI.SwapChain2.SetMaximumFrameLatency(System.Int32)"/></strong> API instead of <strong><see cref="M:SharpDX.DXGI.Device1.SetMaximumFrameLatency(System.Int32)"/></strong>.</p> <p><strong>Note</strong>??This enumeration value is supported starting with Windows?8.1.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.ForegroundLayer">
            <summary>	
            <dd> <p>Set this flag to create a swap chain in the foreground layer for multi-plane rendering. This flag can only be used with <strong>CoreWindow</strong> swap chains, which are created with <strong>CreateSwapChainForCoreWindow</strong>. Apps should not create foreground swap chains if <strong><see cref="M:SharpDX.DXGI.Output2.SupportsOverlays_"/></strong> indicates that hardware support for overlays is not available.</p> <p>Note that <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> cannot be used to add or remove this flag.</p> <p><strong>Note</strong>??This enumeration value is supported starting with Windows?8.1.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.FullScreenVideo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.YuvVideo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.HwProtected">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Usage">
            <summary>	
            <p>Flags for surface and resource creation options.</p><p></p>	
            </summary>	
            <remarks>	
            <p>Each flag is defined as an unsigned integer.</p><code> #define DXGI_CPU_ACCESS_NONE    ( 0 )	
            #define DXGI_CPU_ACCESS_DYNAMIC    ( 1 )	
            #define DXGI_CPU_ACCESS_READ_WRITE    ( 2 )	
            #define DXGI_CPU_ACCESS_SCRATCH    ( 3 )	
            #define DXGI_CPU_ACCESS_FIELD        15	
            #define <see cref="F:SharpDX.DXGI.Usage.ShaderInput"/>             ( 1L &lt;&lt; (0 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.RenderTargetOutput"/>     ( 1L &lt;&lt; (1 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.BackBuffer"/>              ( 1L &lt;&lt; (2 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.Shared"/>                   ( 1L &lt;&lt; (3 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.ReadOnly"/>                ( 1L &lt;&lt; (4 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.DiscardOnPresent"/>       ( 1L &lt;&lt; (5 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.UnorderedAccess"/>         ( 1L &lt;&lt; (6 + 4) )	
            typedef UINT DXGI_USAGE;</code><p>These flag options are used in a call to the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to describe the surface usage and CPU access options for the back buffer of a swap chain. You can't use the <strong><see cref="F:SharpDX.DXGI.Usage.Shared"/></strong>, <strong><see cref="F:SharpDX.DXGI.Usage.DiscardOnPresent"/></strong>, and <strong><see cref="F:SharpDX.DXGI.Usage.ReadOnly"/></strong> values as input to create a swap chain. However, DXGI can set <strong><see cref="F:SharpDX.DXGI.Usage.DiscardOnPresent"/></strong> and <strong><see cref="F:SharpDX.DXGI.Usage.ReadOnly"/></strong> for some of the swap chain's back buffers on the application's behalf. You can call the <strong><see cref="M:SharpDX.DXGI.Resource.GetUsage(System.Int32)"/></strong> method to retrieve the usage of these back buffers.	
            Swap chain's only support the <strong>DXGI_CPU_ACCESS_NONE</strong> value in the <strong>DXGI_CPU_ACCESS_FIELD</strong> part of <strong>DXGI_USAGE</strong>.</p><p>These flag options are also used by the <strong><see cref="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_ENUM']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_ENUM</unmanaged>	
            <unmanaged-short>DXGI_USAGE_ENUM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.ShaderInput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_SHADER_INPUT']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_SHADER_INPUT</unmanaged>	
            <unmanaged-short>DXGI_USAGE_SHADER_INPUT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.RenderTargetOutput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_RENDER_TARGET_OUTPUT']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged>	
            <unmanaged-short>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.BackBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_BACK_BUFFER']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_BACK_BUFFER</unmanaged>	
            <unmanaged-short>DXGI_USAGE_BACK_BUFFER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.Shared">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_SHARED']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_SHARED</unmanaged>	
            <unmanaged-short>DXGI_USAGE_SHARED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.ReadOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_READ_ONLY']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_READ_ONLY</unmanaged>	
            <unmanaged-short>DXGI_USAGE_READ_ONLY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.DiscardOnPresent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_DISCARD_ON_PRESENT']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged>	
            <unmanaged-short>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.UnorderedAccess">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_UNORDERED_ACCESS']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_UNORDERED_ACCESS</unmanaged>	
            <unmanaged-short>DXGI_USAGE_UNORDERED_ACCESS</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.WindowAssociationFlags">
            <summary>	
            <p>Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).</p>	
            </summary>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>The combination of <em>WindowHandle</em> and <em>Flags</em> informs DXGI to stop monitoring window messages for the previously-associated window.</p><p>If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.</p><p>Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to <strong>ResizeBuffers</strong> on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.</p><p>While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <strong><see cref="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)"/></strong>. If a matching mode is found, allow the resize. (The <see cref="T:SharpDX.DXGI.Output"/> can be retrieved from <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)</p><p>Applications that want to handle mode changes or Alt+Enter themselves should call <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swap chain creation. The <em>WindowHandle</em> argument, if non-<strong><c>null</c></strong>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <strong><see cref="T:System.IntPtr"/></strong>.  Calling <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_FLAGS']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_MWA_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll">
            <summary>	
            <dd>  <p>The handle of the window that is to be monitored. This parameter can be <strong><c>null</c></strong>; but only if the flags are also 0. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_WINDOW_CHANGES']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged>	
            <unmanaged-short>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter">
            <summary>	
            <dd>  <p>One or more of the following values:	
            </p> <ul> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter"/> - Prevent DXGI from responding to an alt-enter sequence.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen"/> - Prevent DXGI from responding to a print-screen key.</li> </ul> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_ALT_ENTER']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_NO_ALT_ENTER</unmanaged>	
            <unmanaged-short>DXGI_MWA_NO_ALT_ENTER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_PRINT_SCREEN']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_NO_PRINT_SCREEN</unmanaged>	
            <unmanaged-short>DXGI_MWA_NO_PRINT_SCREEN</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.Valid">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_VALID']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_VALID</unmanaged>	
            <unmanaged-short>DXGI_MWA_VALID</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DXGI">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.DXGI.DXGI']/*"/>	
        </member>
        <member name="F:SharpDX.DXGI.DXGI.CreateFactoryDebug">
            <summary>Constant CreateFactoryDebug.</summary>
            <unmanaged>DXGI_CREATE_FACTORY_DEBUG</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.DXGI.CreateDXGIFactory1(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Creates a DXGI 1.1 factory that you can use to generate other  DXGI objects.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The globally unique identifier (<see cref="T:System.Guid"/>) of the <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> object referenced by  the <em>ppFactory</em> parameter.</p> </dd></param>	
            <param name="factoryOut"><dd>  <p>Address of a reference to an <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> object.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>Use a DXGI 1.1 factory to generate objects that <strong>enumerate adapters</strong>,  <strong>create swap chains</strong>, and <strong>associate a window</strong> with  the alt+enter key sequence for toggling to and from the full-screen display mode.  </p><p>If the <strong>CreateDXGIFactory1</strong> function succeeds, the reference count on the <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> interface is incremented. To avoid a memory leak, when you finish using the interface, call the <strong>IDXGIFactory1::Release</strong> method to release the interface.</p><p>This entry point is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Note</strong>??Do not mix the use of DXGI 1.0 (<strong><see cref="T:SharpDX.DXGI.Factory"/></strong>) and DXGI 1.1 (<strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>) in an application. Use <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> or <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>, but not both in an application.</p><p><strong>Note</strong>??<strong>CreateDXGIFactory1</strong> fails if your app's <strong>DllMain</strong> function calls it. For more info about how DXGI responds from <strong>DllMain</strong>, see DXGI Responses from DLLMain.</p><p><strong>Note</strong>??Starting with Windows?8, all DXGI factories (regardless if they were created with <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong>) enumerate adapters identically. The enumeration order of adapters, which you retrieve with <strong><see cref="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)"/></strong> or <strong><see cref="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)"/></strong>, is as follows: </p><ul> <li>Adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero.</li> <li>Adapters with outputs.</li> <li>Adapters without outputs.</li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p><p><strong>Windows Phone 8.1:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='CreateDXGIFactory1']/*"/>	
            <msdn-id>ff471318</msdn-id>	
            <unmanaged>HRESULT CreateDXGIFactory1([In] const GUID&amp; riid,[Out] void** ppFactory)</unmanaged>	
            <unmanaged-short>CreateDXGIFactory1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGI.CreateDXGIFactory2(System.Int32,System.Guid,System.IntPtr@)">
            <summary>	
            <p>Creates a DXGI 1.3 factory that you can use to generate other  DXGI objects.</p><p>In Windows?8, any DXGI factory created while DXGIDebug.dll was present on the system would load and use it. Starting in Windows?8.1, apps explicitly request that DXGIDebug.dll be loaded instead. Use <strong>CreateDXGIFactory2</strong> and specify the <see cref="F:SharpDX.DXGI.DXGI.CreateFactoryDebug"/> flag to request DXGIDebug.dll; the DLL will be loaded if it is present on the system.</p>	
            </summary>	
            <param name="flags"><dd>  <p>Valid values include the <strong><see cref="F:SharpDX.DXGI.DXGI.CreateFactoryDebug"/> (0x01)</strong> flag, and zero.</p> <p><strong>Note</strong>??This flag will be set by the D3D runtime if:</p><ul> <li>The system creates an implicit factory during device creation.</li> <li>The <see cref="!:SharpDX.Direct3D11.DeviceCreationFlags.Debug"/> flag is specified during device creation, for example using <strong><see cref="!:SharpDX.Direct3D11.D3D11.CreateDevice"/></strong> (or the swapchain method, or the Direct3D 10 equivalents).</li> </ul> </dd></param>	
            <param name="riid"><dd>  <p>The globally unique identifier (<see cref="T:System.Guid"/>) of the <strong><see cref="T:SharpDX.DXGI.Factory2"/></strong> object referenced by  the <em>ppFactory</em> parameter.</p> </dd></param>	
            <param name="factoryOut"><dd>  <p>Address of a reference to an <strong><see cref="T:SharpDX.DXGI.Factory2"/></strong> object.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>This function accepts a flag indicating whether DXGIDebug.dll is loaded. The function otherwise behaves identically to <strong>CreateDXGIFactory1</strong>.</p><p><strong>Windows Phone 8.1:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='CreateDXGIFactory2']/*"/>	
            <msdn-id>dn268307</msdn-id>	
            <unmanaged>HRESULT CreateDXGIFactory2([In] unsigned int Flags,[In] const GUID&amp; riid,[Out] void** ppFactory)</unmanaged>	
            <unmanaged-short>CreateDXGIFactory2</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ResultCode">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.DXGI.ResultCode']/*"/>	
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.CannotProtectContent">
            <summary>Constant CannotProtectContent.</summary>
            <unmanaged>DXGI_ERROR_CANNOT_PROTECT_CONTENT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.AccessLost">
            <summary>Constant AccessLost.</summary>
            <unmanaged>DXGI_ERROR_ACCESS_LOST</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.WaitTimeout">
            <summary>Constant WaitTimeout.</summary>
            <unmanaged>DXGI_ERROR_WAIT_TIMEOUT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.FrameStatisticsDisjoint">
            <summary>Constant FrameStatisticsDisjoint.</summary>
            <unmanaged>DXGI_ERROR_FRAME_STATISTICS_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.SessionDisconnected">
            <summary>Constant SessionDisconnected.</summary>
            <unmanaged>DXGI_ERROR_SESSION_DISCONNECTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.HwProtectionOufOfMemory">
            <summary>Constant HwProtectionOufOfMemory.</summary>
            <unmanaged>DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.NotCurrent">
            <summary>Constant NotCurrent.</summary>
            <unmanaged>DXGI_ERROR_NOT_CURRENT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.RestrictToOutputStale">
            <summary>Constant RestrictToOutputStale.</summary>
            <unmanaged>DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DeviceReset">
            <summary>Constant DeviceReset.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_RESET</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DriverInternalError">
            <summary>Constant DriverInternalError.</summary>
            <unmanaged>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.InvalidCall">
            <summary>Constant InvalidCall.</summary>
            <unmanaged>DXGI_ERROR_INVALID_CALL</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.NotFound">
            <summary>Constant NotFound.</summary>
            <unmanaged>DXGI_ERROR_NOT_FOUND</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.WasStillDrawing">
            <summary>Constant WasStillDrawing.</summary>
            <unmanaged>DXGI_ERROR_WAS_STILL_DRAWING</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.NameAlreadyExists">
            <summary>Constant NameAlreadyExists.</summary>
            <unmanaged>DXGI_ERROR_NAME_ALREADY_EXISTS</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.Unsupported">
            <summary>Constant Unsupported.</summary>
            <unmanaged>DXGI_ERROR_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.RemoteClientDisconnected">
            <summary>Constant RemoteClientDisconnected.</summary>
            <unmanaged>DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DeviceRemoved">
            <summary>Constant DeviceRemoved.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_REMOVED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DeviceHung">
            <summary>Constant DeviceHung.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_HUNG</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.SdkComponentMissing">
            <summary>Constant SdkComponentMissing.</summary>
            <unmanaged>DXGI_ERROR_SDK_COMPONENT_MISSING</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.AccessDenied">
            <summary>Constant AccessDenied.</summary>
            <unmanaged>DXGI_ERROR_ACCESS_DENIED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.RemoteOufOfMemory">
            <summary>Constant RemoteOufOfMemory.</summary>
            <unmanaged>DXGI_ERROR_REMOTE_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.MoreData">
            <summary>Constant MoreData.</summary>
            <unmanaged>DXGI_ERROR_MORE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.ModeChangeInProgress">
            <summary>Constant ModeChangeInProgress.</summary>
            <unmanaged>DXGI_ERROR_MODE_CHANGE_IN_PROGRESS</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.Nonexclusive">
            <summary>Constant Nonexclusive.</summary>
            <unmanaged>DXGI_ERROR_NONEXCLUSIVE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.GraphicsVidpnSourceInUse">
            <summary>Constant GraphicsVidpnSourceInUse.</summary>
            <unmanaged>DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable">
            <summary>Constant NotCurrentlyAvailable.</summary>
            <unmanaged>DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Adapter1">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Adapter1"/></strong> interface represents a display sub-system (including one or more GPU's, DACs and video memory).</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>A display sub-system is often referred to as a video card, however, on some machines the display sub-system is part of the mother board.</p><p>To enumerate the display sub-systems, use <strong><see cref="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)"/></strong>. To get an interface to the adapter for a  particular device, use <strong><see cref="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)"/></strong>. To create a software adapter, use <strong><see cref="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1']/*"/>	
            <msdn-id>ff471329</msdn-id>	
            <unmanaged>IDXGIAdapter1</unmanaged>	
            <unmanaged-short>IDXGIAdapter1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Adapter1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Adapter1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)">
            <summary>	
            <p>Gets a DXGI 1.1 description of an adapter (or video card).</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> structure that describes the adapter.   This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> and ?Software Adapter? for the description string in the <strong>Description</strong> member.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>GetDesc1</strong> method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
            <msdn-id>ff471330</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIAdapter1::GetDesc1</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter1.Description1">
            <summary>	
            <p>Gets a DXGI 1.1 description of an adapter (or video card).</p>	
            </summary>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>GetDesc1</strong> method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
            <msdn-id>ff471330</msdn-id>	
            <unmanaged>GetDesc1</unmanaged>	
            <unmanaged-short>GetDesc1</unmanaged-short>	
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Adapter2">
            <summary>	
            <p>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.</p>	
            </summary>	
            <remarks>	
            <p>Use the <strong>GetDesc2</strong> method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <strong><see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/></strong> method. To get a DXGI 1.0 description, use the <strong><see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/></strong> method.</p><p>The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet. </p><p>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <strong>GetDesc2</strong> method to retrieve the granularity levels for graphics and compute tasks.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter2']/*"/>	
            <msdn-id>hh404540</msdn-id>	
            <unmanaged>IDXGIAdapter2</unmanaged>	
            <unmanaged-short>IDXGIAdapter2</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter2.op_Explicit(System.IntPtr)~SharpDX.DXGI.Adapter2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Adapter2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter2.GetDescription2(SharpDX.DXGI.AdapterDescription2@)">
            <summary>	
            <p>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.</p>	
            </summary>	
            <param name="descRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.DXGI.AdapterDescription2"/></strong> structure that describes the adapter.   This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, earlier versions of  <strong>GetDesc2</strong> (<strong>GetDesc</strong> and <strong>GetDesc1</strong>) return zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of the adapter description structure and ?Software Adapter? for the description string in the <strong>Description</strong> member. <strong>GetDesc2</strong> returns the actual feature level 9 hardware values in these members.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
            <remarks>	
            <p>Use the <strong>GetDesc2</strong> method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <strong><see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/></strong> method. To get a DXGI 1.0 description, use the <strong><see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/></strong> method.</p><p>The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet. </p><p>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <strong>GetDesc2</strong> method to retrieve the granularity levels for graphics and compute tasks.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter2::GetDesc2']/*"/>	
            <msdn-id>hh404540</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIAdapter2::GetDesc2</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter2.Description2">
            <summary>	
            <p>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.</p>	
            </summary>	
            <remarks>	
            <p>Use the <strong>GetDesc2</strong> method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <strong><see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/></strong> method. To get a DXGI 1.0 description, use the <strong><see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/></strong> method.</p><p>The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet. </p><p>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <strong>GetDesc2</strong> method to retrieve the granularity levels for graphics and compute tasks.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter2::GetDesc2']/*"/>	
            <msdn-id>hh404540</msdn-id>	
            <unmanaged>GetDesc2</unmanaged>	
            <unmanaged-short>GetDesc2</unmanaged-short>	
            <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Adapter3">
            <summary>	
            <p> The <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface represents a display subsystem (including one or more GPUs, DACs and video memory). </p>	
            </summary>	
            <remarks>	
            <p> A display subsystem is often referred to as a video card, however, on some machines the display subsystem is part of the motherboard. </p><p> To enumerate the display subsystems, use <strong><see cref="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)"/></strong>. </p><p> To get an interface to the adapter for a particular device, use <strong><see cref="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)"/></strong>. </p><p> To create a software adapter, use <strong><see cref="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)"/></strong>. </p><p><strong>Windows?Phone?8: </strong> This API is supported. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3']/*"/>	
            <msdn-id>bb174523</msdn-id>	
            <unmanaged>IDXGIAdapter3</unmanaged>	
            <unmanaged-short>IDXGIAdapter3</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter3"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.op_Explicit(System.IntPtr)~SharpDX.DXGI.Adapter3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Adapter3"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.RegisterHardwareContentProtectionTeardownStatusEvent(System.IntPtr,System.Int32@)">
            <summary>	
            <p>Registers to receive notification of hardware content protection teardown events.</p>	
            </summary>	
            <param name="hEvent"><dd>  <p>A handle to the event object that the operating system sets when hardware content protection teardown occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. </p> </dd></param>	
            <param name="dwCookieRef"><dd>  <p>A reference to a key value that an application can pass to the <strong><see cref="M:SharpDX.DXGI.Adapter3.UnregisterHardwareContentProtectionTeardownStatus(System.Int32)"/></strong> method to unregister the notification event that <em>hEvent</em> specifies.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>Call <strong><see cref="!:SharpDX.Direct3D11.VideoDevice.GetContentProtectionCaps"/></strong>() to check for the presence of the <strong><see cref="!:SharpDX.Direct3D11.ContentProtectionCaps.HardwareTeardown"/></strong> capability to know whether the hardware contains an automatic teardown mechanism. After the event is signaled, the application can call <strong><see cref="!:SharpDX.Direct3D11.VideoContext1.CheckCryptoSessionStatus"/></strong> to determine the impact of the hardware teardown for a specific <strong><see cref="!:SharpDX.Direct3D11.CryptoSession"/></strong> interface.	
            </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent']/*"/>	
            <msdn-id>dn933230</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
            <unmanaged-short>IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.UnregisterHardwareContentProtectionTeardownStatus(System.Int32)">
            <summary>	
            <p>Registers to receive notification of hardware content protection teardown events.</p>	
            </summary>	
            <param name="dwCookie"><dd>  <p>A handle to the event object that the operating system sets when hardware content protection teardown occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. </p> </dd></param>	
            <remarks>	
            <p>Call <strong><see cref="!:SharpDX.Direct3D11.VideoDevice.GetContentProtectionCaps"/></strong>() to check for the presence of the <strong><see cref="!:SharpDX.Direct3D11.ContentProtectionCaps.HardwareTeardown"/></strong> capability to know whether the hardware contains an automatic teardown mechanism. After the event is signaled, the application can call <strong><see cref="!:SharpDX.Direct3D11.VideoContext1.CheckCryptoSessionStatus"/></strong> to determine the impact of the hardware teardown for a specific <strong><see cref="!:SharpDX.Direct3D11.CryptoSession"/></strong> interface.	
            </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus']/*"/>	
            <msdn-id>dn933230</msdn-id>	
            <unmanaged>void IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus([In] unsigned int dwCookie)</unmanaged>	
            <unmanaged-short>IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.QueryVideoMemoryInfo(System.Int32,SharpDX.DXGI.MemorySegmentGroup,SharpDX.DXGI.QueryVideoMemoryInformation@)">
            <summary>	
            <p> This method informs the process of the current budget and process usage. </p>	
            </summary>	
            <param name="nodeIndex"><dd>  <p> Specifies the device's physical adapter for which the video memory information is queried. For single-GPU operation, set this to zero. If there are multiple GPU nodes, set this to the index of the node (the device's physical adapter) for which the video memory information is queried. See Multi-Adapter. </p> </dd></param>	
            <param name="memorySegmentGroup"><dd>  <p> Specifies a <see cref="T:SharpDX.DXGI.MemorySegmentGroup"/> that identifies the group as local or non-local. </p> </dd></param>	
            <param name="videoMemoryInfoRef"><dd>  <p> Fills in a <see cref="T:SharpDX.DXGI.QueryVideoMemoryInformation"/> structure with the current values. </p> </dd></param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
            <remarks>	
            <p> Applications must explicitly manage their usage of physical memory explicitly and keep usage within the budget assigned to the application process. Processes that cannot kept their usage within their assigned budgets will likely experience stuttering, as they are intermittently frozen and paged-out to allow other processes to run. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3::QueryVideoMemoryInfo']/*"/>	
            <msdn-id>dn933223</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter3::QueryVideoMemoryInfo([In] unsigned int NodeIndex,[In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup,[Out] DXGI_QUERY_VIDEO_MEMORY_INFO* pVideoMemoryInfo)</unmanaged>	
            <unmanaged-short>IDXGIAdapter3::QueryVideoMemoryInfo</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.SetVideoMemoryReservation(System.Int32,SharpDX.DXGI.MemorySegmentGroup,System.Int64)">
            <summary>	
            <p> This method sends the minimum required physical memory for an application, to the OS. </p>	
            </summary>	
            <param name="nodeIndex"><dd>  <p> Specifies the device's physical adapter for which the video memory information is being set. For single-GPU operation, set this to zero. If there are multiple GPU nodes, set this to the index of the node (the device's physical adapter) for which the video memory information is being set. See Multi-Adapter. </p> </dd></param>	
            <param name="memorySegmentGroup"><dd>  <p> Specifies a <see cref="T:SharpDX.DXGI.MemorySegmentGroup"/> that identifies the group as local or non-local. </p> </dd></param>	
            <param name="reservation"><dd>  <p> Specifies a UINT64 that sets the minimum required physical memory, in bytes. </p> </dd></param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
            <remarks>	
            <p> Applications are encouraged to set a video reservation to denote the amount of physical memory they cannot go without. This value helps the OS quickly minimize the impact of large memory pressure situations. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3::SetVideoMemoryReservation']/*"/>	
            <msdn-id>dn933232</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter3::SetVideoMemoryReservation([In] unsigned int NodeIndex,[In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup,[In] unsigned longlong Reservation)</unmanaged>	
            <unmanaged-short>IDXGIAdapter3::SetVideoMemoryReservation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.RegisterVideoMemoryBudgetChangeNotificationEvent(System.IntPtr,System.Int32@)">
            <summary>	
            <p>This method establishes a correlation between a CPU synchronization object and the budget change event.</p>	
            </summary>	
            <param name="hEvent"><dd>  <p>Specifies a HANDLE for the event.</p> </dd></param>	
            <param name="dwCookieRef"><dd>  <p>A key value for the window or event to unregister. The  <strong><see cref="M:SharpDX.DXGI.Adapter3.RegisterHardwareContentProtectionTeardownStatusEvent(System.IntPtr,System.Int32@)"/></strong> method returns this value. </p> </dd></param>	
            <returns><p>This method returns an <see cref="T:SharpDX.Result"/> success or error code.</p></returns>	
            <remarks>	
            <p>Instead of calling <strong>QueryVideoMemoryInfo</strong> regularly, applications can use CPU synchronization objects to efficiently wake threads when budget changes occur. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent']/*"/>	
            <msdn-id>dn933231</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
            <unmanaged-short>IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter3.UnregisterVideoMemoryBudgetChangeNotification(System.Int32)">
            <summary>	
            <p>This method stops notifying a CPU synchronization object whenever a budget change occurs. An application may switch back to polling the information regularly.</p>	
            </summary>	
            <param name="dwCookie"><dd>  <p>A key value for the window or event to unregister. The  <strong><see cref="M:SharpDX.DXGI.Adapter3.RegisterHardwareContentProtectionTeardownStatusEvent(System.IntPtr,System.Int32@)"/></strong> method returns this value. </p> </dd></param>	
            <remarks>	
            <p>An application may switch back to polling for the information regularly.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification']/*"/>	
            <msdn-id>dn933234</msdn-id>	
            <unmanaged>void IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification([In] unsigned int dwCookie)</unmanaged>	
            <unmanaged-short>IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DecodeSwapChain">
            <summary>	
            <p>Represents a swap chain that is used by desktop media apps to decode video data and show it on a DirectComposition surface.</p>	
            </summary>	
            <remarks>	
            <p>Decode swap chains are intended for use primarily with YUV surface formats. When using decode buffers created with an RGB surface format, the <em>TargetRect</em> and <em>DestSize</em> must be set equal to the buffer dimensions. <em>SourceRect</em> cannot exceed the buffer dimensions.</p><p>In clone mode, the decode swap chain is only guaranteed to be shown on the primary output.</p><p>Decode swap chains cannot be used with dirty rects.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain']/*"/>	
            <msdn-id>dn384109</msdn-id>	
            <unmanaged>IDXGIDecodeSwapChain</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DecodeSwapChain"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.op_Explicit(System.IntPtr)~SharpDX.DXGI.DecodeSwapChain">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.DecodeSwapChain"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.PresentBuffer(System.Int32,System.Int32,System.Int32)">
            <summary>	
            <p>Presents a frame on the output adapter. The frame is a subresource of the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> object that was used to create the decode swap chain.</p>	
            </summary>	
            <param name="bufferToPresent">No documentation.</param>	
            <param name="syncInterval">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <returns><p>This method returns <strong><see cref="F:SharpDX.Result.Ok"/></strong> on success, or it returns one of the following error codes:</p><ul> <li><see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/></li> <li><see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/></li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/></li> <li><strong>E_OUTOFMEMORY</strong></li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::PresentBuffer']/*"/>	
            <msdn-id>dn384123</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::PresentBuffer([In] unsigned int BufferToPresent,[In] unsigned int SyncInterval,[In] unsigned int Flags)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::PresentBuffer</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.SetSourceRect(SharpDX.Mathematics.Interop.RawRectangle)">
            <summary>	
            <p>Sets the rectangle that defines the source region for the video processing blit operation.</p><p>The source rectangle is the portion of the input surface that is blitted to the destination surface. The source rectangle is given in pixel coordinates, relative to the input surface.</p>	
            </summary>	
            <param name="rectRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that contains the source region to set for the swap chain.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::SetSourceRect']/*"/>	
            <msdn-id>dn384126</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetSourceRect([In] const RECT* pRect)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::SetSourceRect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.SetTargetRect(SharpDX.Mathematics.Interop.RawRectangle)">
            <summary>	
            <p>Sets the rectangle that defines the target region for the video processing blit operation.</p><p>The target rectangle is the area within the destination surface where the output will be drawn. The target rectangle is given in pixel coordinates, relative to the destination surface.</p>	
            </summary>	
            <param name="rectRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that contains the target region to set for the swap chain.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::SetTargetRect']/*"/>	
            <msdn-id>dn384127</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetTargetRect([In] const RECT* pRect)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::SetTargetRect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.SetDestSize(System.Int32,System.Int32)">
            <summary>	
            <p>Sets the size of the destination surface to use for the video processing blit operation.</p><p>The destination rectangle is the portion of the output surface that receives the blit for this stream. The destination rectangle is given in pixel coordinates, relative to the output surface.</p>	
            </summary>	
            <param name="width"><dd> <p>The width of the destination size, in pixels.</p> </dd></param>	
            <param name="height"><dd> <p>The height of the destination size, in pixels.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::SetDestSize']/*"/>	
            <msdn-id>dn384125</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetDestSize([In] unsigned int Width,[In] unsigned int Height)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::SetDestSize</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.GetSourceRect(SharpDX.Mathematics.Interop.RawRectangle@)">
            <summary>	
            <p>Gets the source region that is used for the swap chain.</p>	
            </summary>	
            <param name="rectRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that receives the source region for the swap chain.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetSourceRect']/*"/>	
            <msdn-id>dn384121</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::GetSourceRect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.GetTargetRect(SharpDX.Mathematics.Interop.RawRectangle@)">
            <summary>	
            <p>Gets the rectangle that defines the target region for the video processing blit operation.</p>	
            </summary>	
            <param name="rectRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that receives the target region for the swap chain.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetTargetRect']/*"/>	
            <msdn-id>dn384122</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::GetTargetRect</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.GetDestSize(System.Int32@,System.Int32@)">
            <summary>	
            <p>Gets the size of the destination surface to use for the video processing blit operation.</p>	
            </summary>	
            <param name="widthRef"><dd> <p>A reference to a variable that receives the width in pixels.</p> </dd></param>	
            <param name="heightRef"><dd> <p>A reference to a variable that receives the height in pixels.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetDestSize']/*"/>	
            <msdn-id>dn384120</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetDestSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::GetDestSize</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.SetColorSpace(SharpDX.DXGI.MultiplaneOverlayYCbCrFlags)">
            <summary>	
            <p>Sets the color space used by the swap chain.</p>	
            </summary>	
            <param name="colorSpace"><dd> <p>A reference to a combination of <strong><see cref="T:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space to set for the swap chain.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::SetColorSpace']/*"/>	
            <msdn-id>dn384124</msdn-id>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetColorSpace([In] DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::SetColorSpace</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DecodeSwapChain.GetColorSpace">
            <summary>	
            <p>Gets the color space used by the swap chain.</p>	
            </summary>	
            <returns><p>A combination of <strong><see cref="T:SharpDX.DXGI.MultiplaneOverlayYCbCrFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space for the swap chain.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetColorSpace']/*"/>	
            <msdn-id>dn384119</msdn-id>	
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace()</unmanaged>	
            <unmanaged-short>IDXGIDecodeSwapChain::GetColorSpace</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.DecodeSwapChain.SourceRect">
            <summary>	
            <p>Gets or sets the source region that is used for the swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetSourceRect']/*"/>	
            <msdn-id>dn384121</msdn-id>	
            <unmanaged>GetSourceRect / SetSourceRect</unmanaged>	
            <unmanaged-short>GetSourceRect</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.DecodeSwapChain.TargetRect">
            <summary>	
            <p>Gets or sets the rectangle that defines the target region for the video processing blit operation.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetTargetRect']/*"/>	
            <msdn-id>dn384122</msdn-id>	
            <unmanaged>GetTargetRect / SetTargetRect</unmanaged>	
            <unmanaged-short>GetTargetRect</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.DecodeSwapChain.ColorSpace">
            <summary>	
            <p>Gets or sets the color space used by the swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDecodeSwapChain::GetColorSpace']/*"/>	
            <msdn-id>dn384119</msdn-id>	
            <unmanaged>GetColorSpace / SetColorSpace</unmanaged>	
            <unmanaged-short>GetColorSpace</unmanaged-short>	
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace()</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Device1">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>The <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="T:SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface. To retrieve the <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="T:SharpDX.DXGI.Device1"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device1"/>), (void **)&amp;pDXGIDevice);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1']/*"/>	
            <msdn-id>ff471331</msdn-id>	
            <unmanaged>IDXGIDevice1</unmanaged>	
            <unmanaged-short>IDXGIDevice1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Device1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Device1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Device1.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            <p>Sets the number of frames that the system is allowed to queue for rendering.</p>	
            </summary>	
            <param name="maxLatency"><dd>  <p>The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but  can range from 1 to 16. A value of 0 will reset latency to the default.  For multi-head devices, this value is specified per-head.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> if the device was removed.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often used to  control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications that  have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::SetMaximumFrameLatency']/*"/>	
            <msdn-id>ff471334</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
            <unmanaged-short>IDXGIDevice1::SetMaximumFrameLatency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.GetMaximumFrameLatency(System.Int32@)">
            <summary>	
            <p>Gets the number of frames that the system is allowed to queue for rendering.</p>	
            </summary>	
            <param name="maxLatencyRef"><dd>  <p>This value is set to the number of frames that can be queued for render.   This value defaults to 3, but can range from 1 to 16.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following members of the D3DERR enumerated type:</p><ul> <li><strong>D3DERR_DEVICELOST</strong></li> <li><strong>D3DERR_DEVICEREMOVED</strong></li> <li><strong>D3DERR_DRIVERINTERNALERROR</strong></li> <li><strong>D3DERR_INVALIDCALL</strong></li> <li><strong>D3DERR_OUTOFVIDEOMEMORY</strong></li> </ul></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
            <msdn-id>ff471332</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
            <unmanaged-short>IDXGIDevice1::GetMaximumFrameLatency</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Device1.MaximumFrameLatency">
            <summary>	
            <p>Gets or sets the number of frames that the system is allowed to queue for rendering.</p>	
            </summary>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
            <msdn-id>ff471332</msdn-id>	
            <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>	
            <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Device2">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="T:SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2']/*"/>	
            <msdn-id>bb174527</msdn-id>	
            <unmanaged>IDXGIDevice2</unmanaged>	
            <unmanaged-short>IDXGIDevice2</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.op_Explicit(System.IntPtr)~SharpDX.DXGI.Device2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Device2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)">
            <summary>	
            <p>Allows the operating system to free the video memory of resources by discarding their content.</p>	
            </summary>	
            <param name="numResources"><dd> <p>The number of resources in the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="resourcesOut"><dd> <p>An array of references to <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces for the resources to offer.</p> </dd></param>	
            <param name="priority"><dd> <p>A <strong><see cref="T:SharpDX.DXGI.OfferResourcePriority"/></strong>-typed value that indicates how valuable data is.</p> </dd></param>	
            <returns><p><strong>OfferResources</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if resources were successfully offered</li> <li>E_INVALIDARG if a resource in the array or the priority is invalid</li> </ul></returns>	
            <remarks>	
            <p>The priority value that the  <em>Priority</em> parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.</p><p>If you call <strong>OfferResources</strong> to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call <strong>OfferResources</strong> on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the <strong>IDXGIDevice2::ReclaimResource</strong> method to reclaim the resource. You cannot call <strong>OfferResources</strong> to offer immutable resources.</p><p>To offer shared resources, call <strong>OfferResources</strong> on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>OfferResources</strong> only while you hold the mutex. In fact, you can't offer shared resources unless you use <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> because offering shared resources without using <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> isn't supported.</p><p><strong>Note</strong>??The user mode display driver might not immediately offer the resources that you specified in a call to <strong>OfferResources</strong>. The driver can postpone offering them until the next call to <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>, or <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Flush"/></strong>. </p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>OfferResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
            <msdn-id>hh404549</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.ComArray{SharpDX.DXGI.Resource},SharpDX.DXGI.OfferResourcePriority)">
            <summary>	
            <p>Allows the operating system to free the video memory of resources by discarding their content.</p>	
            </summary>	
            <param name="numResources"><dd> <p>The number of resources in the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="resourcesOut"><dd> <p>An array of references to <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces for the resources to offer.</p> </dd></param>	
            <param name="priority"><dd> <p>A <strong><see cref="T:SharpDX.DXGI.OfferResourcePriority"/></strong>-typed value that indicates how valuable data is.</p> </dd></param>	
            <returns><p><strong>OfferResources</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if resources were successfully offered</li> <li>E_INVALIDARG if a resource in the array or the priority is invalid</li> </ul></returns>	
            <remarks>	
            <p>The priority value that the  <em>Priority</em> parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.</p><p>If you call <strong>OfferResources</strong> to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call <strong>OfferResources</strong> on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the <strong>IDXGIDevice2::ReclaimResource</strong> method to reclaim the resource. You cannot call <strong>OfferResources</strong> to offer immutable resources.</p><p>To offer shared resources, call <strong>OfferResources</strong> on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>OfferResources</strong> only while you hold the mutex. In fact, you can't offer shared resources unless you use <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> because offering shared resources without using <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> isn't supported.</p><p><strong>Note</strong>??The user mode display driver might not immediately offer the resources that you specified in a call to <strong>OfferResources</strong>. The driver can postpone offering them until the next call to <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>, or <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Flush"/></strong>. </p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>OfferResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
            <msdn-id>hh404549</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,System.IntPtr,SharpDX.DXGI.OfferResourcePriority)">
            <summary>	
            <p>Allows the operating system to free the video memory of resources by discarding their content.</p>	
            </summary>	
            <param name="numResources"><dd> <p>The number of resources in the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="resourcesOut"><dd> <p>An array of references to <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces for the resources to offer.</p> </dd></param>	
            <param name="priority"><dd> <p>A <strong><see cref="T:SharpDX.DXGI.OfferResourcePriority"/></strong>-typed value that indicates how valuable data is.</p> </dd></param>	
            <returns><p><strong>OfferResources</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if resources were successfully offered</li> <li>E_INVALIDARG if a resource in the array or the priority is invalid</li> </ul></returns>	
            <remarks>	
            <p>The priority value that the  <em>Priority</em> parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.</p><p>If you call <strong>OfferResources</strong> to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call <strong>OfferResources</strong> on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the <strong>IDXGIDevice2::ReclaimResource</strong> method to reclaim the resource. You cannot call <strong>OfferResources</strong> to offer immutable resources.</p><p>To offer shared resources, call <strong>OfferResources</strong> on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>OfferResources</strong> only while you hold the mutex. In fact, you can't offer shared resources unless you use <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> because offering shared resources without using <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> isn't supported.</p><p><strong>Note</strong>??The user mode display driver might not immediately offer the resources that you specified in a call to <strong>OfferResources</strong>. The driver can postpone offering them until the next call to <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>, or <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Flush"/></strong>. </p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>OfferResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
            <msdn-id>hh404549</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.ReclaimResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.Mathematics.Interop.RawBool[])">
            <summary>	
            <p>Restores access to resources that were previously offered by calling <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong>.</p>	
            </summary>	
            <param name="numResources">No documentation.</param>	
            <param name="resourcesOut">No documentation.</param>	
            <param name="discardedRef">No documentation.</param>	
            <returns><p><strong>ReclaimResources</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if resources were successfully reclaimed</li> <li>E_INVALIDARG if the resources are invalid</li> </ul></returns>	
            <remarks>	
            <p>After you call <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong> to offer one or more resources, you must call <strong>ReclaimResources</strong> before you can use those resources again.  You must check the values in the array at <em>pDiscarded</em> to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.</p><p>To reclaim shared resources, call <strong>ReclaimResources</strong> only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>ReclaimResources</strong> only while you hold the mutex.</p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>ReclaimResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
            <msdn-id>hh404551</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.ReclaimResources(System.Int32,SharpDX.ComArray{SharpDX.DXGI.Resource},SharpDX.Mathematics.Interop.RawBool[])">
            <summary>	
            <p>Restores access to resources that were previously offered by calling <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong>.</p>	
            </summary>	
            <param name="numResources">No documentation.</param>	
            <param name="resourcesOut">No documentation.</param>	
            <param name="discardedRef">No documentation.</param>	
            <returns><p><strong>ReclaimResources</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if resources were successfully reclaimed</li> <li>E_INVALIDARG if the resources are invalid</li> </ul></returns>	
            <remarks>	
            <p>After you call <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong> to offer one or more resources, you must call <strong>ReclaimResources</strong> before you can use those resources again.  You must check the values in the array at <em>pDiscarded</em> to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.</p><p>To reclaim shared resources, call <strong>ReclaimResources</strong> only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>ReclaimResources</strong> only while you hold the mutex.</p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>ReclaimResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
            <msdn-id>hh404551</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.ReclaimResources(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>	
            <p>Restores access to resources that were previously offered by calling <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong>.</p>	
            </summary>	
            <param name="numResources">No documentation.</param>	
            <param name="resourcesOut">No documentation.</param>	
            <param name="discardedRef">No documentation.</param>	
            <returns><p><strong>ReclaimResources</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if resources were successfully reclaimed</li> <li>E_INVALIDARG if the resources are invalid</li> </ul></returns>	
            <remarks>	
            <p>After you call <strong><see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/></strong> to offer one or more resources, you must call <strong>ReclaimResources</strong> before you can use those resources again.  You must check the values in the array at <em>pDiscarded</em> to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.</p><p>To reclaim shared resources, call <strong>ReclaimResources</strong> only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>ReclaimResources</strong> only while you hold the mutex.</p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>ReclaimResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
            <msdn-id>hh404551</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.EnqueueSetEvent(System.IntPtr)">
            <summary>	
            <p>Flushes any outstanding rendering commands and sets the specified event object to the signaled state after all previously submitted rendering commands complete.</p>	
            </summary>	
            <param name="hEvent"><dd> <p>A handle to the event object. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. All types of event objects (manual-reset, auto-reset, and so on) are supported.</p> <p>The handle must have the EVENT_MODIFY_STATE access right. For more information about access rights, see Synchronization Object Security and Access Rights.</p> </dd></param>	
            <returns><p>Returns <strong><see cref="F:SharpDX.Result.Ok"/></strong> if successful; otherwise, returns one of the following values:</p><ul> <li><strong>E_OUTOFMEMORY</strong> if insufficient memory is available to complete the operation.</li> <li><strong>E_INVALIDARG</strong> if the parameter was validated and determined to be incorrect.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>EnqueueSetEvent</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p><strong>EnqueueSetEvent</strong> calls the <strong>SetEvent</strong> function on the event object after all previously submitted rendering commands complete or the device is removed.</p><p>After an application calls <strong>EnqueueSetEvent</strong>, it  can immediately call the <strong>WaitForSingleObject</strong> function to put itself to sleep until rendering commands complete.</p><p>You cannot use <strong>EnqueueSetEvent</strong> to determine work completion that is associated with presentation (<strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong>); instead, we recommend that you use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::EnqueueSetEvent']/*"/>	
            <msdn-id>hh404546</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice2::EnqueueSetEvent([In] void* hEvent)</unmanaged>	
            <unmanaged-short>IDXGIDevice2::EnqueueSetEvent</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Device3">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="T:SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice3']/*"/>	
            <msdn-id>bb174527</msdn-id>	
            <unmanaged>IDXGIDevice3</unmanaged>	
            <unmanaged-short>IDXGIDevice3</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device3.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device3"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device3.op_Explicit(System.IntPtr)~SharpDX.DXGI.Device3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Device3"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Device3.Trim">
            <summary>	
            <p>Trims the graphics memory allocated by the <strong><see cref="T:SharpDX.DXGI.Device3"/></strong> DXGI device on the app's behalf.</p><p>For apps that render with DirectX, graphics drivers periodically allocate internal memory buffers in order to speed up subsequent rendering requests. These memory allocations count against the app's memory usage for PLM  and in general lead to increased memory usage by the overall system.</p><p>Starting in Windows?8.1, apps that render with Direct2D and/or Direct3D (including <strong>CoreWindow</strong> and XAML interop) must call <strong>Trim</strong> in response to the PLM suspend callback. The Direct3D runtime and the graphics driver will discard internal memory buffers allocated for the app, reducing its memory footprint.</p><p>Calling this method does not change the rendering state of the graphics device and it has no effect on rendering operations. There is a brief performance hit when internal buffers are reallocated during the first rendering operations after the <strong>Trim</strong> call, therefore apps should only call <strong>Trim</strong> when going idle for a period of time (in response to PLM suspend, for example).</p><p>Apps should ensure that they call <strong>Trim</strong> as one of the last D3D operations done before going idle. Direct3D will normally defer the destruction of D3D objects. Calling <strong>Trim</strong>, however, forces Direct3D to destroy objects immediately. For this reason, it is not guaranteed that releasing the final reference on Direct3D objects after calling <strong>Trim</strong> will cause the object to be destroyed and memory to be deallocated  before the app suspends.</p><p>Similar to <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.Flush"/></strong>, apps should call <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.ClearState"/></strong> before calling <strong>Trim</strong>. <strong>ClearState</strong> clears the Direct3D pipeline bindings, ensuring that Direct3D does not hold any references to the Direct3D objects you are trying to release.</p><p>It is also prudent to release references on middleware before calling <strong>Trim</strong>, as that middleware may also need to release references	
            to Direct3D objects.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice3::Trim']/*"/>	
            <msdn-id>dn280346</msdn-id>	
            <unmanaged>void IDXGIDevice3::Trim()</unmanaged>	
            <unmanaged-short>IDXGIDevice3::Trim</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayControl">
            <summary>	
            <p> </p><p>The <strong><see cref="T:SharpDX.DXGI.DisplayControl"/></strong> interface exposes methods to indicate user preference for the operating system's stereoscopic 3D display behavior and to set stereoscopic 3D display status to enable or disable.</p><p>We recommend that you not use <strong><see cref="T:SharpDX.DXGI.DisplayControl"/></strong> to query or set system-wide stereoscopic 3D settings in your stereoscopic 3D apps. Instead, for your windowed apps, call the <strong><see cref="M:SharpDX.DXGI.Factory2.IsWindowedStereoEnabled_"/></strong> method to determine whether to render in stereo; for your full-screen apps, call the <strong><see cref="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)"/></strong> method and then determine whether any of the returned display modes support rendering in stereo.</p>	
            </summary>	
            <remarks>	
            <p><strong>Note</strong>??The <strong><see cref="T:SharpDX.DXGI.DisplayControl"/></strong> interface is only used by the <strong>Display</strong> app of the operating system's Control Panel or by control applets from third party graphics vendors. This interface is not meant for developers of end-user apps.</p><p><strong>Note</strong>??The <strong><see cref="T:SharpDX.DXGI.DisplayControl"/></strong> interface does not exist for Windows Store apps.</p><p>Call <strong>QueryInterface</strong> from a factory object (<strong><see cref="T:SharpDX.DXGI.Factory"/></strong>, <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> or <strong><see cref="T:SharpDX.DXGI.Factory2"/></strong>) to retrieve the <strong><see cref="T:SharpDX.DXGI.DisplayControl"/></strong> interface. The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.DisplayControl"/> * pDXGIDisplayControl;	
            hr = g_pDXGIFactory-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.DisplayControl"/>), (void **)&amp;pDXGIDisplayControl);	
            </pre><p> The operating system processes changes to stereo-enabled configuration asynchronously. Therefore, these changes might not be immediately visible in every process that calls <strong><see cref="M:SharpDX.DXGI.DisplayControl.IsStereoEnabled_"/></strong> to query for stereo configuration.  Control applets can use the <strong><see cref="M:SharpDX.DXGI.Factory2.RegisterStereoStatusEvent(System.IntPtr,System.Int32@)"/></strong> or <strong><see cref="M:SharpDX.DXGI.Factory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32,System.Int32@)"/></strong> method to register for notifications of all stereo configuration changes.</p><p><strong>Platform Update for Windows?7:??</strong>Stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl']/*"/>	
            <msdn-id>hh404552</msdn-id>	
            <unmanaged>IDXGIDisplayControl</unmanaged>	
            <unmanaged-short>IDXGIDisplayControl</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DisplayControl"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.op_Explicit(System.IntPtr)~SharpDX.DXGI.DisplayControl">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.DisplayControl"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.IsStereoEnabled_">
            <summary>	
            <p>Retrieves a Boolean value that indicates whether the operating system's stereoscopic 3D display behavior is enabled.</p>	
            </summary>	
            <returns><p><strong>IsStereoEnabled</strong> returns TRUE when the operating system's stereoscopic 3D display behavior is enabled and <see cref="F:SharpDX.Result.False"/> when this behavior is disabled.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>IsStereoEnabled</strong> always returns <see cref="F:SharpDX.Result.False"/> because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>You pass a Boolean value to the  <strong><see cref="M:SharpDX.DXGI.DisplayControl.SetStereoEnabled(SharpDX.Mathematics.Interop.RawBool)"/></strong> method to either enable or disable the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="F:SharpDX.Result.False"/> disables it.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::IsStereoEnabled']/*"/>	
            <msdn-id>hh404553</msdn-id>	
            <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>	
            <unmanaged-short>IDXGIDisplayControl::IsStereoEnabled</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.SetStereoEnabled(SharpDX.Mathematics.Interop.RawBool)">
            <summary>	
            <p>Set a Boolean value to either enable or disable the operating system's stereoscopic 3D display behavior.</p>	
            </summary>	
            <param name="enabled"><dd> <p>A Boolean value that either enables or disables the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="F:SharpDX.Result.False"/> disables it.</p> </dd></param>	
            <remarks>	
            <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetStereoEnabled</strong> doesn't change stereoscopic 3D display behavior because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::SetStereoEnabled']/*"/>	
            <msdn-id>hh404554</msdn-id>	
            <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>	
            <unmanaged-short>IDXGIDisplayControl::SetStereoEnabled</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.DisplayControl.IsStereoEnabled">
            <summary>	
            <p>Retrieves a Boolean value that indicates whether the operating system's stereoscopic 3D display behavior is enabled.</p>	
            </summary>	
            <remarks>	
            <p>You pass a Boolean value to the  <strong><see cref="M:SharpDX.DXGI.DisplayControl.SetStereoEnabled(SharpDX.Mathematics.Interop.RawBool)"/></strong> method to either enable or disable the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="F:SharpDX.Result.False"/> disables it.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::IsStereoEnabled']/*"/>	
            <msdn-id>hh404553</msdn-id>	
            <unmanaged>IsStereoEnabled</unmanaged>	
            <unmanaged-short>IsStereoEnabled</unmanaged-short>	
            <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.DisplayControl.StereoEnabled">
            <summary>	
            <p>Set a Boolean value to either enable or disable the operating system's stereoscopic 3D display behavior.</p>	
            </summary>	
            <remarks>	
            <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetStereoEnabled</strong> doesn't change stereoscopic 3D display behavior because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::SetStereoEnabled']/*"/>	
            <msdn-id>hh404554</msdn-id>	
            <unmanaged>SetStereoEnabled</unmanaged>	
            <unmanaged-short>SetStereoEnabled</unmanaged-short>	
            <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.FactoryMedia">
            <summary>	
            <p>Creates swap chains for desktop media apps that use  DirectComposition surfaces to decode and display video.</p>	
            </summary>	
            <remarks>	
            <p>To create a Microsoft DirectX Graphics Infrastructure (DXGI) media factory interface, pass <strong><see cref="T:SharpDX.DXGI.FactoryMedia"/></strong> into either the <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong> function or call <strong>QueryInterface</strong> from a factory object returned by <strong>CreateDXGIFactory</strong>, <strong>CreateDXGIFactory1</strong>, or <strong>CreateDXGIFactory2</strong>.	
            </p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong>, <strong><see cref="T:SharpDX.DXGI.Device1"/></strong>, <strong><see cref="T:SharpDX.DXGI.Device2"/></strong>,  or  <strong><see cref="T:SharpDX.DXGI.Device3"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device2"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device2"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.FactoryMedia"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.FactoryMedia"/>), (void **)&amp;pIDXGIFactory);	
            </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactoryMedia']/*"/>	
            <msdn-id>dn384128</msdn-id>	
            <unmanaged>IDXGIFactoryMedia</unmanaged>	
            <unmanaged-short>IDXGIFactoryMedia</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.FactoryMedia.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.FactoryMedia"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.FactoryMedia.op_Explicit(System.IntPtr)~SharpDX.DXGI.FactoryMedia">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.FactoryMedia"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.FactoryMedia.CreateSwapChainForCompositionSurfaceHandle(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1@)">
            <summary>	
            <p>Creates a YUV swap chain for an existing DirectComposition surface handle.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSurface">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p><strong>CreateSwapChainForCompositionSurfaceHandle</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em>, <em>pYuvDecodeBuffers</em>, or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle']/*"/>	
            <msdn-id>dn384130</msdn-id>	
            <unmanaged>HRESULT IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGISwapChain1** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.FactoryMedia.CreateDecodeSwapChainForCompositionSurfaceHandle(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.DecodeSwapChainDescription,SharpDX.DXGI.Resource,SharpDX.DXGI.Output,SharpDX.DXGI.DecodeSwapChain@)">
            <summary>	
            <p>Creates a YUV swap chain for an existing DirectComposition surface handle. The swap chain is created with pre-existing buffers and very few descriptive elements are required. Instead, this method requires a DirectComposition surface handle and an <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> buffer to hold decoded frame data. The swap chain format is determined by the format of the subresources of the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSurface">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="yuvDecodeBuffersRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p><strong>CreateDecodeSwapChainForCompositionSurfaceHandle</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em>, <em>pYuvDecodeBuffers</em>, or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul></returns>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> provided via the <em>pYuvDecodeBuffers</em> parameter must point to at least one subresource, and all subresources must be created with the <strong><see cref="!:SharpDX.Direct3D11.BindFlags.Decoder"/></strong> flag.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle']/*"/>	
            <msdn-id>dn384129</msdn-id>	
            <unmanaged>HRESULT IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] DXGI_DECODE_SWAP_CHAIN_DESC* pDesc,[In] IDXGIResource* pYuvDecodeBuffers,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGIDecodeSwapChain** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ISurfaceImageSourceManagerNative">
            <summary>	
            <p>Enables performing bulk operations across all <strong>SurfaceImageSource</strong> objects created in the same process.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceManagerNative']/*"/>	
            <msdn-id>dn448959</msdn-id>	
            <unmanaged>ISurfaceImageSourceManagerNative</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceManagerNative</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceManagerNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ISurfaceImageSourceManagerNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceManagerNative.op_Explicit(System.IntPtr)~SharpDX.DXGI.ISurfaceImageSourceManagerNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.ISurfaceImageSourceManagerNative"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceManagerNative.FlushAllSurfacesWithDevice(SharpDX.ComObject)">
            <summary>	
            <p>Associates a graphics device with a <strong>SurfaceImageSource</strong> or a <strong>VirtualSurfaceImageSource</strong>.</p>	
            </summary>	
            <param name="device">No documentation.</param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>The <strong>FlushAllSurfacesWithDevice</strong> method flushes current GPU work for all <strong>SurfaceImageSource</strong> objects that were created with <em>device</em>.  This GPU work includes Direct2D rendering work and internal GPU work done by the framework associated with rendering.  This is useful if an application has created multiple <strong>SurfaceImageSource</strong> objects and needs to flush the GPU work for all of these surfaces from the background rendering thread.  By flushing this work from the background thread the work can be better parallelized, with work being done on the UI thread to improve performance.</p><p>You can call the <strong>FlushAllSurfacesWithDevice</strong> method from a non-UI thread.  </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice']/*"/>	
            <msdn-id>dn448960</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice([In] IUnknown* device)</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D">
            <summary>	
            <p>Provides the implementation of a shared Microsoft DirectX surface which is displayed in a <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong>.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface provides the native implementation of the <strong>SurfaceImageSource</strong> class. To get a reference to the  <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface, you must cast a <strong>SurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call the <strong>QueryInterface</strong> method.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/>&gt;	m_sisD2DNative;	
            // ...	
            IInspectable* sisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(surfaceImageSource);	
            sisInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/>), (void **)&amp;m_sisD2DNative) </pre><p>The <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface provides high-performance batched Direct2D drawing, which enables drawing to multiple different <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong> objects in the same batch, as long as they share the same Direct2D device.  Batching can improve performance when updating multiple surfaces at the same time. </p><p>The <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface enables drawing to a <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong> from one or more background threads, which allows high-performance DirectX rendering off the UI thread.</p><p>Only call the <strong>SetDevice</strong>, <strong>BeginDraw</strong>, and <strong>EndDraw</strong> methods on <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface, not on the <strong><see cref="T:SharpDX.DXGI.ISurfaceImageSourceNative"/></strong> or <strong><see cref="T:SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong> interfaces.   </p><p>In order to support batching updates to multiple surfaces to improve performance, you can pass an <strong><see cref="!:SharpDX.Direct2D1.Device"/></strong> to the <strong>SetDevice</strong> method, instead of an <strong><see cref="!:SharpDX.Direct3D11.Device"/></strong>.  The <strong>BeginDraw</strong> method can then optionally return a shared <strong><see cref="!:SharpDX.Direct2D1.DeviceContext"/></strong>, which the app uses to draw all content for that update.</p><p>To draw to the surface from a background thread, you must set any DirectX resources, including the Microsoft Direct3D device, Direct3D device context, Direct2D device, and Direct2D device context, to enable multithreading support.   </p><p>You can call the <strong>BeginDraw</strong>, <strong>SuspendDraw</strong>, and <strong>ResumeDraw</strong> methods from any background thread to enable high-performance multithreaded drawing.</p><p>Always call the <strong>EndDraw</strong> method on the UI thread in order to synchronize updating the DirectX content with the current XAML UI thread frame.  You can call <strong>BeginDraw</strong> on a background thread, call <strong>SuspendDraw</strong> when you're done drawing on the background thread, and call <strong>EndDraw</strong> on the UI thread.</p><p>Use <strong>SuspendDraw</strong> and <strong>ResumeDraw</strong> to suspend and resume drawing on any background or UI thread. </p><p>Handle the <strong>SurfaceContentsLost</strong> event to determine when you need to recreate content which may be lost if the system resets the GPU.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D']/*"/>	
            <msdn-id>dn302137</msdn-id>	
            <unmanaged>ISurfaceImageSourceNativeWithD2D</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.op_Explicit(System.IntPtr)~SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.SetDevice(SharpDX.ComObject)">
            <summary>	
            <p>Sets the Microsoft DirectX Graphics Infrastructure (DXGI) or Direct2D device, created with <strong><see cref="!:SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/></strong>, that will draw the surface.</p>	
            </summary>	
            <param name="device"><dd> <p>Pointer to the DXGI device interface. You can pass an <strong><see cref="!:SharpDX.Direct2D1.Device"/></strong> to signal that this surface participates in Direct2D batching to improve performance when updating Direct2D content across multiple surfaces.  The device must have multithreading supported enabled if the app draws to the surface from a background thread. </p> </dd></param>	
            <returns><p>This method fails when the SurfaceImageSource is larger than the maximum texture size supported by the Direct3D device. Apps should use VirtualSurfaceImageSource for surfaces larger than the maximum texture size supported by the Direct3D device.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::SetDevice']/*"/>	
            <msdn-id>dn302141</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SetDevice</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.BeginDraw(SharpDX.Mathematics.Interop.RawRectangle,System.Guid,System.IntPtr@,SharpDX.Mathematics.Interop.RawPoint@)">
            <summary>	
            <p>Initiates an update to the associated <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong>.</p>	
            </summary>	
            <param name="updateRect">No documentation.</param>	
            <param name="iid">No documentation.</param>	
            <param name="updateObject">No documentation.</param>	
            <param name="offset">No documentation.</param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::BeginDraw']/*"/>	
            <msdn-id>dn302138</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::BeginDraw([In] const RECT&amp; updateRect,[In] const GUID&amp; iid,[Out] void** updateObject,[Out] POINT* offset)</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::BeginDraw</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.EndDraw">
            <summary>	
            <p>Closes the surface draw operation.</p>	
            </summary>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>Always call the <strong>EndDraw</strong> method on the UI thread in order to synchronize updating the Microsoft DirectX content with the current XAML UI thread frame.  </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::EndDraw']/*"/>	
            <msdn-id>dn302139</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::EndDraw()</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::EndDraw</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.SuspendDraw">
            <summary>	
            <p>Suspends the drawing operation.</p>	
            </summary>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::SuspendDraw']/*"/>	
            <msdn-id>dn302142</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SuspendDraw()</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SuspendDraw</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.ResumeDraw">
            <summary>	
            <p>Resume the drawing operation.</p>	
            </summary>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::ResumeDraw']/*"/>	
            <msdn-id>dn302140</msdn-id>	
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::ResumeDraw()</unmanaged>	
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::ResumeDraw</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D.Device">
            <summary>	
            <p>Sets the Microsoft DirectX Graphics Infrastructure (DXGI) or Direct2D device, created with <strong><see cref="!:SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/></strong>, that will draw the surface.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::SetDevice']/*"/>	
            <msdn-id>dn302141</msdn-id>	
            <unmanaged>SetDevice</unmanaged>	
            <unmanaged-short>SetDevice</unmanaged-short>	
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative">
            <summary>	
            <p>Provides interoperation between XAML and a DirectX swap chain.</p>	
            </summary>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::XAML::Control::SwapChainBackgroundPanel</strong> Windows Runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/></strong>, you must cast a <strong>SwapChainBackgroundPanel</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/>&gt;	m_swapChainNative;	
            // ...	
            IInspectable* panelInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(swapChainPanel);	
            panelInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/>), (void **)&amp;m_swapChainNative); </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainBackgroundPanelNative']/*"/>	
            <msdn-id>hh848326</msdn-id>	
            <unmanaged>ISwapChainBackgroundPanelNative</unmanaged>	
            <unmanaged-short>ISwapChainBackgroundPanelNative</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainBackgroundPanelNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainBackgroundPanelNative.op_Explicit(System.IntPtr)~SharpDX.DXGI.ISwapChainBackgroundPanelNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainBackgroundPanelNative.SetSwapChain(SharpDX.DXGI.SwapChain)">
            <summary>	
            <p>Sets the DirectX swap chain for <strong>SwapChainBackgroundPanel</strong>.</p>	
            </summary>	
            <param name="swapChain">No documentation.</param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainBackgroundPanelNative::SetSwapChain']/*"/>	
            <msdn-id>hh848327</msdn-id>	
            <unmanaged>HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>	
            <unmanaged-short>ISwapChainBackgroundPanelNative::SetSwapChain</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.ISwapChainBackgroundPanelNative.SwapChain">
            <summary>	
            <p>Sets the DirectX swap chain for <strong>SwapChainBackgroundPanel</strong>.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainBackgroundPanelNative::SetSwapChain']/*"/>	
            <msdn-id>hh848327</msdn-id>	
            <unmanaged>SetSwapChain</unmanaged>	
            <unmanaged-short>SetSwapChain</unmanaged-short>	
            <unmanaged>HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.ISwapChainPanelNative">
            <summary>	
            <p>Provides interoperation between XAML and a DirectX swap chain. Unlike <strong>SwapChainBackgroundPanel</strong>, a <strong>SwapChainPanel</strong> can appear at any level in the XAML display tree, and more than 1 can be present in any given tree.</p>	
            </summary>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::XAML::Control::SwapChainPanel</strong> Windows Runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/></strong>, you must cast a <strong>SwapChainPanel</strong> instance to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/>&gt;	m_swapChainNative;	
            // ...	
            IInspectable* panelInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(swapChainPanel);	
            panelInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/>), (void **)&amp;m_swapChainNative); </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainPanelNative']/*"/>	
            <msdn-id>dn302143</msdn-id>	
            <unmanaged>ISwapChainPanelNative</unmanaged>	
            <unmanaged-short>ISwapChainPanelNative</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainPanelNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainPanelNative.op_Explicit(System.IntPtr)~SharpDX.DXGI.ISwapChainPanelNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainPanelNative.SetSwapChain(SharpDX.DXGI.SwapChain)">
            <summary>	
            <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong>.</p>	
            </summary>	
            <param name="swapChain">No documentation.</param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainPanelNative::SetSwapChain']/*"/>	
            <msdn-id>dn302144</msdn-id>	
            <unmanaged>HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>	
            <unmanaged-short>ISwapChainPanelNative::SetSwapChain</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.ISwapChainPanelNative.SwapChain">
            <summary>	
            <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong>.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainPanelNative::SetSwapChain']/*"/>	
            <msdn-id>dn302144</msdn-id>	
            <unmanaged>SetSwapChain</unmanaged>	
            <unmanaged-short>SetSwapChain</unmanaged-short>	
            <unmanaged>HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.ISwapChainPanelNative2">
            <summary>	
            <p>Provides interoperation between XAML and a DirectX swap chain.  Unlike <strong>SwapChainBackgroundPanel</strong>,  a <strong>SwapChainPanel</strong> can appear at any level in the XAML display tree,  and more than 1 can be present in any given tree.</p>	
            </summary>	
            <remarks>	
            <p>This interface provides the native implementation of the <strong>Windows::UI::XAML::Control::SwapChainPanel</strong> Windows Runtime type. To obtain a reference to <strong><see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/></strong>,  you must cast a <strong>SwapChainPanel</strong> instance  to <strong>IInspectable</strong> or <strong><see cref="T:SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="T:SharpDX.DXGI.ISwapChainPanelNative2"/>&gt;	m_swapChainNative2;	
            // ...	
            IInspectable* panelInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(swapChainPanel);	
            panelInspectable-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.ISwapChainPanelNative2"/>), (void **)&amp;m_swapChainNative2); </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainPanelNative2']/*"/>	
            <msdn-id>dn858172</msdn-id>	
            <unmanaged>ISwapChainPanelNative2</unmanaged>	
            <unmanaged-short>ISwapChainPanelNative2</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainPanelNative2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ISwapChainPanelNative2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainPanelNative2.op_Explicit(System.IntPtr)~SharpDX.DXGI.ISwapChainPanelNative2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.ISwapChainPanelNative2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.ISwapChainPanelNative2.SetSwapChainHandle(System.IntPtr)">
            <summary>	
            <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong> using a handle to the swap chain.</p>	
            </summary>	
            <param name="swapChainHandle">No documentation.</param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>SetSwapChain(HANDLE swapChainHandle) allows a swap chain to be rendered by referencing a shared handle to the swap chain.   This enables scenarios where a swap chain is created in one process and needs to be passed to another process.</p><p>XAML supports setting a DXGI swap chain as the content of a SwapChainPanel element.  Apps accomplish this by querying for  the <strong><see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/></strong> interface from a SwapChainPanel instance and calling <strong>SetSwapChain(<see cref="T:SharpDX.DXGI.SwapChain"/> *swapChain)</strong>.   </p><p>This process works for references to in process swap chains.  However, this doesn?t work for VoIP apps, which use a two-process model to enable continuing calls on a background process  when a foreground process is suspended or shut down.  This two-process implementation requires the ability to pass a shared handle to a swap chain, rather than a reference, created on the  background process to the foreground process to be rendered in a XAML SwapChainPanel in the foreground app.</p><pre> &lt;!-- XAML markup --&gt; 	
            &lt;Page&gt;  &lt;SwapChainPanel x:Name=?captureStreamDisplayPanel? /&gt; 	
            &lt;/Page&gt;  // Definitions 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.SwapChain1"/>&gt; m_swapChain; 	
            HANDLE m_swapChainHandle; 	
            ComPtr&lt;<see cref="!:SharpDX.Direct3D11.Device"/>&gt; m_d3dDevice; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.Adapter"/>&gt; dxgiAdapter; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.Factory2"/>&gt; dxgiFactory; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.FactoryMedia"/>&gt; dxgiFactoryMedia; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.Device"/>&gt; dxgiDevice; 	
            <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> swapChainDesc = {0};  // Get DXGI factory (assume standard boilerplate has created D3D11Device) 	
            m_d3dDevice.As(&amp;dxgiDevice); 	
            dxgiDevice-&gt;GetAdapter(&amp;dxgiAdapter); 	
            dxgiAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory2"/>), &amp;dxgiFactory);  // Create swap chain and get handle 	
            <see cref="!:SharpDX.DirectComposition.DComp.CreateSurfaceHandle"/>(GENERIC_ALL, nullptr, &amp;m_swapChainHandle); 	
            dxgiFactory.As(&amp;dxgiFactoryMedia); 	
            dxgiFactoryMedia-&gt;CreateSwapChainForCompositionSurfaceHandle(  m_d3dDevice.Get(),  m_swapChainHandle,  &amp;swapChainDesc,  nullptr,  &amp;m_swapChain 	
            );  // Set swap chain to display in a SwapChainPanel 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.ISwapChainPanelNative2"/>&gt; panelNative; 	
            reinterpret_cast&lt;<see cref="T:SharpDX.ComObject"/>*&gt;(captureStreamDisplayPanel)-&gt;QueryInterface(IID_PPV_ARGS(&amp;panelNative))); 	
            panelNative-&gt;SetSwapChainHandle(m_swapChainHandle);  </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainPanelNative2::SetSwapChainHandle']/*"/>	
            <msdn-id>dn858173</msdn-id>	
            <unmanaged>HRESULT ISwapChainPanelNative2::SetSwapChainHandle([In] void* swapChainHandle)</unmanaged>	
            <unmanaged-short>ISwapChainPanelNative2::SetSwapChainHandle</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.ISwapChainPanelNative2.SwapChainHandle">
            <summary>	
            <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong> using a handle to the swap chain.</p>	
            </summary>	
            <remarks>	
            <p>SetSwapChain(HANDLE swapChainHandle) allows a swap chain to be rendered by referencing a shared handle to the swap chain.   This enables scenarios where a swap chain is created in one process and needs to be passed to another process.</p><p>XAML supports setting a DXGI swap chain as the content of a SwapChainPanel element.  Apps accomplish this by querying for  the <strong><see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/></strong> interface from a SwapChainPanel instance and calling <strong>SetSwapChain(<see cref="T:SharpDX.DXGI.SwapChain"/> *swapChain)</strong>.   </p><p>This process works for references to in process swap chains.  However, this doesn?t work for VoIP apps, which use a two-process model to enable continuing calls on a background process  when a foreground process is suspended or shut down.  This two-process implementation requires the ability to pass a shared handle to a swap chain, rather than a reference, created on the  background process to the foreground process to be rendered in a XAML SwapChainPanel in the foreground app.</p><pre> &lt;!-- XAML markup --&gt; 	
            &lt;Page&gt;  &lt;SwapChainPanel x:Name=?captureStreamDisplayPanel? /&gt; 	
            &lt;/Page&gt;  // Definitions 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.SwapChain1"/>&gt; m_swapChain; 	
            HANDLE m_swapChainHandle; 	
            ComPtr&lt;<see cref="!:SharpDX.Direct3D11.Device"/>&gt; m_d3dDevice; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.Adapter"/>&gt; dxgiAdapter; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.Factory2"/>&gt; dxgiFactory; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.FactoryMedia"/>&gt; dxgiFactoryMedia; 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.Device"/>&gt; dxgiDevice; 	
            <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> swapChainDesc = {0};  // Get DXGI factory (assume standard boilerplate has created D3D11Device) 	
            m_d3dDevice.As(&amp;dxgiDevice); 	
            dxgiDevice-&gt;GetAdapter(&amp;dxgiAdapter); 	
            dxgiAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory2"/>), &amp;dxgiFactory);  // Create swap chain and get handle 	
            <see cref="!:SharpDX.DirectComposition.DComp.CreateSurfaceHandle"/>(GENERIC_ALL, nullptr, &amp;m_swapChainHandle); 	
            dxgiFactory.As(&amp;dxgiFactoryMedia); 	
            dxgiFactoryMedia-&gt;CreateSwapChainForCompositionSurfaceHandle(  m_d3dDevice.Get(),  m_swapChainHandle,  &amp;swapChainDesc,  nullptr,  &amp;m_swapChain 	
            );  // Set swap chain to display in a SwapChainPanel 	
            ComPtr&lt;<see cref="T:SharpDX.DXGI.ISwapChainPanelNative2"/>&gt; panelNative; 	
            reinterpret_cast&lt;<see cref="T:SharpDX.ComObject"/>*&gt;(captureStreamDisplayPanel)-&gt;QueryInterface(IID_PPV_ARGS(&amp;panelNative))); 	
            panelNative-&gt;SetSwapChainHandle(m_swapChainHandle);  </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ISwapChainPanelNative2::SetSwapChainHandle']/*"/>	
            <msdn-id>dn858173</msdn-id>	
            <unmanaged>SetSwapChainHandle</unmanaged>	
            <unmanaged-short>SetSwapChainHandle</unmanaged-short>	
            <unmanaged>HRESULT ISwapChainPanelNative2::SetSwapChainHandle([In] void* swapChainHandle)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative">
            <summary>	
            <p>Provides an interface for the implementation of drawing behaviors when a <strong>VirtualSurfaceImageSource</strong> requests an update. </p>	
            </summary>	
            <remarks>	
            <p>This interface is implemented by the developer to provide specific drawing behaviors for updates to a <strong>VirtualSurfaceImageSource</strong>. Classes that implement  this interface are provided to the <strong><see cref="M:SharpDX.DXGI.IVirtualSurfaceImageSourceNative.RegisterForUpdatesNeeded_(System.IntPtr)"/></strong>, which calls the <strong>UpdatesNeeded</strong> method implementation whenever an update is requested.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative']/*"/>	
            <msdn-id>hh848336</msdn-id>	
            <unmanaged>IVirtualSurfaceUpdatesCallbackNative</unmanaged>	
            <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative.op_Explicit(System.IntPtr)~SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative.UpdatesNeeded_">
            <summary>	
            <p>Performs the drawing behaviors when an update to <strong>VirtualSurfaceImageSource</strong> is requested.</p>	
            </summary>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>This method is implemented by the developer.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded']/*"/>	
            <msdn-id>hh848337</msdn-id>	
            <unmanaged>HRESULT IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded()</unmanaged>	
            <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.KeyedMutex">
            <summary>	
            <p>Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> is required to create a resource capable of supporting the <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> interface.</p><p>An <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> should be retrieved for each device sharing a resource. In Direct3D 10.1, such a resource that is shared between two or more devices is created with the <strong>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</strong> flag. In Direct3D 11, such a resource that is shared between two or more devices is created with the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag.</p><p>For information about creating a keyed mutex, see the <strong><see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex']/*"/>	
            <msdn-id>ff471338</msdn-id>	
            <unmanaged>IDXGIKeyedMutex</unmanaged>	
            <unmanaged-short>IDXGIKeyedMutex</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.KeyedMutex"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.op_Explicit(System.IntPtr)~SharpDX.DXGI.KeyedMutex">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.KeyedMutex"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)">
            <summary>	
            <p>Using a key, acquires exclusive rendering access to a shared resource.</p>	
            </summary>	
            <param name="key"><dd>  <p>A value that indicates which device to give access to. This method will succeed when the device that currently owns the surface calls  the <strong><see cref="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)"/></strong> method using the same value. This value can be any UINT64 value.</p> </dd></param>	
            <param name="dwMilliseconds"><dd>  <p>The time-out interval, in milliseconds. This method will return if the interval elapses, and the keyed mutex has not been released  using the specified <em>Key</em>.  If this value is set to zero, the <strong>AcquireSync</strong> method will test to see if the keyed mutex has been released and returns immediately.  If this value is set to INFINITE, the time-out interval will never elapse.</p> </dd></param>	
            <returns><p>Return <see cref="F:SharpDX.Result.Ok"/> if successful.</p><p>If the owning device attempted to create another keyed mutex on the same shared resource, <strong>AcquireSync</strong> returns E_FAIL.</p><p><strong>AcquireSync</strong> can also return the following <strong>DWORD</strong> constants. Therefore, you should explicitly check for these constants. If you only use the <strong>SUCCEEDED</strong> macro on the return value to determine if  <strong>AcquireSync</strong> succeeded, you will not catch these constants.</p><ul> <li>WAIT_ABANDONED - The shared surface and keyed mutex are no longer in a consistent state.  If <strong>AcquireSync</strong> returns this value, you should release and recreate both the keyed mutex and the shared surface.</li> <li>WAIT_TIMEOUT - The time-out interval elapsed before the specified key was released.</li> </ul></returns>	
            <remarks>	
            <p>The <strong>AcquireSync</strong> method creates a lock to a surface that is shared between multiple devices, allowing only one device to render to a surface at a time.   This method uses a key to determine which device currently has exclusive access to the surface.</p><p>When a surface is created using the <strong>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</strong> value of the <strong>D3D10_RESOURCE_MISC_FLAG</strong> enumeration,  you must call the <strong>AcquireSync</strong> method before rendering to the surface.  You must call the <strong>ReleaseSync</strong> method when you are done  rendering to a surface.</p><p>To acquire a reference to the keyed mutex object of a shared resource, call the <strong>QueryInterface</strong> method of the resource and pass in  the <strong>UUID</strong> of the <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> interface.  For more information about acquiring this reference, see the following code example.</p><p>The <strong>AcquireSync</strong> method uses the key as follows, depending on the state of the surface:</p><ul> <li>On initial creation, the surface is unowned and any device can call the <strong>AcquireSync</strong> method to gain access.  For an unowned device, only a key of 0 will succeed. Calling the <strong>AcquireSync</strong> method for any other key will stall the  calling CPU thread.</li> <li>If the surface is owned by a device when you call the <strong>AcquireSync</strong> method, the CPU thread that called  the <strong>AcquireSync</strong> method will stall until the owning device calls the <strong>ReleaseSync</strong> method  using the same Key.</li> <li>If the surface is unowned when you call the <strong>AcquireSync</strong> method (for example, the last owning device has already called  the <strong>ReleaseSync</strong> method), the <strong>AcquireSync</strong> method will succeed if you specify the same key  that was specified when the <strong>ReleaseSync</strong> method was last called. Calling the <strong>AcquireSync</strong> method using  any other key will cause a stall.</li> <li>When the owning device calls the <strong>ReleaseSync</strong> method with a particular key, and more than one device is waiting after  calling the  <strong>AcquireSync</strong> method using the same key, any one of the waiting devices could be woken up first.  The order in which devices are woken up is undefined.</li> <li>A keyed mutex does not support recursive calls to the <strong>AcquireSync</strong> method.</li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex::AcquireSync']/*"/>	
            <msdn-id>ff471339</msdn-id>	
            <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned longlong Key,[In] unsigned int dwMilliseconds)</unmanaged>	
            <unmanaged-short>IDXGIKeyedMutex::AcquireSync</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)">
            <summary>	
            <p>Using a key, releases exclusive rendering access to a shared resource.</p>	
            </summary>	
            <param name="key"><dd>  <p>A value that indicates which device to give access to. This method succeeds when the device that currently owns the surface calls the <strong>ReleaseSync</strong> method using the same value. This value can be any UINT64 value.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful.</p><p>If the device attempted to release a keyed mutex that is not valid or owned by the device, <strong>ReleaseSync</strong> returns E_FAIL.</p></returns>	
            <remarks>	
            <p>The <strong>ReleaseSync</strong> method releases a lock to a surface that is shared between multiple devices.  This method uses a key to determine which device currently has exclusive access to the surface.</p><p>When a surface is created using the <strong>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</strong> value of the <strong>D3D10_RESOURCE_MISC_FLAG</strong> enumeration,  you must call the <strong><see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/></strong> method before rendering to the surface.  You must call the <strong>ReleaseSync</strong> method when you are done  rendering to a surface.</p><p>After you call the <strong>ReleaseSync</strong> method, the shared resource is unset from the rendering pipeline. </p><p>To acquire a reference to the keyed mutex object of a shared resource, call the <strong>QueryInterface</strong> method of the resource and pass in  the <strong>UUID</strong> of the <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> interface.  For more information about acquiring this reference, see the following code example.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex::ReleaseSync']/*"/>	
            <msdn-id>ff471340</msdn-id>	
            <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned longlong Key)</unmanaged>	
            <unmanaged-short>IDXGIKeyedMutex::ReleaseSync</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Output3">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
            </summary>	
            <remarks>	
            <p>To see the outputs available, use <strong><see cref="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput3']/*"/>	
            <msdn-id>bb174546</msdn-id>	
            <unmanaged>IDXGIOutput3</unmanaged>	
            <unmanaged-short>IDXGIOutput3</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output3.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output3"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output3.op_Explicit(System.IntPtr)~SharpDX.DXGI.Output3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Output3"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Output3.CheckOverlaySupport(SharpDX.DXGI.Format,SharpDX.ComObject,System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="enumFormat">No documentation.</param>	
            <param name="concernedDeviceRef">No documentation.</param>	
            <param name="flagsRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput3::CheckOverlaySupport']/*"/>	
            <unmanaged>HRESULT IDXGIOutput3::CheckOverlaySupport([In] DXGI_FORMAT EnumFormat,[In] IUnknown* pConcernedDevice,[Out] unsigned int* pFlags)</unmanaged>	
            <unmanaged-short>IDXGIOutput3::CheckOverlaySupport</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Output4">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
            </summary>	
            <remarks>	
            <p>To see the outputs available, use <strong><see cref="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput4']/*"/>	
            <msdn-id>bb174546</msdn-id>	
            <unmanaged>IDXGIOutput4</unmanaged>	
            <unmanaged-short>IDXGIOutput4</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output4.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output4"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output4.op_Explicit(System.IntPtr)~SharpDX.DXGI.Output4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Output4"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Output4.CheckOverlayColorSpaceSupport(SharpDX.DXGI.Format,SharpDX.DXGI.ColorSpaceType,SharpDX.ComObject,System.Int32@)">
            <summary>	
            <p>Checks for overlay color space support.</p>	
            </summary>	
            <param name="format"><dd>  <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the color format.</p> </dd></param>	
            <param name="colorSpace"><dd>  <p>A <strong><see cref="T:SharpDX.DXGI.ColorSpaceType"/></strong>-typed value that specifies color space type to check overlay support for.</p> </dd></param>	
            <param name="concernedDeviceRef"><dd>  <p>A reference to the Direct3D device interface. <strong>CheckOverlayColorSpaceSupport</strong> returns only support info about this scan-out device. </p> </dd></param>	
            <param name="flagsRef"><dd>  <p>A reference to a variable that receives a combination of <strong><see cref="T:SharpDX.DXGI.OverlayColorSpaceSupportFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for overlay color space support. </p> </dd></param>	
            <returns><p>This method returns <strong><see cref="F:SharpDX.Result.Ok"/></strong> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput4::CheckOverlayColorSpaceSupport']/*"/>	
            <msdn-id>dn903672</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput4::CheckOverlayColorSpaceSupport([In] DXGI_FORMAT Format,[In] DXGI_COLOR_SPACE_TYPE ColorSpace,[In] IUnknown* pConcernedDevice,[Out] unsigned int* pFlags)</unmanaged>	
            <unmanaged-short>IDXGIOutput4::CheckOverlayColorSpaceSupport</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplication">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface accesses and manipulates the duplicated desktop image.</p>	
            </summary>	
            <remarks>	
            <p>A collaboration application can use <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> to access the desktop image. <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> is supported in Desktop Window Manager (DWM) on non-8bpp DirectX full-screen modes and non-8bpp OpenGL full-screen modes. 16-bit or 32-bit GDI non-DWM desktop modes are not supported.</p><p>An application can use <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> on a separate thread to receive the desktop images and to feed them into their specific image-processing pipeline.  The application uses <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> to perform the following operations:</p><ol> <li>Acquire the next desktop image.</li> <li>Retrieve the information that describes the image.</li> <li>Perform an operation on the image. This operation can be as simple as copying the image to a staging buffer so that the application can read the pixel data on the image. The application reads the pixel data  after the application calls <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong>. Alternatively, this operation can be more complex. For example, the application can run some pixel shaders on the updated regions of the image to encode those regions for transmission to a client.</li> <li>After the application finishes  processing each desktop image, it releases the image, loops to step 1, and repeats the steps. The application repeats these steps until it is finished processing desktop images.</li> </ol><p>The following components of the operating system can generate the desktop image:</p><ul> <li>The DWM by composing the desktop image</li> <li>A full-screen DirectX or OpenGL application</li> <li>An application by switching to a separate desktop, for example, the secure desktop that is used to display the login screen</li> </ul><p>All current <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interfaces become invalid when the operating system switches to a different component that produces the desktop image or when a mode change occurs.  In these situations, the application must destroy its current <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface.</p><p>Examples of situations in which <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> becomes invalid are:</p><ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul><p>In these situations, the application must release the <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and must create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface for the new content.  If the application does not have the appropriate privilege to the new desktop image, its call to the <strong><see cref="M:SharpDX.DXGI.Output1.DuplicateOutput(SharpDX.ComObject)"/></strong> method fails.</p><p>While the application processes each desktop image, the operating system accumulates all the desktop image updates into a single update. For more information about desktop updates, see Updating the desktop image data.</p><p>The desktop image is always in the <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> format.</p><p>The <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface does not exist for Windows Store apps.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication']/*"/>	
            <msdn-id>hh404611</msdn-id>	
            <unmanaged>IDXGIOutputDuplication</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.OutputDuplication"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.op_Explicit(System.IntPtr)~SharpDX.DXGI.OutputDuplication">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.OutputDuplication"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetDescription(SharpDX.DXGI.OutputDuplicateDescription@)">
            <summary>	
            <p>Retrieves a description of a duplicated output. This description specifies the dimensions of the surface that contains the desktop image.</p>	
            </summary>	
            <param name="descRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.DXGI.OutputDuplicateDescription"/></strong> structure that describes the duplicated output. This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <remarks>	
            <p>After an application creates an <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface, it calls <strong>GetDesc</strong> to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetDesc']/*"/>	
            <msdn-id>hh404618</msdn-id>	
            <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutputDuplicateFrameInformation@,SharpDX.DXGI.Resource@)">
            <summary>	
            <p>Indicates that the application is ready to process the next desktop image.</p>	
            </summary>	
            <param name="timeoutInMilliseconds"><dd> <p>The time-out interval, in milliseconds. This interval specifies the amount of time that this method waits for a new frame before it returns to the caller.  This method returns if the interval elapses, and a new desktop image is not available.</p> <p>For more information about the time-out interval, see Remarks.</p> </dd></param>	
            <param name="frameInfoRef"><dd> <p>A reference to a memory location that receives the <strong><see cref="T:SharpDX.DXGI.OutputDuplicateFrameInformation"/></strong> structure that describes timing and presentation statistics for a frame.</p> </dd></param>	
            <param name="desktopResourceOut"><dd> <p>A reference to a variable that receives the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface of the surface that contains the desktop bitmap.</p> </dd></param>	
            <returns><p><strong>AcquireNextFrame</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully received the next desktop image.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.WaitTimeout"/> if the time-out interval elapsed before the next desktop frame was available.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called <strong>AcquireNextFrame</strong> without releasing the previous frame.</li> <li>E_INVALIDARG if one of the parameters to <strong>AcquireNextFrame</strong> is incorrect; for example, if <em>pFrameInfo</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p>When <strong>AcquireNextFrame</strong> returns successfully, the calling application can access the desktop image that <strong>AcquireNextFrame</strong> returns in the variable at <em>ppDesktopResource</em>.	
            If the caller specifies a zero time-out interval in the <em>TimeoutInMilliseconds</em> parameter, <strong>AcquireNextFrame</strong> verifies whether there is a new desktop image available, returns immediately, and indicates its outcome with the return value.  If the caller specifies an <strong>INFINITE</strong> time-out interval in the <em>TimeoutInMilliseconds</em> parameter, the time-out interval never elapses.</p><p><strong>Note</strong>??You cannot cancel the wait that you specified in the <em>TimeoutInMilliseconds</em> parameter. Therefore, if you must periodically check for other conditions (for example, a terminate signal), you should specify a non-<strong>INFINITE</strong> time-out interval. After the time-out interval elapses, you can check for these other conditions and then call <strong>AcquireNextFrame</strong> again to wait for the next frame.</p><p><strong>AcquireNextFrame</strong> acquires a new desktop frame when the operating system either updates the desktop bitmap image or changes the shape or position of a hardware reference.  The new frame that <strong>AcquireNextFrame</strong> acquires might have only the desktop image updated, only the reference shape or position updated, or both.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::AcquireNextFrame']/*"/>	
            <msdn-id>hh404615</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::AcquireNextFrame([In] unsigned int TimeoutInMilliseconds,[Out] DXGI_OUTDUPL_FRAME_INFO* pFrameInfo,[Out] IDXGIResource** ppDesktopResource)</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::AcquireNextFrame</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetFrameDirtyRects(System.Int32,SharpDX.Mathematics.Interop.RawRectangle[],System.Int32@)">
            <summary>	
            <p>Gets information about dirty rectangles for the current desktop frame.</p>	
            </summary>	
            <param name="dirtyRectsBufferSize"><dd> <p>The size in bytes of the buffer that the caller passed to the  <em>pDirtyRectsBuffer</em> parameter.</p> </dd></param>	
            <param name="dirtyRectsBufferRef"><dd> <p>A reference to an array of <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structures  that identifies the dirty rectangle regions for the desktop frame.</p> </dd></param>	
            <param name="dirtyRectsBufferSizeRequiredRef"><dd> <p>Pointer to a variable that receives the number of bytes that  <strong>GetFrameDirtyRects</strong> needs to store information about dirty regions in the buffer at  <em>pDirtyRectsBuffer</em>.</p> <p>For more information about returning the required buffer size, see Remarks.</p> </dd></param>	
            <returns><p><strong>GetFrameDirtyRects</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved information about dirty rectangles.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication  interface typically becomes invalid when a different type of image is displayed on the desktop. Examples of  this situation are:  <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul> In this situation, the application must release the  <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and  create a new  <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> for the new  content.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> if the buffer that the calling application provided was not big enough.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called  <strong>GetFrameDirtyRects</strong> without owning the desktop image.</li> <li>E_INVALIDARG if one of the parameters to  <strong>GetFrameDirtyRects</strong> is incorrect; for example, if <em>pDirtyRectsBuffer</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p><strong>GetFrameDirtyRects</strong> stores a size value in the variable at <em>pDirtyRectsBufferSizeRequired</em>. This  value specifies the number of bytes that <strong>GetFrameDirtyRects</strong> needs to store information about dirty regions. You can use this value  in the following situations to determine the amount of memory to allocate for future buffers that you pass to <em>pDirtyRectsBuffer</em>:</p><ul> <li><strong>GetFrameDirtyRects</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> because the buffer is not big enough.</li> <li><strong>GetFrameDirtyRects</strong> supplies a buffer that is bigger than necessary. The size value returned at  <em>pDirtyRectsBufferSizeRequired</em> informs the caller how much buffer space was actually  used compared to how much buffer space the caller allocated and specified in the  <em>DirtyRectsBufferSize</em> parameter.</li> </ul><p>The caller can also use the value returned at <em>pDirtyRectsBufferSizeRequired</em> to  determine the number of <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong>s returned in the <em>pDirtyRectsBuffer</em> array.</p><p>The buffer contains the list of dirty <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong>s for the current frame.</p><p><strong>Note</strong>??To produce a visually accurate copy of the desktop, an application must first process all move <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong>s before  it processes dirty <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong>s.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetFrameDirtyRects']/*"/>	
            <msdn-id>hh404619</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameDirtyRects([In] unsigned int DirtyRectsBufferSize,[Out, Buffer] RECT* pDirtyRectsBuffer,[Out] unsigned int* pDirtyRectsBufferSizeRequired)</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::GetFrameDirtyRects</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetFrameMoveRects(System.Int32,SharpDX.DXGI.OutputDuplicateMoveRectangle[],System.Int32@)">
            <summary>	
            <p>Gets information about the moved rectangles for the current desktop frame.</p>	
            </summary>	
            <param name="moveRectsBufferSize"><dd> <p>The size in bytes of the buffer that the caller passed to the  <em>pMoveRectBuffer</em> parameter.</p> </dd></param>	
            <param name="moveRectBufferRef"><dd> <p>A reference to an array of  <strong><see cref="T:SharpDX.DXGI.OutputDuplicateMoveRectangle"/></strong> structures  that identifies the moved rectangle regions for the desktop frame.</p> </dd></param>	
            <param name="moveRectsBufferSizeRequiredRef"><dd> <p>Pointer to a variable that receives the number of bytes that  <strong>GetFrameMoveRects</strong> needs to store information about moved regions in the buffer at <em>pMoveRectBuffer</em>.</p> <p>For more information about returning the required buffer size, see Remarks.</p> </dd></param>	
            <returns><p><strong>GetFrameMoveRects</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved information about moved rectangles.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:  <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul> In this situation, the application must release the  <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and  create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> if the buffer that the calling application provided  is not big enough.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called  <strong>GetFrameMoveRects</strong> without owning the desktop image.</li> <li>E_INVALIDARG if one of the parameters to  <strong>GetFrameMoveRects</strong> is incorrect; for example, if  <em>pMoveRectBuffer</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the  DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p><strong>GetFrameMoveRects</strong> stores a size value in the variable at <em>pMoveRectsBufferSizeRequired</em>. This  value specifies the number of bytes that <strong>GetFrameMoveRects</strong> needs to store information about moved regions. You can use  this value in the following situations to determine the amount of memory to allocate for future buffers that you pass to <em>pMoveRectBuffer</em>:</p><ul> <li><strong>GetFrameMoveRects</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> because the buffer is not big enough.</li> <li><strong>GetFrameMoveRects</strong> supplies a buffer that is bigger than necessary. The size value returned at <em>pMoveRectsBufferSizeRequired</em> informs the caller how much buffer space was actually used compared to how much buffer space the caller allocated and specified in the  <em>MoveRectsBufferSize</em> parameter.</li> </ul><p>The caller can also use the value returned at <em>pMoveRectsBufferSizeRequired</em> to determine the number of <strong><see cref="T:SharpDX.DXGI.OutputDuplicateMoveRectangle"/></strong> structures returned.</p><p>The buffer contains the list of move RECTs for the current frame.</p><p><strong>Note</strong>??To produce a visually accurate copy of the desktop, an application must first process all move RECTs before it processes dirty RECTs.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetFrameMoveRects']/*"/>	
            <msdn-id>hh404620</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameMoveRects([In] unsigned int MoveRectsBufferSize,[Out, Buffer] DXGI_OUTDUPL_MOVE_RECT* pMoveRectBuffer,[Out] unsigned int* pMoveRectsBufferSizeRequired)</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::GetFrameMoveRects</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,SharpDX.DXGI.OutputDuplicatePointerShapeInformation@)">
            <summary>	
            <p>Gets information about the new reference shape for the current desktop frame.</p>	
            </summary>	
            <param name="pointerShapeBufferSize"><dd> <p>The size in bytes of the buffer that the caller passed to the  <em>pPointerShapeBuffer</em> parameter.</p> </dd></param>	
            <param name="pointerShapeBufferRef"><dd> <p>A reference to a buffer to which <strong>GetFramePointerShape</strong> copies and returns pixel data for the new reference shape.</p> </dd></param>	
            <param name="pointerShapeBufferSizeRequiredRef"><dd> <p>Pointer to a variable that receives the number of bytes that <strong>GetFramePointerShape</strong> needs to store the new reference shape pixel data in the buffer at <em>pPointerShapeBuffer</em>.</p> <p>For more information about returning the required buffer size, see Remarks.</p> </dd></param>	
            <param name="pointerShapeInfoRef"><dd> <p>Pointer to a <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerShapeInformation"/></strong> structure that receives the reference shape information.</p> </dd></param>	
            <returns><p><strong>GetFramePointerShape</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved information about the new reference shape.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> if the buffer that the calling application provided was not big enough.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called <strong>GetFramePointerShape</strong> without owning the desktop image.</li> <li>E_INVALIDARG if one of the parameters to <strong>GetFramePointerShape</strong> is incorrect; for example, if <em>pPointerShapeInfo</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p><strong>GetFramePointerShape</strong> stores a size value in the variable at <em>pPointerShapeBufferSizeRequired</em>. This  value specifies the number of bytes that <em>pPointerShapeBufferSizeRequired</em> needs to store the new reference shape pixel data. You can use the value in the following situations to determine the amount of memory to allocate for future buffers that you pass to <em>pPointerShapeBuffer</em>:</p><ul> <li><strong>GetFramePointerShape</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> because the buffer is not big enough.</li> <li><strong>GetFramePointerShape</strong> supplies a bigger than necessary buffer. The size value returned at <em>pPointerShapeBufferSizeRequired</em> informs the caller how much buffer space was actually used compared to how much buffer space the caller allocated and specified in the  <em>PointerShapeBufferSize</em> parameter.</li> </ul><p>The <em>pPointerShapeInfo</em> parameter describes the new reference shape.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetFramePointerShape']/*"/>	
            <msdn-id>hh404621</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFramePointerShape([In] unsigned int PointerShapeBufferSize,[Out, Buffer] void* pPointerShapeBuffer,[Out] unsigned int* pPointerShapeBufferSizeRequired,[Out] DXGI_OUTDUPL_POINTER_SHAPE_INFO* pPointerShapeInfo)</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::GetFramePointerShape</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface(SharpDX.DXGI.MappedRectangle@)">
            <summary>	
            <p>Provides the CPU with efficient access to a desktop image if that desktop image is already in system memory.</p>	
            </summary>	
            <param name="lockedRectRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.DXGI.MappedRectangle"/></strong> structure that receives the surface data that the CPU needs to directly access the surface data. </p> </dd></param>	
            <returns><p><strong>MapDesktopSurface</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the surface data.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application already has an outstanding map on the desktop image.  The application must call <strong>UnMapDesktopSurface</strong> before it calls <strong>MapDesktopSurface</strong> again. <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> is also returned if the application did not own the desktop image when it called <strong>MapDesktopSurface</strong>.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/> if the desktop image is not in system memory. In this situation, the application must first transfer the image to a staging surface and then lock the image by calling the <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> method.</li> <li>E_INVALIDARG if the <em>pLockedRect</em> parameter is incorrect; for example, if <em>pLockedRect</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p>You can successfully call <strong>MapDesktopSurface</strong> if the  <strong>DesktopImageInSystemMemory</strong> member of the <strong><see cref="T:SharpDX.DXGI.OutputDuplicateDescription"/></strong> structure is set to <strong>TRUE</strong>. If <strong>DesktopImageInSystemMemory</strong> is <strong><see cref="F:SharpDX.Result.False"/></strong>, <strong>MapDesktopSurface</strong> returns <see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/>. Call <strong><see cref="M:SharpDX.DXGI.OutputDuplication.GetDescription(SharpDX.DXGI.OutputDuplicateDescription@)"/></strong> to retrieve the <strong><see cref="T:SharpDX.DXGI.OutputDuplicateDescription"/></strong> structure.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::MapDesktopSurface']/*"/>	
            <msdn-id>hh404622</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::MapDesktopSurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.UnMapDesktopSurface">
            <summary>	
            <p>Invalidates the reference to the desktop image that was retrieved by using <strong><see cref="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface(SharpDX.DXGI.MappedRectangle@)"/></strong>.</p>	
            </summary>	
            <returns><p><strong>UnMapDesktopSurface</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully completed.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application did not map the desktop surface by calling <strong><see cref="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface(SharpDX.DXGI.MappedRectangle@)"/></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::UnMapDesktopSurface']/*"/>	
            <msdn-id>hh404624</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::UnMapDesktopSurface()</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::UnMapDesktopSurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.ReleaseFrame">
            <summary>	
            <p>Indicates that the application finished processing the frame.</p>	
            </summary>	
            <returns><p><strong>ReleaseFrame</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully completed.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the application already released the frame.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p>The application must release the frame before it acquires the next frame.  After the frame is released, the surface that contains the desktop bitmap becomes invalid; you will not be able to use the surface in a DirectX graphics operation.</p><p>For performance reasons, we recommend that you release the frame just before you call the <strong><see cref="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutputDuplicateFrameInformation@,SharpDX.DXGI.Resource@)"/></strong> method to acquire the next frame.  When the client does not own the frame, the operating system copies all desktop updates to the surface. This can result in wasted GPU cycles if the operating system updates the same region for each frame that occurs.  When the client acquires the frame, the client is aware of only the final update to this region; therefore, any overlapping updates during previous frames are wasted. When the client acquires a frame, the client owns the surface; therefore, the operating system can track only the updated regions and cannot copy desktop updates to the surface. Because of this behavior, we recommend that you minimize the time between the call to release the current frame and the call to acquire the next frame.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::ReleaseFrame']/*"/>	
            <msdn-id>hh404623</msdn-id>	
            <unmanaged>HRESULT IDXGIOutputDuplication::ReleaseFrame()</unmanaged>	
            <unmanaged-short>IDXGIOutputDuplication::ReleaseFrame</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface">
            <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutputDuplication.Description">
            <summary>	
            <p>Retrieves a description of a duplicated output. This description specifies the dimensions of the surface that contains the desktop image.</p>	
            </summary>	
            <remarks>	
            <p>After an application creates an <strong><see cref="T:SharpDX.DXGI.OutputDuplication"/></strong> interface, it calls <strong>GetDesc</strong> to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetDesc']/*"/>	
            <msdn-id>hh404618</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.SwapChain">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface implements one or more <strong>surfaces</strong> for storing rendered data before presenting it to an output.</p>	
            </summary>	
            <remarks>	
            <p>You can create a swap chain by 	
            calling <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>. You can also create a swap chain when you call <strong>D3D11CreateDeviceAndSwapChain</strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface provides.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain']/*"/>	
            <msdn-id>bb174569</msdn-id>	
            <unmanaged>IDXGISwapChain</unmanaged>	
            <unmanaged-short>IDXGISwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.op_Explicit(System.IntPtr)~SharpDX.DXGI.SwapChain">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.SwapChain"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>Present</strong> anymore to present a rendered image. Instead, use <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>. For more info, see Remarks.]</p><p>Presents a rendered image to the user.</p>	
            </summary>	
            <param name="syncInterval">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <returns><p>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.DXGI.ResultCode.DeviceReset"/> or <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> (see DXGI_ERROR), <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> (see <see cref="T:SharpDX.DXGI.DXGIStatus"/>), or D3DDDIERR_DEVICEREMOVED.  </p><p><strong>Note</strong>??The <strong>Present</strong> method can return either <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> or D3DDDIERR_DEVICEREMOVED if a video card has been physically removed from the computer, or a driver upgrade for the video card has occurred.</p></returns>	
            <remarks>	
            <p>Starting with Direct3D 11.1, we recommend to instead use <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> because you can then use dirty rectangles and the scroll rectangle in the swap chain presentation and as such use less memory bandwidth and as a result less system power. For more info about using dirty rectangles and the scroll rectangle in swap chain presentation, see Using dirty rectangles and the scroll rectangle in swap chain presentation.</p><p>For the best performance when flipping swap-chain buffers in a full-screen application, see Full-Screen Application Performance Hints.</p><p>Because calling <strong>Present</strong> might cause the render thread to wait on the message-pump thread, be careful when calling this method in an application that uses multiple threads. For more details, see Multithreading Considerations.</p><table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 10:</p> <p>Specifying <strong><see cref="F:SharpDX.DXGI.PresentFlags.Test"/></strong> in the <em>Flags</em> parameter is analogous to <strong>IDirect3DDevice9::TestCooperativeLevel</strong> in Direct3D 9.</p> </td></tr> </table><p>?</p><p>For flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set, a successful presentation unbinds back buffer 0 from the graphics pipeline, except for when you pass the <strong><see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong> flag in the <em>Flags</em> parameter.</p><p>For info about how data values change when you present content to the screen, see Converting data for the color space.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::Present']/*"/>	
            <msdn-id>bb174576</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)">
            <summary>	
            <p>Accesses one of the swap-chain's back buffers.</p>	
            </summary>	
            <param name="buffer"><dd>  <p>A zero-based buffer index. </p> <p>If the swap chain's swap effect is <strong><see cref="F:SharpDX.DXGI.SwapEffect.Discard"/></strong>, this method can only access the first buffer; for this situation, set the index to zero.</p> <p>If the swap chain's swap effect is either <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> or <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>, only the swap chain's zero-index buffer can be read from and written to. The swap chain's buffers with indexes greater than zero can only be read from; so if you call the <strong><see cref="M:SharpDX.DXGI.Resource.GetUsage(System.Int32)"/></strong> method for such buffers, they have the <strong><see cref="F:SharpDX.DXGI.Usage.ReadOnly"/></strong> flag set.</p> </dd></param>	
            <param name="riid"><dd>  <p>The type of interface used to manipulate the buffer.</p> </dd></param>	
            <param name="surfaceOut"><dd>  <p>A reference to a back-buffer interface.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetBuffer']/*"/>	
            <msdn-id>bb174570</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Mathematics.Interop.RawBool,SharpDX.DXGI.Output)">
            <summary>	
            <p>Sets the display state to windowed or full screen.</p>	
            </summary>	
            <param name="fullscreen"><dd>  <p>A Boolean value that specifies whether to set the display state to windowed or full screen. <strong>TRUE</strong> for full screen, and <strong><see cref="F:SharpDX.Result.False"/></strong> for windowed.</p> </dd></param>	
            <param name="targetRef"><dd>  <p>If you pass <strong>TRUE</strong> to the <em>Fullscreen</em> parameter to set the display state to full screen, you can optionally set this parameter to a reference to an <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface for the output target that contains the swap chain. If you set this parameter to <strong><c>null</c></strong>, DXGI will choose the output based on the swap-chain's device and the output window's  placement. If you pass <strong><see cref="F:SharpDX.Result.False"/></strong> to <em>Fullscreen</em>, you must set this parameter to <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>This methods returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if the action succeeded and the swap chain was placed in the requested state.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/> if the action failed. There are many reasons why a windowed-mode swap chain cannot switch to full-screen mode. For instance: <ul> <li>The application is running over Terminal Server.</li> <li>The output window is occluded.</li> <li>The output window does not have keyboard focus.</li> <li>Another application is already in full-screen mode.</li> </ul> <p>When this error is returned, an application can continue to run in windowed mode and try to switch to full-screen mode later.</p> </li> <li><see cref="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/> is returned if a fullscreen/windowed mode transition is occurring when this API is called.</li> <li>Other error codes if you run out of memory or encounter another unexpected fault; these codes may be treated as hard, non-continuable errors.</li> </ul></returns>	
            <remarks>	
            <p>DXGI may change the display state of a swap chain in response to end user or system requests.</p><p>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <strong>SetFullscreenState</strong>; that is, do not set the <strong>Windowed</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> to <see cref="F:SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. Also, we recommend that you have a time-out confirmation screen or other fallback mechanism when you allow the end user to change display modes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::SetFullscreenState']/*"/>	
            <msdn-id>bb174579</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::SetFullscreenState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetFullscreenState(SharpDX.Mathematics.Interop.RawBool@,SharpDX.DXGI.Output@)">
            <summary>	
            <p>Get the state associated with full-screen mode.</p>	
            </summary>	
            <param name="fullscreenRef"><dd>  <p>A reference to a boolean whose value is either:</p> <ul> <li><strong>TRUE</strong> if the swap chain is in full-screen mode</li> <li><strong><see cref="F:SharpDX.Result.False"/></strong> if the swap chain is in windowed mode</li> </ul> </dd></param>	
            <param name="targetOut"><dd>  <p>A reference to the output target (see <strong><see cref="T:SharpDX.DXGI.Output"/></strong>) when the mode is full screen; otherwise <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>When the swap chain is in full-screen mode, a reference to the  target output will be returned and its reference count will be incremented.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFullscreenState']/*"/>	
            <msdn-id>bb174574</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out, Optional] BOOL* pFullscreen,[Out, Optional] IDXGIOutput** ppTarget)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDesc</strong> anymore to get a description of the swap chain. Instead, use <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong>.]</p><p>Get a description of the swap chain.</p>	
            </summary>	
            <param name="descRef">No documentation.</param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
            <msdn-id>bb174572</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)">
            <summary>	
            <p>Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.</p>	
            </summary>	
            <param name="bufferCount"><dd>  <p>The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model.</p> </dd></param>	
            <param name="width"><dd>  <p>New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. You can't specify the width as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface.</p> </dd></param>	
            <param name="height"><dd>  <p>New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. You can't specify the height as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface.</p> </dd></param>	
            <param name="newFormat"><dd>  <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer. Set this value to <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer. The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model.</p> </dd></param>	
            <param name="swapChainFlags"><dd>  <p>A combination of <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>You can't resize a swap chain unless you release all outstanding references to its back buffers. You must release all of its direct and indirect references on the back buffers in order for <strong>ResizeBuffers</strong> to succeed.</p><p>Direct references are held by the application after it calls <strong>AddRef</strong> on a resource.</p><p>Indirect references are held by views to a resource, binding a view of the resource to a device context,  a command list that used the resource, a command list that used a view to that resource, a command list that executed another command list that used the  resource, and so on.</p><p>Before you call <strong>ResizeBuffers</strong>, ensure that the application releases all references (by calling the appropriate number of <strong>Release</strong> invocations)  on the resources, any views to the resource, and any command lists that use either the resources or views, and ensure that neither the resource nor a view is  still bound to a device context.  You can use <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.ClearState"/></strong> to ensure that all references are released. If a view is bound to a deferred context, you must discard the partially built command list as well (by calling <strong>ClearState</strong>, <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal"/></strong>, then <strong>Release</strong> on the command list).   After you call <strong>ResizeBuffers</strong>, you can re-query interfaces via <strong><see cref="M:SharpDX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)"/></strong>.</p><p>For swap chains that you created with <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong>, before you call <strong>ResizeBuffers</strong>, also call <strong><see cref="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Mathematics.Interop.RawRectangle})"/></strong> on the swap chain's back-buffer surface to ensure that you have no outstanding GDI device contexts (DCs) open.</p><p>We recommend that you call <strong>ResizeBuffers</strong> when a client window is resized (that is, when an application receives a WM_SIZE message).</p><p>The only difference between <strong>ResizeBuffers</strong> in Windows?8 and <strong>ResizeBuffers</strong> in Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong>Present</strong> method fails.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::ResizeBuffers']/*"/>	
            <msdn-id>bb174577</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT NewFormat,[In] DXGI_SWAP_CHAIN_FLAG SwapChainFlags)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::ResizeBuffers</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)">
            <summary>	
            <p>Resizes the output target.</p>	
            </summary>	
            <param name="newTargetParametersRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target.  If the format is <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong>, <strong>ResizeTarget</strong> uses the existing format. We only recommend that you use <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> when the swap chain is in full-screen  mode as this method is not thread safe.</p> </dd></param>	
            <returns><p>Returns a code that indicates success or failure. <strong><see cref="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/></strong> is returned if a full-screen/windowed mode transition is occurring  when this API is called. See DXGI_ERROR for additional DXGI error codes.</p></returns>	
            <remarks>	
            <p><strong>ResizeTarget</strong> resizes the target window when the swap chain is in windowed mode, and changes the display mode on the target output when the swap  chain is in full-screen mode. Therefore, apps can call <strong>ResizeTarget</strong> to resize the target window (rather than a Microsoft Win32API such as <strong>SetWindowPos</strong>)  without knowledge of the swap chain display mode.</p><p>If a Windows Store app calls <strong>ResizeTarget</strong>, it fails with <see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/>.</p><p>You cannot call <strong>ResizeTarget</strong> on a windowless swap chain that you created with <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>.</p><p>Apps must still call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> after they call <strong>ResizeTarget</strong> because only <strong>ResizeBuffers</strong> can change the back buffers. But, if those apps have implemented window resize processing to call <strong>ResizeBuffers</strong>, they don't need to explicitly call <strong>ResizeBuffers</strong> after they call <strong>ResizeTarget</strong> because the window resize processing will achieve what the app requires.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::ResizeTarget']/*"/>	
            <msdn-id>bb174578</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::ResizeTarget</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)">
            <summary>	
            <p>Get the output (the display monitor) that contains the majority of the client area of the target window.</p>	
            </summary>	
            <param name="outputOut"><dd>  <p>A reference to the output interface (see <strong><see cref="T:SharpDX.DXGI.Output"/></strong>).</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p>You cannot call <strong>GetContainingOutput</strong> on a windowless swap chain that you created with <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
            <msdn-id>bb174571</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetContainingOutput</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)">
            <summary>	
            <p>Gets performance statistics about the last render frame.</p>	
            </summary>	
            <param name="statsRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong> structure for the frame statistics.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p>You cannot use <strong>GetFrameStatistics</strong> for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.</p><p>You can only use <strong>GetFrameStatistics</strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value in the <strong>SwapEffect</strong> member of the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure to specify that the swap chain uses the flip presentation model.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
            <msdn-id>bb174573</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetFrameStatistics</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetLastPresentCount(System.Int32@)">
            <summary>	
            <p>Gets the number of times  that <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> has been called.</p>	
            </summary>	
            <param name="lastPresentCountRef">No documentation.</param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p>For info about presentation statistics for a frame, see <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
            <msdn-id>bb174575</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetLastPresentCount</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.#ctor(SharpDX.DXGI.Factory,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription)">
            <summary>	
            Creates a swap chain.	
            </summary>	
            <remarks>	
            If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and DXGI_STATUS_OCCLUDED will be returned. If the buffer width or the buffer height are zero, the sizes will be inferred from the output window size in the swap-chain description. Since the target output cannot be chosen explicitly when the swap-chain is created, you should not create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure the sizes match:  Create a windowed swap chain and then set it full-screen using <see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Mathematics.Interop.RawBool,SharpDX.DXGI.Output)"/>. Save a reference to the swap-chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/>) during the transition from windowed to full-screen.  If the swap chain is in full-screen mode, before you release it, you must use {{SetFullscreenState}} to switch it to windowed mode. For more information about releasing a swap chain, see the Destroying a Swap Chain section of {{DXGI Overview}}. 	
            </remarks>	
            <param name="factory">a reference to a <see cref="T:SharpDX.DXGI.Factory"/>.</param>
            <param name="device">A reference to the device that will write 2D images to the swap chain. </param>
            <param name="description">A reference to the swap-chain description (see <see cref="T:SharpDX.DXGI.SwapChainDescription"/>).</param>
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out] IDXGISwapChain** ppSwapChain)</unmanaged>
            <msdn-id>bb174537</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetBackBuffer``1(System.Int32)">
            <summary>
            Access one of the swap-chain back buffers.
            </summary>
            <typeparam name="T">The interface of the surface to resolve from the back buffer</typeparam>
            <param name="index">A zero-based buffer index. If the swap effect is not DXGI_SWAP_EFFECT_SEQUENTIAL, this method only has access to the first buffer; for this case, set the index to zero.</param>
            <returns>
            Returns a reference to a back-buffer interface.
            </returns>
            <msdn-id>bb174570</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.Description">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDesc</strong> anymore to get a description of the swap chain. Instead, use <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong>.]</p><p>Get a description of the swap chain.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
            <msdn-id>bb174572</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.ContainingOutput">
            <summary>	
            <p>Get the output (the display monitor) that contains the majority of the client area of the target window.</p>	
            </summary>	
            <remarks>	
            <p>If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p>You cannot call <strong>GetContainingOutput</strong> on a windowless swap chain that you created with <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
            <msdn-id>bb174571</msdn-id>	
            <unmanaged>GetContainingOutput</unmanaged>	
            <unmanaged-short>GetContainingOutput</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.FrameStatistics">
            <summary>	
            <p>Gets performance statistics about the last render frame.</p>	
            </summary>	
            <remarks>	
            <p>You cannot use <strong>GetFrameStatistics</strong> for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.</p><p>You can only use <strong>GetFrameStatistics</strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value in the <strong>SwapEffect</strong> member of the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure to specify that the swap chain uses the flip presentation model.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
            <msdn-id>bb174573</msdn-id>	
            <unmanaged>GetFrameStatistics</unmanaged>	
            <unmanaged-short>GetFrameStatistics</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.LastPresentCount">
            <summary>	
            <p>Gets the number of times  that <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> has been called.</p>	
            </summary>	
            <remarks>	
            <p>For info about presentation statistics for a frame, see <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
            <msdn-id>bb174575</msdn-id>	
            <unmanaged>GetLastPresentCount</unmanaged>	
            <unmanaged-short>GetLastPresentCount</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.IsFullScreen">
            <summary>
            Gets or sets a value indicating whether the swapchain is in fullscreen.
            </summary>
            <value>
            	<c>true</c> if this swapchain is in fullscreen; otherwise, <c>false</c>.
            </value>
            <msdn-id>bb174574</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out] BOOL* pFullscreen,[Out] IDXGIOutput** ppTarget)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChain1">
            <summary>	
            <p>Provides presentation capabilities that are enhanced from <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong>. These presentation capabilities consist of specifying dirty rectangles and scroll rectangle to optimize the presentation.</p>	
            </summary>	
            <remarks>	
            <p>You can create a swap chain by 	
            calling <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>. You can also create a swap chain when you call <strong>D3D11CreateDeviceAndSwapChain</strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface provides.</p><p><strong><see cref="T:SharpDX.DXGI.SwapChain1"/></strong> provides the <strong>IsTemporaryMonoSupported</strong> method that you can use to determine whether the swap chain supports "temporary mono? presentation. This type of swap chain is a stereo swap chain that can be used to present mono content.	
            </p><p><strong>Note</strong>??Some stereo features like the advanced presentation flags are not represented by an explicit interface change.  Furthermore, the original (<strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong>) and new (<strong><see cref="T:SharpDX.DXGI.SwapChain1"/></strong>) swap chain interfaces generally have the same behavior. For information about how <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> methods are translated into <strong><see cref="T:SharpDX.DXGI.SwapChain1"/></strong> methods, see the descriptions of the <strong><see cref="T:SharpDX.DXGI.SwapChain1"/></strong> methods.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1']/*"/>	
            <msdn-id>hh404631</msdn-id>	
            <unmanaged>IDXGISwapChain1</unmanaged>	
            <unmanaged-short>IDXGISwapChain1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.op_Explicit(System.IntPtr)~SharpDX.DXGI.SwapChain1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.SwapChain1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)">
            <summary>	
            <p>Gets a description of the swap chain.</p>	
            </summary>	
            <param name="descRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure that describes the swap chain.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetDesc1']/*"/>	
            <msdn-id>hh404640</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetDesc1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetFullscreenDescription(SharpDX.DXGI.SwapChainFullScreenDescription@)">
            <summary>	
            <p>Gets a description of a full-screen swap chain.</p>	
            </summary>	
            <param name="descRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.DXGI.SwapChainFullScreenDescription"/></strong> structure that describes the full-screen swap chain.</p> </dd></param>	
            <returns><p><strong>GetFullscreenDesc</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the description of the full-screen swap chain.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> for non-<strong><see cref="T:System.IntPtr"/></strong> swap chains or if <em>pDesc</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic. </li> </ul></returns>	
            <remarks>	
            <p>The semantics of <strong>GetFullscreenDesc</strong> are identical to that of the <strong>IDXGISwapchain::GetDesc</strong> method for <strong><see cref="T:System.IntPtr"/></strong>-based swap chains.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetFullscreenDesc']/*"/>	
            <msdn-id>hh404644</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetFullscreenDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetHwnd(System.IntPtr@)">
            <summary>	
            <p>Retrieves the underlying <strong><see cref="T:System.IntPtr"/></strong> for this swap-chain object.</p>	
            </summary>	
            <param name="hwndRef">No documentation.</param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p><p>If <em>pHwnd</em> receives <strong><c>null</c></strong> (that is, the swap chain is not <strong><see cref="T:System.IntPtr"/></strong>-based), <strong>GetHwnd</strong> returns <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>.</p></returns>	
            <remarks>	
            <p>Applications call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create a swap chain that is associated with an <strong><see cref="T:System.IntPtr"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetHwnd']/*"/>	
            <msdn-id>hh404647</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetHwnd</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetCoreWindow(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Retrieves the underlying <strong>CoreWindow</strong> object for this swap-chain object.</p>	
            </summary>	
            <param name="refiid">No documentation.</param>	
            <param name="unkOut">No documentation.</param>	
            <returns><p><strong>GetCoreWindow</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the underlying <strong>CoreWindow</strong> object.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppUnk</em> is <strong><c>null</c></strong>; that is, the swap chain is not associated with a <strong>CoreWindow</strong> object.</li> <li>Any <strong><see cref="T:SharpDX.Result"/></strong> that a call to <strong>QueryInterface</strong> to query for an <strong>CoreWindow</strong> object might typically return.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic. </li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>GetCoreWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>Applications call the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create a swap chain that is associated with an <strong>CoreWindow</strong> object.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetCoreWindow']/*"/>	
            <msdn-id>hh404650</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetCoreWindow([In] const GUID&amp; refiid,[Out] void** ppUnk)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetCoreWindow</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)">
            <summary>	
            <p>Presents a frame on the display screen. </p>	
            </summary>	
            <param name="syncInterval"><dd> <p>An integer that specifies how to synchronize presentation of a frame with the vertical blank.</p> <p>For the bit-block transfer (bitblt) model (<strong><see cref="F:SharpDX.DXGI.SwapEffect.Discard"/></strong> or <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong>), values are:</p> <ul> <li>0 - The presentation occurs immediately, there is no synchronization.</li> <li>1,2,3,4 - Synchronize presentation after the <em>n</em>th vertical blank.</li> </ul> <p>For the flip model (<strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>), values are:</p> <ul> <li>0 - Cancel the remaining time on the previously presented frame and discard this frame if a newer frame is queued.</li> <li>n &gt; 0 - Synchronize presentation for at least <em>n</em> vertical blanks.</li> </ul> <p>For an example that shows how sync-interval values affect a flip presentation queue, see Remarks.</p> <p>If the update region straddles more than one output (each represented by <strong><see cref="T:SharpDX.DXGI.Output1"/></strong>), <strong>Present1</strong> performs the synchronization to the output that contains the largest subrectangle of the target window's client area.</p> </dd></param>	
            <param name="presentFlags"><dd> <p>An integer value that contains swap-chain presentation options. These options are defined by the DXGI_PRESENT constants.</p> </dd></param>	
            <param name="presentParametersRef"><dd> <p>A reference to a <strong><see cref="T:SharpDX.DXGI.PresentParameters"/></strong> structure that describes updated rectangles and scroll information of the frame to present.</p> </dd></param>	
            <returns><p>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> , <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/>, <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>, or E_OUTOFMEMORY.  </p></returns>	
            <remarks>	
            <p>An app can use <strong>Present1</strong> to optimize presentation by specifying scroll and dirty rectangles. When the runtime has information about these rectangles, the runtime can then perform necessary bitblts during presentation more efficiently and pass this metadata to the Desktop Window Manager (DWM). The DWM can then use the metadata to optimize presentation and pass the metadata to indirect displays and terminal servers to optimize traffic over the wire. An app must confine its modifications to only the dirty regions that it passes to <strong>Present1</strong>, as well as modify the entire dirty region to avoid undefined resource contents from being exposed.</p><p>For flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set, a successful presentation results in an unbind of back buffer 0 from the graphics pipeline, except for when you pass the <strong><see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong> flag in the <em>Flags</em> parameter.</p><p>For info about how data values change when you present content to the screen, see Converting data for the color space.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::Present1']/*"/>	
            <msdn-id>hh446797</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS PresentFlags,[In] const void* pPresentParameters)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::Present1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.IsTemporaryMonoSupported_">
            <summary>	
            <p>Determines whether a swap chain supports ?temporary mono.?</p>	
            </summary>	
            <returns><p>Indicates whether to use the swap chain in temporary mono mode. <strong>TRUE</strong> indicates that you can use temporary-mono mode; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>IsTemporaryMonoSupported</strong> always returns <see cref="F:SharpDX.Result.False"/> because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>Temporary mono is a feature where a stereo swap chain can be presented using only the content in the left buffer.  To present using the left buffer as a mono buffer, an application calls the  <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> method with the <strong><see cref="F:SharpDX.DXGI.PresentFlags.StereoTemporaryMono"/></strong> flag.  All windowed swap chains support temporary mono. However, full-screen swap chains optionally support temporary mono because not all hardware supports temporary mono on full-screen swap chains efficiently.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::IsTemporaryMonoSupported']/*"/>	
            <msdn-id>hh446794</msdn-id>	
            <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::IsTemporaryMonoSupported</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetRestrictToOutput(SharpDX.DXGI.Output@)">
            <summary>	
            <p>Gets the output (the display monitor) to which you can restrict the contents of a present operation.</p>	
            </summary>	
            <param name="restrictToOutputOut"><dd> <p> A reference to a buffer that receives a reference to the <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface for the restrict-to output. An application passes this reference to <strong><see cref="T:SharpDX.DXGI.Output"/></strong> in a call to the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if the restrict-to output was successfully retrieved; otherwise, returns E_INVALIDARG if the reference is invalid.</p></returns>	
            <remarks>	
            <p>If the method succeeds, the runtime fills the buffer at <em>ppRestrictToOutput</em> with a reference to the restrict-to output interface. This restrict-to output interface has its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRestrictToOutput']/*"/>	
            <msdn-id>hh446788</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetRestrictToOutput</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.SetBackgroundColor(SharpDX.Mathematics.Interop.RawColor4)">
            <summary>	
            <p>Changes the background color of the swap chain.</p>	
            </summary>	
            <param name="colorRef"><dd> <p>A reference to a <strong>DXGI_RGBA</strong> structure that specifies the background color to set.</p> </dd></param>	
            <returns><p><strong>SetBackgroundColor</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully set the background color.</li> <li>E_INVALIDARG if the <em>pColor</em> parameter is incorrect, for example, <em>pColor</em> is <c>null</c> or any of the floating-point values of the members of <strong>DXGI_RGBA</strong> to which <em>pColor</em> points are outside the range from 0.0 through 1.0.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetBackgroundColor</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>The background color affects only swap chains that you create with <strong><see cref="F:SharpDX.DXGI.Scaling.None"/></strong> in windowed mode. You pass this value in a call to <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>. Typically, the background color is not visible unless the swap-chain contents are smaller than the destination window.</p><p>When you set the background color, it is not immediately realized. It takes effect in conjunction with your next call to the <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> method. The <strong>DXGI_PRESENT</strong> flags that you pass to <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> can help achieve the effect that you require. For example, if you call <strong>SetBackgroundColor</strong> and then call <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> with the <em>Flags</em> parameter set to <strong><see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong>, you change only the background color without changing the displayed contents of the swap chain.</p><p>When you call the <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> method to display contents of the swap chain, <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> uses the <strong><see cref="T:SharpDX.DXGI.AlphaMode"/></strong> value that is specified in the <strong>AlphaMode</strong> member of the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure to determine how to handle the <strong>a</strong> member of the <strong>DXGI_RGBA</strong> structure, the alpha value of the background color, that achieves window transparency. For example, if <strong>AlphaMode</strong> is <strong><see cref="F:SharpDX.DXGI.AlphaMode.Ignore"/></strong>, <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> ignores the a member of <strong>DXGI_RGBA</strong>.</p><p><strong>Note</strong>??Like all presentation data, we recommend that you perform floating point operations in a linear color space. When the desktop is in a fixed bit color depth mode, the operating system converts linear color data to standard RGB data (sRGB, gamma 2.2 corrected space) to compose to the screen. For more info, see Converting data for the color space.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::SetBackgroundColor']/*"/>	
            <msdn-id>hh446799</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::SetBackgroundColor([In] const D3DCOLORVALUE* pColor)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::SetBackgroundColor</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetBackgroundColor(SharpDX.Mathematics.Interop.RawColor4@)">
            <summary>	
            <p>Retrieves the background color of the swap chain.</p>	
            </summary>	
            <param name="colorRef"><dd> <p>A reference to a <strong>DXGI_RGBA</strong> structure that receives the background color of the swap chain.</p> </dd></param>	
            <returns><p><strong>GetBackgroundColor</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieves the background color.</li> <li> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the <em>pColor</em> parameter is invalid, for example, <em>pColor</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <remarks>	
            <p><strong>Note</strong>??The background color that <strong>GetBackgroundColor</strong> retrieves does not indicate what the screen currently displays. The background color indicates what the screen will display with your next call to the <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> method. The default value of the background color is black with full opacity: 0,0,0,1.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetBackgroundColor']/*"/>	
            <msdn-id>hh404634</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetBackgroundColor</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.SetRotation(SharpDX.DXGI.DisplayModeRotation)">
            <summary>	
            <p>Sets the rotation of the back buffers for the swap chain.</p>	
            </summary>	
            <param name="rotation"><dd> <p>A <strong><see cref="T:SharpDX.DXGI.DisplayModeRotation"/></strong>-typed value that specifies how to set the rotation of the back buffers for the swap chain.</p> </dd></param>	
            <returns><p><strong>SetRotation</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully set the rotation.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the swap chain is bit-block transfer (bitblt) model. The swap chain must be flip model to successfully call <strong>SetRotation</strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetRotation</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <remarks>	
            <p>You can only use <strong>SetRotation</strong> to rotate the back buffers for flip-model swap chains that you present in windowed mode. </p><p><strong>SetRotation</strong> isn't supported for rotating the back buffers for flip-model swap chains that you present in full-screen mode. In this situation, <strong>SetRotation</strong> doesn't fail, but you must ensure that you specify no rotation (<strong><see cref="F:SharpDX.DXGI.DisplayModeRotation.Identity"/></strong>) for the swap chain. Otherwise, when you call <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> to present a frame,  the presentation fails.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::SetRotation']/*"/>	
            <msdn-id>hh446801</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::SetRotation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetRotation(SharpDX.DXGI.DisplayModeRotation@)">
            <summary>	
            <p>Gets the rotation of the back buffers for the swap chain.</p>	
            </summary>	
            <param name="rotationRef"><dd> <p>A reference to a variable that receives a <strong><see cref="T:SharpDX.DXGI.DisplayModeRotation"/></strong>-typed value that specifies the rotation of the back buffers for the swap chain.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>GetRotation</strong> fails with <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRotation']/*"/>	
            <msdn-id>hh446791</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>	
            <unmanaged-short>IDXGISwapChain1::GetRotation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.#ctor(SharpDX.DXGI.Factory2,SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output)">
            <summary>
            Creates a swapchain associated to the specified HWND. This is applicable only for Desktop platform.
            </summary>
            <param name="factory">The DXGI Factory used to create the swapchain.</param>
            <param name="device">The associated device instance.</param>
            <param name="hwnd">The HWND of the window to which this swapchain is associated.</param>
            <param name="description">The swap chain description.</param>
            <param name="fullScreenDescription">The fullscreen description of the swap chain. Default is null.</param>
            <param name="restrictToOutput">The output to which this swap chain should be restricted. Default is null, meaning that there is no restriction.</param>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.#ctor(SharpDX.DXGI.Factory2,SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)">
            <summary>
            Creates a swapchain associated to the specified CoreWindow. This is applicable only for WinRT platform.
            </summary>
            <param name="factory">The DXGI Factory used to create the swapchain.</param>
            <param name="device">The associated device instance.</param>
            <param name="coreWindow">The HWND of the window to which this swapchain is associated.</param>
            <param name="description">The swap chain description.</param>
            <param name="restrictToOutput">The output to which this swap chain should be restricted. Default is null, meaning that there is no restriction.</param>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.#ctor(SharpDX.DXGI.Factory2,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)">
            <summary>
            Creates a swapchain for DirectComposition API or WinRT XAML framework. This is applicable only for WinRT platform.
            </summary>
            <param name="factory">The DXGI Factory used to create the swapchain.</param>
            <param name="device">The associated device instance.</param>
            <param name="description">The swap chain description.</param>
            <param name="restrictToOutput">The output to which this swap chain should be restricted. Default is null, meaning that there is no restriction.</param>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.Present(System.Int32,SharpDX.DXGI.PresentFlags,SharpDX.DXGI.PresentParameters)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="syncInterval"><para>An integer that specifies how to synchronize presentation of a frame with the vertical blank.</para> <para>For the bit-block transfer (bitblt) model, values are:</para>  0 - The presentation occurs immediately, there is no synchronization. 1,2,3,4 - Synchronize presentation after the nth vertical blank.  <para>For the flip model, values are:</para>  0 - Discard this frame if you submitted a more recent presentation. n &gt; 0 - Synchronize presentation for at least n vertical blanks.  <para>For an example that shows how sync-interval values affect a flip presentation queue, see Remarks.</para> <para>If the update region straddles more than one output (each represented by <see cref="T:SharpDX.DXGI.Output1"/>), Present1 performs the synchronization to the output that contains the largest subrectangle of the target window's client area.</para></param>	
            <param name="presentFlags"><para>An integer value that contains swap-chain presentation options. These options are defined by the DXGI_PRESENT constants.</para></param>	
            <param name="presentParameters"><para>A reference to a <see cref="T:SharpDX.DXGI.PresentParameters"/> structure that describes updated rectangles and scroll information of the frame to present.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> , <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/>, <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>, or E_OUTOFMEMORY.</returns>	
            <remarks>	
            An application can use Present1 to optimize presentation by specifying scroll and dirty rectangles. When the runtime has information about these rectangles, the runtime can then perform necessary bitblts during presentation more efficiently and pass this metadata to the Desktop Window Manager (DWM). The DWM can then use the metadata to optimize presentation and pass the metadata to indirect displays and terminal servers to optimize traffic over the wire. An application must confine its modifications to only the dirty regions that it passes to Present1, as well as modify the entire dirty region to avoid undefined resource contents from being exposed.For flip presentation model swap chains that you create with the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set, a successful presentation results in an unbind of back buffer 0 from the graphics pipeline, except for when you pass the <see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/> flag in the Flags parameter.Flip presentation model queueSuppose the following frames with sync-interval values are queued from oldest (A) to newest (E) before you call Present1.A: 3, B: 0, C: 0, D: 1, E: 0When you call Present1, the runtime shows frame A for 3 vertical blank intervals, then frame D for 1 vertical blank interval, and then frame E until you submit a new presentation. The runtime discards frames C and D.	
            </remarks>	
            <!-- Failed to insert some or all of included XML --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::Present1']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] unsigned int PresentFlags,[In] const void* pPresentParameters)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.Description1">
            <summary>	
            <p>Gets a description of the swap chain.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetDesc1']/*"/>	
            <msdn-id>hh404640</msdn-id>	
            <unmanaged>GetDesc1</unmanaged>	
            <unmanaged-short>GetDesc1</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.FullscreenDescription">
            <summary>	
            <p>Gets a description of a full-screen swap chain.</p>	
            </summary>	
            <remarks>	
            <p>The semantics of <strong>GetFullscreenDesc</strong> are identical to that of the <strong>IDXGISwapchain::GetDesc</strong> method for <strong><see cref="T:System.IntPtr"/></strong>-based swap chains.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetFullscreenDesc']/*"/>	
            <msdn-id>hh404644</msdn-id>	
            <unmanaged>GetFullscreenDesc</unmanaged>	
            <unmanaged-short>GetFullscreenDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.Hwnd">
            <summary>	
            <p>Retrieves the underlying <strong><see cref="T:System.IntPtr"/></strong> for this swap-chain object.</p>	
            </summary>	
            <remarks>	
            <p>Applications call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create a swap chain that is associated with an <strong><see cref="T:System.IntPtr"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetHwnd']/*"/>	
            <msdn-id>hh404647</msdn-id>	
            <unmanaged>GetHwnd</unmanaged>	
            <unmanaged-short>GetHwnd</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.IsTemporaryMonoSupported">
            <summary>	
            <p>Determines whether a swap chain supports ?temporary mono.?</p>	
            </summary>	
            <remarks>	
            <p>Temporary mono is a feature where a stereo swap chain can be presented using only the content in the left buffer.  To present using the left buffer as a mono buffer, an application calls the  <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> method with the <strong><see cref="F:SharpDX.DXGI.PresentFlags.StereoTemporaryMono"/></strong> flag.  All windowed swap chains support temporary mono. However, full-screen swap chains optionally support temporary mono because not all hardware supports temporary mono on full-screen swap chains efficiently.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::IsTemporaryMonoSupported']/*"/>	
            <msdn-id>hh446794</msdn-id>	
            <unmanaged>IsTemporaryMonoSupported</unmanaged>	
            <unmanaged-short>IsTemporaryMonoSupported</unmanaged-short>	
            <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.RestrictToOutput">
            <summary>	
            <p>Gets the output (the display monitor) to which you can restrict the contents of a present operation.</p>	
            </summary>	
            <remarks>	
            <p>If the method succeeds, the runtime fills the buffer at <em>ppRestrictToOutput</em> with a reference to the restrict-to output interface. This restrict-to output interface has its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRestrictToOutput']/*"/>	
            <msdn-id>hh446788</msdn-id>	
            <unmanaged>GetRestrictToOutput</unmanaged>	
            <unmanaged-short>GetRestrictToOutput</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.BackgroundColor">
            <summary>	
            <p>Retrieves or sets the background color of the swap chain.</p>	
            </summary>	
            <remarks>	
            <p><strong>Note</strong>??The background color that <strong>GetBackgroundColor</strong> retrieves does not indicate what the screen currently displays. The background color indicates what the screen will display with your next call to the <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong> method. The default value of the background color is black with full opacity: 0,0,0,1.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetBackgroundColor']/*"/>	
            <msdn-id>hh404634</msdn-id>	
            <unmanaged>GetBackgroundColor / SetBackgroundColor</unmanaged>	
            <unmanaged-short>GetBackgroundColor</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.Rotation">
            <summary>	
            <p>Gets or sets the rotation of the back buffers for the swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRotation']/*"/>	
            <msdn-id>hh446791</msdn-id>	
            <unmanaged>GetRotation / SetRotation</unmanaged>	
            <unmanaged-short>GetRotation</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.SwapChain2">
            <summary>	
            <p>Extends <strong><see cref="T:SharpDX.DXGI.SwapChain1"/></strong> with methods to support swap back buffer scaling and lower-latency swap chains.</p>	
            </summary>	
            <remarks>	
            <p>You can create a swap chain by 	
            calling <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2']/*"/>	
            <msdn-id>dn280420</msdn-id>	
            <unmanaged>IDXGISwapChain2</unmanaged>	
            <unmanaged-short>IDXGISwapChain2</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.op_Explicit(System.IntPtr)~SharpDX.DXGI.SwapChain2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.SwapChain2"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.SetSourceSize(System.Int32,System.Int32)">
            <summary>	
            <p>Sets the source region to be used for the swap chain.</p><p>Use <strong>SetSourceSize</strong> to specify the portion of the swap chain from which the operating system presents. This allows an effective resize without calling the more-expensive <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> method. Prior to Windows?8.1, calling <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> was the only way to resize the swap chain. The source rectangle is always defined by the region [0, 0, Width, Height].</p>	
            </summary>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <returns><p>This method can return:</p><ul> <li>E_INVALIDARG if one or more parameters exceed the size of the back buffer.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::SetSourceSize']/*"/>	
            <msdn-id>dn280409</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::SetSourceSize([In] unsigned int Width,[In] unsigned int Height)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::SetSourceSize</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.GetSourceSize(System.Int32@,System.Int32@)">
            <summary>	
            <p>Gets the source region used for the swap chain.</p><p>Use <strong>GetSourceSize</strong> to get the portion of the swap chain from which the operating system presents. The source rectangle is always defined by the region [0, 0, Width, Height]. Use <strong>SetSourceSize</strong> to set this portion of the swap chain. </p>	
            </summary>	
            <param name="widthRef">No documentation.</param>	
            <param name="heightRef">No documentation.</param>	
            <returns><p> This method can return error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetSourceSize']/*"/>	
            <msdn-id>dn280408</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::GetSourceSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::GetSourceSize</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            <p>Sets the number of frames that the swap chain is allowed to queue for rendering.</p>	
            </summary>	
            <param name="maxLatency"><dd> <p>The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh (typically about 16ms) to draw.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> if the device was removed.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::SetMaximumFrameLatency']/*"/>	
            <msdn-id>dn268313</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::SetMaximumFrameLatency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.GetMaximumFrameLatency(System.Int32@)">
            <summary>	
            <p>Gets the number of frames that the swap chain is allowed to queue for rendering.</p>	
            </summary>	
            <param name="maxLatencyRef"><dd> <p>The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh (typically about 16ms) to draw.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following members of the D3DERR enumerated type:</p><ul> <li><strong>D3DERR_DEVICELOST</strong></li> <li><strong>D3DERR_DEVICEREMOVED</strong></li> <li><strong>D3DERR_DRIVERINTERNALERROR</strong></li> <li><strong>D3DERR_INVALIDCALL</strong></li> <li><strong>D3DERR_OUTOFVIDEOMEMORY</strong></li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetMaximumFrameLatency']/*"/>	
            <msdn-id>dn268311</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::GetMaximumFrameLatency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.GetFrameLatencyWaitableObject">
            <summary>	
            <p>Returns a waitable handle that signals when the DXGI adapter has finished presenting a new frame.</p><p>Windows?8.1 introduces new APIs that allow lower-latency rendering by waiting  until the previous frame is presented to the display before drawing the next frame. To use this method, first create the DXGI swap chain with the <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject"/></strong> flag set, then call <strong>GetFrameLatencyWaitableObject</strong> to retrieve the waitable handle. Use the waitable handle with <strong>WaitForSingleObjectEx</strong> to synchronize rendering of each new frame with the end of the previous frame. For every frame it renders, the app should wait on this handle before starting any rendering operations. Note that this requirement includes the first frame the app renders with the swap chain. See the DirectXLatency sample.</p>	
            </summary>	
            <returns><p>A handle to the waitable object, or <c>null</c> if the swap chain was not created with <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject"/></strong>.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetFrameLatencyWaitableObject']/*"/>	
            <msdn-id>dn268309</msdn-id>	
            <unmanaged>void* IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::GetFrameLatencyWaitableObject</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.SetMatrixTransform(SharpDX.Mathematics.Interop.RawMatrix3x2@)">
            <summary>	
            <p>Sets the transform matrix that will be applied to a composition swap chain upon the next present. </p><p>Starting with Windows?8.1, Windows Store apps are able to place DirectX swap chain visuals in XAML pages using the <strong>SwapChainPanel</strong> element, which can be placed and sized arbitrarily. This exposes the DirectX swap chain visuals to touch scaling and translation scenarios using touch UI. The <strong>GetMatrixTransform</strong> and  <strong>SetMatrixTransform</strong> methods are used to synchronize scaling of the DirectX swap chain with its associated <strong>SwapChainPanel</strong> element. Only simple scale/translation elements in the matrix are allowed ? the call will fail if the matrix contains skew/rotation elements.</p>	
            </summary>	
            <param name="matrixRef">No documentation.</param>	
            <returns><p><strong>SetMatrixTransform</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieves the transform matrix.</li> <li>E_INVALIDARG if the <em>pMatrix</em> parameter is incorrect, for example, <em>pMatrix</em> is <c>null</c> or the matrix represented by <strong><see cref="T:SharpDX.Mathematics.Interop.RawMatrix3x2"/></strong> includes components other than scale and translation.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the method is called on a swap chain that was not created with <strong>CreateSwapChainForComposition</strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::SetMatrixTransform']/*"/>	
            <msdn-id>dn268312</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::SetMatrixTransform([In] const DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::SetMatrixTransform</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain2.GetMatrixTransform(SharpDX.Mathematics.Interop.RawMatrix3x2@)">
            <summary>	
            <p>Gets the transform matrix that will be applied to a composition swap chain upon the next present. </p><p>Starting with Windows?8.1, Windows Store apps are able to place DirectX swap chain visuals in XAML pages using the <strong>SwapChainPanel</strong> element, which can be placed and sized arbitrarily. This exposes the DirectX swap chain visuals to touch scaling and translation scenarios using touch UI. The <strong>GetMatrixTransform</strong> and  <strong>SetMatrixTransform</strong> methods are used to synchronize scaling of the DirectX swap chain with its associated <strong>SwapChainPanel</strong> element. Only simple scale/translation elements in the matrix are allowed ? the call will fail if the matrix contains skew/rotation elements.</p>	
            </summary>	
            <param name="matrixRef">No documentation.</param>	
            <returns><p><strong>GetMatrixTransform</strong> returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if it successfully retrieves the transform matrix.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if the method is called on a swap chain that was not created with <strong>CreateSwapChainForComposition</strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetMatrixTransform']/*"/>	
            <msdn-id>dn268310</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::GetMatrixTransform</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChain2.MaximumFrameLatency">
            <summary>	
            <p>Gets or sets the number of frames that the swap chain is allowed to queue for rendering.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetMaximumFrameLatency']/*"/>	
            <msdn-id>dn268311</msdn-id>	
            <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>	
            <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain2.FrameLatencyWaitableObject">
            <summary>	
            <p>Returns a waitable handle that signals when the DXGI adapter has finished presenting a new frame.</p><p>Windows?8.1 introduces new APIs that allow lower-latency rendering by waiting  until the previous frame is presented to the display before drawing the next frame. To use this method, first create the DXGI swap chain with the <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject"/></strong> flag set, then call <strong>GetFrameLatencyWaitableObject</strong> to retrieve the waitable handle. Use the waitable handle with <strong>WaitForSingleObjectEx</strong> to synchronize rendering of each new frame with the end of the previous frame. For every frame it renders, the app should wait on this handle before starting any rendering operations. Note that this requirement includes the first frame the app renders with the swap chain. See the DirectXLatency sample.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetFrameLatencyWaitableObject']/*"/>	
            <msdn-id>dn268309</msdn-id>	
            <unmanaged>GetFrameLatencyWaitableObject</unmanaged>	
            <unmanaged-short>GetFrameLatencyWaitableObject</unmanaged-short>	
            <unmanaged>void* IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain2.MatrixTransform">
            <summary>	
            <p>Gets or sets the transform matrix that will be applied to a composition swap chain upon the next present. </p><p>Starting with Windows?8.1, Windows Store apps are able to place DirectX swap chain visuals in XAML pages using the <strong>SwapChainPanel</strong> element, which can be placed and sized arbitrarily. This exposes the DirectX swap chain visuals to touch scaling and translation scenarios using touch UI. The <strong>GetMatrixTransform</strong> and  <strong>SetMatrixTransform</strong> methods are used to synchronize scaling of the DirectX swap chain with its associated <strong>SwapChainPanel</strong> element. Only simple scale/translation elements in the matrix are allowed ? the call will fail if the matrix contains skew/rotation elements.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetMatrixTransform']/*"/>	
            <msdn-id>dn268310</msdn-id>	
            <unmanaged>GetMatrixTransform / SetMatrixTransform</unmanaged>	
            <unmanaged-short>GetMatrixTransform</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain2.SourceSize">
            <summary>	
            <p>[This documentation is preliminary and is subject to change.]</p><p>Gets the source region used for the swap chain.</p><p>Use <strong>GetSourceSize</strong> to get the portion of the swap chain from which the operating system presents. The source rectangle is always defined by the region [0, 0, Width, Height]. Use <strong>SetSourceSize</strong> to set this portion of the swap chain. </p>	
            </summary>	
            <param name="widthRef">No documentation.</param>	
            <param name="heightRef">No documentation.</param>	
            <returns><p> This method can return error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain2::GetSourceSize']/*"/>	
            <msdn-id>dn280408</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain2::GetSourceSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>	
            <unmanaged-short>IDXGISwapChain2::GetSourceSize</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChain3">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface implements one or more <strong>surfaces</strong> for storing rendered data before presenting it to an output.</p>	
            </summary>	
            <remarks>	
            <p>You can create a swap chain by 	
            calling <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>, or <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong>. You can also create a swap chain when you call <strong>D3D11CreateDeviceAndSwapChain</strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface provides.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3']/*"/>	
            <msdn-id>bb174569</msdn-id>	
            <unmanaged>IDXGISwapChain3</unmanaged>	
            <unmanaged-short>IDXGISwapChain3</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain3"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.op_Explicit(System.IntPtr)~SharpDX.DXGI.SwapChain3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.SwapChain3"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.GetCurrentBackBufferIndex">
            <summary>	
            <p>Gets the index of the swap chain's current back buffer.</p>	
            </summary>	
            <returns><p>Returns the index of the current back buffer.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::GetCurrentBackBufferIndex']/*"/>	
            <msdn-id>dn903675</msdn-id>	
            <unmanaged>unsigned int IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>	
            <unmanaged-short>IDXGISwapChain3::GetCurrentBackBufferIndex</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.CheckColorSpaceSupport(SharpDX.DXGI.ColorSpaceType,System.Int32@)">
            <summary>	
            <p>Checks the swap chain's support for color space.</p>	
            </summary>	
            <param name="colorSpace"><dd>  <p>A <strong><see cref="T:SharpDX.DXGI.ColorSpaceType"/></strong>-typed value that specifies color space type to check support for.</p> </dd></param>	
            <param name="colorSpaceSupportRef"><dd>  <p>A reference to a variable that receives a combination of <strong><see cref="T:SharpDX.DXGI.SwapChainColorSpaceSupportFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for color space support. </p> </dd></param>	
            <returns><p>This method returns <strong><see cref="F:SharpDX.Result.Ok"/></strong> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::CheckColorSpaceSupport']/*"/>	
            <msdn-id>dn903674</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain3::CheckColorSpaceSupport([In] DXGI_COLOR_SPACE_TYPE ColorSpace,[Out] unsigned int* pColorSpaceSupport)</unmanaged>	
            <unmanaged-short>IDXGISwapChain3::CheckColorSpaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.SetColorSpace1(SharpDX.DXGI.ColorSpaceType)">
            <summary>	
            <p>Sets the color space used by the swap chain.</p>	
            </summary>	
            <param name="colorSpace"><dd>  <p>A <strong><see cref="T:SharpDX.DXGI.ColorSpaceType"/></strong>-typed value that specifies the color space to set.</p> </dd></param>	
            <returns><p>This method returns <strong><see cref="F:SharpDX.Result.Ok"/></strong> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::SetColorSpace1']/*"/>	
            <msdn-id>dn903676</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain3::SetColorSpace1([In] DXGI_COLOR_SPACE_TYPE ColorSpace)</unmanaged>	
            <unmanaged-short>IDXGISwapChain3::SetColorSpace1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.ResizeBuffers1(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32[],SharpDX.ComObject[])">
            <summary>	
            <p> Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized. </p>	
            </summary>	
            <param name="bufferCount"><dd>  <p> The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model. </p> </dd></param>	
            <param name="width"><dd>  <p> The new width of the back buffer.  If you specify zero, DXGI will use the width of the client area of the target window.  You can't specify the width as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
            <param name="height"><dd>  <p> The new height of the back buffer.  If you specify zero, DXGI will use the height of the client area of the target window.  You can't specify the height as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
            <param name="format"><dd>  <p> A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer.  Set this value to <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer.  The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model. </p> </dd></param>	
            <param name="swapChainFlags"><dd>  <p> A combination of <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior. </p> </dd></param>	
            <param name="creationNodeMaskRef"><dd>  <p> An array of UINTs, of total size <em>BufferCount</em>, where the value indicates which node the back buffer should be created on. Buffers created using <strong>ResizeBuffers1</strong> with a non-null <em>pCreationNodeMask</em> array are visible to all nodes. </p> </dd></param>	
            <param name="presentQueueOut"><dd>  <p> An array of command queues (<strong><see cref="!:SharpDX.Direct3D12.CommandQueue"/></strong> instances), of total size <em>BufferCount</em>. Each queue provided must match the corresponding creation node mask specified in the <em>pCreationNodeMask</em> array. When <strong>Present()</strong> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation. </p> </dd></param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
            <remarks>	
            <p> This method is only valid to call when the swapchain was created using a D3D12 command queue (<strong><see cref="!:SharpDX.Direct3D12.CommandQueue"/></strong>) as an input device. </p><p> When a swapchain is created on a multi-GPU adapter, the backbuffers are all created on node 1 and only a single command queue is supported. <strong>ResizeBuffers1</strong> enables applications to create backbuffers on different nodes, allowing a different command queue to be used with each node. These capabilities enable Alternate Frame Rendering (AFR) techniques to be used with the swapchain. See Direct3D 12 Multi-Adapters. </p><p> The only difference between <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> in Windows?8 versus Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> or <see cref="F:SharpDX.DXGI.SwapEffect.FlipDiscard"/> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> method fails. </p><p> Also see the Remarks section in <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, all of which is relevant to <strong>ResizeBuffers1</strong>. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::ResizeBuffers1']/*"/>	
            <msdn-id>mt403341</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>	
            <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.ResizeBuffers1(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32[],SharpDX.ComArray{SharpDX.ComObject})">
            <summary>	
            <p> Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized. </p>	
            </summary>	
            <param name="bufferCount"><dd>  <p> The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model. </p> </dd></param>	
            <param name="width"><dd>  <p> The new width of the back buffer.  If you specify zero, DXGI will use the width of the client area of the target window.  You can't specify the width as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
            <param name="height"><dd>  <p> The new height of the back buffer.  If you specify zero, DXGI will use the height of the client area of the target window.  You can't specify the height as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
            <param name="format"><dd>  <p> A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer.  Set this value to <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer.  The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model. </p> </dd></param>	
            <param name="swapChainFlags"><dd>  <p> A combination of <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior. </p> </dd></param>	
            <param name="creationNodeMaskRef"><dd>  <p> An array of UINTs, of total size <em>BufferCount</em>, where the value indicates which node the back buffer should be created on. Buffers created using <strong>ResizeBuffers1</strong> with a non-null <em>pCreationNodeMask</em> array are visible to all nodes. </p> </dd></param>	
            <param name="presentQueueOut"><dd>  <p> An array of command queues (<strong><see cref="!:SharpDX.Direct3D12.CommandQueue"/></strong> instances), of total size <em>BufferCount</em>. Each queue provided must match the corresponding creation node mask specified in the <em>pCreationNodeMask</em> array. When <strong>Present()</strong> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation. </p> </dd></param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
            <remarks>	
            <p> This method is only valid to call when the swapchain was created using a D3D12 command queue (<strong><see cref="!:SharpDX.Direct3D12.CommandQueue"/></strong>) as an input device. </p><p> When a swapchain is created on a multi-GPU adapter, the backbuffers are all created on node 1 and only a single command queue is supported. <strong>ResizeBuffers1</strong> enables applications to create backbuffers on different nodes, allowing a different command queue to be used with each node. These capabilities enable Alternate Frame Rendering (AFR) techniques to be used with the swapchain. See Direct3D 12 Multi-Adapters. </p><p> The only difference between <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> in Windows?8 versus Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> or <see cref="F:SharpDX.DXGI.SwapEffect.FlipDiscard"/> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> method fails. </p><p> Also see the Remarks section in <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, all of which is relevant to <strong>ResizeBuffers1</strong>. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::ResizeBuffers1']/*"/>	
            <msdn-id>mt403341</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>	
            <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain3.ResizeBuffers1(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>	
            <p> Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized. </p>	
            </summary>	
            <param name="bufferCount"><dd>  <p> The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model. </p> </dd></param>	
            <param name="width"><dd>  <p> The new width of the back buffer.  If you specify zero, DXGI will use the width of the client area of the target window.  You can't specify the width as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
            <param name="height"><dd>  <p> The new height of the back buffer.  If you specify zero, DXGI will use the height of the client area of the target window.  You can't specify the height as zero if you called the <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
            <param name="format"><dd>  <p> A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer.  Set this value to <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer.  The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model. </p> </dd></param>	
            <param name="swapChainFlags"><dd>  <p> A combination of <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior. </p> </dd></param>	
            <param name="creationNodeMaskRef"><dd>  <p> An array of UINTs, of total size <em>BufferCount</em>, where the value indicates which node the back buffer should be created on. Buffers created using <strong>ResizeBuffers1</strong> with a non-null <em>pCreationNodeMask</em> array are visible to all nodes. </p> </dd></param>	
            <param name="presentQueueOut"><dd>  <p> An array of command queues (<strong><see cref="!:SharpDX.Direct3D12.CommandQueue"/></strong> instances), of total size <em>BufferCount</em>. Each queue provided must match the corresponding creation node mask specified in the <em>pCreationNodeMask</em> array. When <strong>Present()</strong> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation. </p> </dd></param>	
            <returns><p> Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
            <remarks>	
            <p> This method is only valid to call when the swapchain was created using a D3D12 command queue (<strong><see cref="!:SharpDX.Direct3D12.CommandQueue"/></strong>) as an input device. </p><p> When a swapchain is created on a multi-GPU adapter, the backbuffers are all created on node 1 and only a single command queue is supported. <strong>ResizeBuffers1</strong> enables applications to create backbuffers on different nodes, allowing a different command queue to be used with each node. These capabilities enable Alternate Frame Rendering (AFR) techniques to be used with the swapchain. See Direct3D 12 Multi-Adapters. </p><p> The only difference between <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> in Windows?8 versus Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> or <see cref="F:SharpDX.DXGI.SwapEffect.FlipDiscard"/> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> method fails. </p><p> Also see the Remarks section in <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, all of which is relevant to <strong>ResizeBuffers1</strong>. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::ResizeBuffers1']/*"/>	
            <msdn-id>mt403341</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>	
            <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChain3.CurrentBackBufferIndex">
            <summary>	
            <p>Gets the index of the swap chain's current back buffer.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::GetCurrentBackBufferIndex']/*"/>	
            <msdn-id>dn903675</msdn-id>	
            <unmanaged>GetCurrentBackBufferIndex</unmanaged>	
            <unmanaged-short>GetCurrentBackBufferIndex</unmanaged-short>	
            <unmanaged>unsigned int IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain3.ColorSpace1">
            <summary>	
            <p>Sets the color space used by the swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain3::SetColorSpace1']/*"/>	
            <msdn-id>dn903676</msdn-id>	
            <unmanaged>SetColorSpace1</unmanaged>	
            <unmanaged-short>SetColorSpace1</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain3::SetColorSpace1([In] DXGI_COLOR_SPACE_TYPE ColorSpace)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.SwapChainMedia">
            <summary>	
            <p>This swap chain interface allows desktop media applications to request a seamless change to a specific refresh rate.</p><p>For example, a media application presenting video at a typical framerate of 23.997 frames per second can request a custom refresh rate of 24 or 48 Hz to eliminate judder. If the request is approved, the app starts presenting frames at the custom refresh rate immediately - without the typical 'mode switch' a user would experience when changing the refresh rate themselves by using the control panel.</p>	
            </summary>	
            <remarks>	
            <p>Seamless changes to custom framerates can only be done on integrated panels. Custom frame rates cannot be applied to external displays. If the DXGI output adapter is attached to an external display then <strong>CheckPresentDurationSupport</strong> will return (0, 0) for upper and lower bounds, indicating that the device does not support seamless refresh rate changes.</p><p>Custom refresh rates can be used when displaying video with a dynamic framerate. However, the refresh rate change should be kept imperceptible to the user. A best practice for keeping the refresh rate transition imperceptible  is to only set the custom framerate if the app determines it can present at that rate for least 5 seconds.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChainMedia']/*"/>	
            <msdn-id>dn384131</msdn-id>	
            <unmanaged>IDXGISwapChainMedia</unmanaged>	
            <unmanaged-short>IDXGISwapChainMedia</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChainMedia.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChainMedia"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChainMedia.op_Explicit(System.IntPtr)~SharpDX.DXGI.SwapChainMedia">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.SwapChainMedia"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.SwapChainMedia.GetFrameStatisticsMedia(SharpDX.DXGI.FrameStatisticsMedia@)">
            <summary>	
            <p>Queries the system for a  <strong><see cref="T:SharpDX.DXGI.FrameStatisticsMedia"/></strong> structure that indicates whether a custom refresh rate is currently approved by the system.</p>	
            </summary>	
            <param name="statsRef">No documentation.</param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or a DXGI error code on failure.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChainMedia::GetFrameStatisticsMedia']/*"/>	
            <msdn-id>dn384133</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>	
            <unmanaged-short>IDXGISwapChainMedia::GetFrameStatisticsMedia</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChainMedia.SetPresentDuration(System.Int32)">
            <summary>	
            <p>Requests a custom presentation duration (custom refresh rate).</p>	
            </summary>	
            <param name="duration"><dd> <p>The custom presentation duration, specified in hundreds of nanoseconds.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or a DXGI error code on failure.</p></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChainMedia::SetPresentDuration']/*"/>	
            <msdn-id>dn384134</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChainMedia::SetPresentDuration([In] unsigned int Duration)</unmanaged>	
            <unmanaged-short>IDXGISwapChainMedia::SetPresentDuration</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChainMedia.CheckPresentDurationSupport(System.Int32,System.Int32@,System.Int32@)">
            <summary>	
            <p>Queries the graphics driver for a supported frame present duration corresponding to a custom refresh rate.</p>	
            </summary>	
            <param name="desiredPresentDuration"><dd> <p>Indicates the frame duration to check. This value is the duration of one frame at the desired refresh rate, specified in hundreds of nanoseconds. For example, set this field to 167777 to check for 60 Hz refresh rate support.</p> </dd></param>	
            <param name="closestSmallerPresentDurationRef"><dd> <p>A variable that will be set to the closest supported frame present duration that's smaller than the requested value, or zero if the device does not support any lower duration.</p> </dd></param>	
            <param name="closestLargerPresentDurationRef"><dd> <p>A variable that will be set to the closest supported frame present duration that's larger than the requested value, or zero if the device does not support any higher duration.</p> </dd></param>	
            <returns><p>This method returns <see cref="F:SharpDX.Result.Ok"/> on success, or a DXGI error code on failure.</p></returns>	
            <remarks>	
            <p>If the DXGI output adapter does not support custom refresh rates (for example, an external display) then the display driver will set upper and lower bounds to (0, 0).</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChainMedia::CheckPresentDurationSupport']/*"/>	
            <msdn-id>dn384132</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChainMedia::CheckPresentDurationSupport([In] unsigned int DesiredPresentDuration,[Out] unsigned int* pClosestSmallerPresentDuration,[Out] unsigned int* pClosestLargerPresentDuration)</unmanaged>	
            <unmanaged-short>IDXGISwapChainMedia::CheckPresentDurationSupport</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChainMedia.FrameStatisticsMedia">
            <summary>	
            <p>Queries the system for a  <strong><see cref="T:SharpDX.DXGI.FrameStatisticsMedia"/></strong> structure that indicates whether a custom refresh rate is currently approved by the system.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChainMedia::GetFrameStatisticsMedia']/*"/>	
            <msdn-id>dn384133</msdn-id>	
            <unmanaged>GetFrameStatisticsMedia</unmanaged>	
            <unmanaged-short>GetFrameStatisticsMedia</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChainMedia.PresentDuration">
            <summary>	
            <p>Requests a custom presentation duration (custom refresh rate).</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChainMedia::SetPresentDuration']/*"/>	
            <msdn-id>dn384134</msdn-id>	
            <unmanaged>SetPresentDuration</unmanaged>	
            <unmanaged-short>SetPresentDuration</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChainMedia::SetPresentDuration([In] unsigned int Duration)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription">
            <summary>	
            <p>Describes an adapter (or video card) by using DXGI 1.0.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure provides a description of an adapter.  This structure is initialized by using the <strong><see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>DXGI_ADAPTER_DESC</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Description">
            <summary>	
            <dd> <p>A string that contains the adapter description. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns ?Software Adapter? for the description string.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::Description']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
            <unmanaged-short>wchar_t Description</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.VendorId">
            <summary>	
            <dd> <p>The PCI ID of the hardware vendor. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the hardware vendor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::VendorId']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int VendorId</unmanaged>	
            <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DeviceId">
            <summary>	
            <dd> <p>The PCI ID of the hardware device. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the hardware device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DeviceId']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
            <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.SubsystemId">
            <summary>	
            <dd> <p>The PCI ID of the sub system. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the sub system.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::SubSysId']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
            <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Revision">
            <summary>	
            <dd> <p>The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the revision number of the adapter.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::Revision']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int Revision</unmanaged>	
            <unmanaged-short>unsigned int Revision</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DedicatedVideoMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedVideoMemory']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DedicatedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedSystemMemory']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.SharedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::SharedSystemMemory']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Luid">
            <summary>	
            <dd> <p>A unique value that identifies the adapter. See <strong><see cref="T:System.Int64"/></strong> for a definition of the structure. <strong><see cref="T:System.Int64"/></strong> is defined in dxgi.h.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::AdapterLuid']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
            <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription1">
            <summary>	
            <p>Describes an adapter (or video card) using DXGI 1.1.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> structure provides a DXGI 1.1 description of an adapter.  This structure is initialized by using the <strong><see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>DXGI_ADAPTER_DESC1</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_DESC1</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Description">
            <summary>	
            <dd> <p>A string that contains the adapter description. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns ?Software Adapter? for the description string.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Description']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
            <unmanaged-short>wchar_t Description</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.VendorId">
            <summary>	
            <dd> <p>The PCI ID of the hardware vendor. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the hardware vendor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::VendorId']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int VendorId</unmanaged>	
            <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DeviceId">
            <summary>	
            <dd> <p>The PCI ID of the hardware device. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the hardware device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DeviceId']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
            <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.SubsystemId">
            <summary>	
            <dd> <p>The PCI ID of the sub system. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the sub system.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SubSysId']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
            <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Revision">
            <summary>	
            <dd> <p>The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the revision number of the adapter.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Revision']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int Revision</unmanaged>	
            <unmanaged-short>unsigned int Revision</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DedicatedVideoMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedVideoMemory']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DedicatedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedSystemMemory']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.SharedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SharedSystemMemory']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Luid">
            <summary>	
            <dd> <p>A unique value that identifies the adapter. See <strong><see cref="T:System.Int64"/></strong> for a definition of the structure. <strong><see cref="T:System.Int64"/></strong> is defined in dxgi.h.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::AdapterLuid']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
            <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Flags">
            <summary>	
            <dd> <p>A value of the <strong><see cref="T:SharpDX.DXGI.AdapterFlags"/></strong> enumerated type that describes the adapter type.  The <strong><see cref="F:SharpDX.DXGI.AdapterFlags.Remote"/></strong> flag is reserved.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Flags']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG Flags</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG Flags</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription2">
            <summary>	
            <p>Describes an adapter (or video card) that uses Microsoft DirectX Graphics Infrastructure (DXGI) 1.2.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterDescription2"/></strong> structure provides a DXGI 1.2 description of an adapter.  This structure is initialized by using the <strong><see cref="M:SharpDX.DXGI.Adapter2.GetDescription2(SharpDX.DXGI.AdapterDescription2@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>DXGI_ADAPTER_DESC2</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_DESC2</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.Description">
            <summary>	
            <dd> <p>A string that contains the adapter description.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Description']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
            <unmanaged-short>wchar_t Description</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.VendorId">
            <summary>	
            <dd> <p>The PCI ID of the hardware vendor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::VendorId']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>unsigned int VendorId</unmanaged>	
            <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.DeviceId">
            <summary>	
            <dd> <p>The PCI ID of the hardware device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DeviceId']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
            <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.SubsystemId">
            <summary>	
            <dd> <p>The PCI ID of the sub system.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::SubSysId']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
            <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.Revision">
            <summary>	
            <dd> <p>The PCI ID of the revision number of the adapter.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Revision']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>unsigned int Revision</unmanaged>	
            <unmanaged-short>unsigned int Revision</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.DedicatedVideoMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DedicatedVideoMemory']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.DedicatedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DedicatedSystemMemory']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.SharedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::SharedSystemMemory']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.Luid">
            <summary>	
            <dd> <p>A unique value that identifies the adapter. See <strong><see cref="T:System.Int64"/></strong> for a definition of the structure. <strong><see cref="T:System.Int64"/></strong> is defined in dxgi.h.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::AdapterLuid']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
            <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.Flags">
            <summary>	
            <dd> <p>A value of the <strong><see cref="T:SharpDX.DXGI.AdapterFlags"/></strong> enumerated type that describes the adapter type.  The <strong><see cref="F:SharpDX.DXGI.AdapterFlags.Remote"/></strong> flag is reserved.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Flags']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG Flags</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG Flags</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.GraphicsPreemptionGranularity">
            <summary>	
            <dd> <p>A value of the <strong><see cref="T:SharpDX.DXGI.GraphicsPreemptionGranularity"/></strong> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::GraphicsPreemptionGranularity']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity</unmanaged>	
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription2.ComputePreemptionGranularity">
            <summary>	
            <dd> <p>A value of the <strong><see cref="T:SharpDX.DXGI.ComputePreemptionGranularity"/></strong> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current compute task.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::ComputePreemptionGranularity']/*"/>	
            <msdn-id>hh404493</msdn-id>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity</unmanaged>	
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DecodeSwapChainDescription">
            <summary>	
            <p>Used with <strong><see cref="T:SharpDX.DXGI.FactoryMedia"/></strong>::<strong>CreateDecodeSwapChainForCompositionSurfaceHandle</strong> to describe a decode swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_DECODE_SWAP_CHAIN_DESC']/*"/>	
            <msdn-id>dn384106</msdn-id>	
            <unmanaged>DXGI_DECODE_SWAP_CHAIN_DESC</unmanaged>	
            <unmanaged-short>DXGI_DECODE_SWAP_CHAIN_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DecodeSwapChainDescription.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_DECODE_SWAP_CHAIN_DESC::Flags']/*"/>	
            <msdn-id>dn384106</msdn-id>	
            <unmanaged>unsigned int Flags</unmanaged>	
            <unmanaged-short>unsigned int Flags</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.FrameStatistics">
            <summary>	
            <p>Describes timing and presentation statistics for a frame.</p>	
            </summary>	
            <remarks>	
            <p>You initialize the <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong> structure with the <strong><see cref="M:SharpDX.DXGI.Output.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong> method.</p><p>You can only use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value in the <strong>SwapEffect</strong> member of the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> structure to specify that the swap chain uses the flip presentation model.</p><p>The values in the <strong>PresentCount</strong> and <strong>PresentRefreshCount</strong> members indicate information about when a frame was presented on the display screen. You can use these values to determine whether a glitch occurred. The values in the <strong>SyncRefreshCount</strong> and <strong>SyncQPCTime</strong> members indicate timing information that you can use for audio and video synchronization or very precise animation. If the swap chain draws in full-screen mode, these values are based on when the computer booted. 	
            If the swap chain draws in windowed mode, these values are based on when the swap chain is created.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>DXGI_FRAME_STATISTICS</unmanaged>	
            <unmanaged-short>DXGI_FRAME_STATISTICS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.PresentCount">
            <summary>	
            <dd> <p>A value that represents the running total count of times that an image was presented to the monitor since the computer booted.</p> <p><strong>Note</strong>??The number of times that an image was presented to the monitor is not necessarily the same as the number of times  that you called <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,SharpDX.DXGI.PresentFlags,System.IntPtr)"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentCount']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>unsigned int PresentCount</unmanaged>	
            <unmanaged-short>unsigned int PresentCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.PresentRefreshCount">
            <summary>	
            <dd> <p>A value that represents  the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentRefreshCount']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
            <unmanaged-short>unsigned int PresentRefreshCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncRefreshCount">
            <summary>	
            <dd> <p>A value that represents  the running total count of v-blanks when the scheduler last sampled the machine time by calling <strong>QueryPerformanceCounter</strong> and that have happened since the computer booted (for windowed mode, since the swap chain was created).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncRefreshCount']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
            <unmanaged-short>unsigned int SyncRefreshCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncQPCTime">
            <summary>	
            <dd> <p>A value that represents the high-resolution performance counter timer.  This value is the same as the value returned by the <strong>QueryPerformanceCounter</strong> function.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncQPCTime']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER SyncQPCTime</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncGPUTime">
            <summary>	
            <dd> <p>Reserved. Always returns 0.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncGPUTime']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER SyncGPUTime</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.FrameStatisticsMedia">
            <summary>	
            <p>Used to verify system approval for the app's custom present duration (custom refresh rate). Approval should be continuously verified on a frame-by-frame basis.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>DXGI_FRAME_STATISTICS_MEDIA</unmanaged>	
            <unmanaged-short>DXGI_FRAME_STATISTICS_MEDIA</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.PresentCount">
            <summary>	
            <dd> <p>A value indicating the composition presentation mode. This value is used to determine whether the app should continue to use the decode swap chain. See <strong><see cref="T:SharpDX.DXGI.FramePresentationMode"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::PresentCount']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>unsigned int PresentCount</unmanaged>	
            <unmanaged-short>unsigned int PresentCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.PresentRefreshCount">
            <summary>	
            <dd> <p>If the system approves an app's custom present duration request, this field is set to the approved custom present duration.</p> <p>If the app's custom present duration request is not approved, this field is set to zero.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::PresentRefreshCount']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
            <unmanaged-short>unsigned int PresentRefreshCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.SyncRefreshCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::SyncRefreshCount']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
            <unmanaged-short>unsigned int SyncRefreshCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.SyncQPCTime">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::SyncQPCTime']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER SyncQPCTime</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.SyncGPUTime">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::SyncGPUTime']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER SyncGPUTime</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.CompositionMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::CompositionMode']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE CompositionMode</unmanaged>	
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE CompositionMode</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatisticsMedia.ApprovedPresentDuration">
            <summary>	
            <dd> <p>If the system approves an app's custom present duration request, this field is set to the approved custom present duration.</p> <p>If the app's custom present duration request is not approved, this field is set to zero.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::ApprovedPresentDuration']/*"/>	
            <msdn-id>dn384108</msdn-id>	
            <unmanaged>unsigned int ApprovedPresentDuration</unmanaged>	
            <unmanaged-short>unsigned int ApprovedPresentDuration</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.GammaControl">
            <summary>	
            <p>Controls the settings of a gamma curve.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.GammaControl"/></strong> structure is used by the <strong><see cref="M:SharpDX.DXGI.Output.SetGammaControl(SharpDX.DXGI.GammaControl@)"/></strong> method.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_GAMMA_CONTROL</unmanaged>	
            <unmanaged-short>DXGI_GAMMA_CONTROL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControl.Scale">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.Mathematics.Interop.RawColor4"/></strong> structure with scalar values that are applied to rgb values before being sent to the gamma look up table.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Scale']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_RGB Scale</unmanaged>	
            <unmanaged-short>DXGI_RGB Scale</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControl.Offset">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.Mathematics.Interop.RawColor4"/></strong> structure with offset values that are applied to the rgb values before being sent to the gamma look up table.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Offset']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_RGB Offset</unmanaged>	
            <unmanaged-short>DXGI_RGB Offset</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControl.GammaCurve">
            <summary>	
            <dd> <p>An array of <strong><see cref="T:SharpDX.Mathematics.Interop.RawColor4"/></strong> structures that control the points of a gamma curve.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::GammaCurve']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_RGB GammaCurve[1025]</unmanaged>	
            <unmanaged-short>DXGI_RGB GammaCurve</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.GammaControlCapabilities">
            <summary>	
            <p>Controls the gamma capabilities of an adapter.</p>	
            </summary>	
            <remarks>	
            <p>To get a list of the capabilities for controlling gamma correction, call <strong><see cref="M:SharpDX.DXGI.Output.GetGammaControlCapabilities(SharpDX.DXGI.GammaControlCapabilities@)"/></strong>.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged>	
            <unmanaged-short>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.IsScaleAndOffsetSupported">
            <summary>	
            <dd> <p>True if scaling and offset operations are supported during gamma correction; otherwise, false.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ScaleAndOffsetSupported']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>BOOL ScaleAndOffsetSupported</unmanaged>	
            <unmanaged-short>BOOL ScaleAndOffsetSupported</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.MaximumConvertedValue">
            <summary>	
            <dd> <p>A value describing the maximum range of the control-point positions.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MaxConvertedValue']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>float MaxConvertedValue</unmanaged>	
            <unmanaged-short>float MaxConvertedValue</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.MinimumConvertedValue">
            <summary>	
            <dd> <p>A value describing the minimum range of the control-point positions.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MinConvertedValue']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>float MinConvertedValue</unmanaged>	
            <unmanaged-short>float MinConvertedValue</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.ControlPointsCount">
            <summary>	
            <dd> <p>A value describing the number of control points in the array.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::NumGammaControlPoints']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>unsigned int NumGammaControlPoints</unmanaged>	
            <unmanaged-short>unsigned int NumGammaControlPoints</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControlCapabilities.ControlPoints">
            <summary>	
            <dd> <p>An array of values describing control points; the maximum length of control points is 1025.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ControlPointPositions']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>float ControlPointPositions[1025]</unmanaged>	
            <unmanaged-short>float ControlPointPositions</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.JpegAcHuffmanTable">
            <summary>	
            <p>Describes a JPEG AC huffman table.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_AC_HUFFMAN_TABLE']/*"/>	
            <msdn-id>dn903662</msdn-id>	
            <unmanaged>DXGI_JPEG_AC_HUFFMAN_TABLE</unmanaged>	
            <unmanaged-short>DXGI_JPEG_AC_HUFFMAN_TABLE</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.JpegAcHuffmanTable.CodeCounts">
            <summary>	
            <dd> <p>The number of codes for each code length.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_AC_HUFFMAN_TABLE::CodeCounts']/*"/>	
            <msdn-id>dn903662</msdn-id>	
            <unmanaged>unsigned char CodeCounts[16]</unmanaged>	
            <unmanaged-short>unsigned char CodeCounts</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.JpegAcHuffmanTable.CodeValues">
            <summary>	
            <dd> <p>The Huffman code values, in order of increasing code length.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_AC_HUFFMAN_TABLE::CodeValues']/*"/>	
            <msdn-id>dn903662</msdn-id>	
            <unmanaged>unsigned char CodeValues[162]</unmanaged>	
            <unmanaged-short>unsigned char CodeValues</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.JpegDeviceContextHuffmanTable">
            <summary>	
            <p>Describes a JPEG DC huffman table.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_DC_HUFFMAN_TABLE']/*"/>	
            <msdn-id>dn903663</msdn-id>	
            <unmanaged>DXGI_JPEG_DC_HUFFMAN_TABLE</unmanaged>	
            <unmanaged-short>DXGI_JPEG_DC_HUFFMAN_TABLE</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.JpegDeviceContextHuffmanTable.CodeCounts">
            <summary>	
            <dd> <p>The number of codes for each code length.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_DC_HUFFMAN_TABLE::CodeCounts']/*"/>	
            <msdn-id>dn903663</msdn-id>	
            <unmanaged>unsigned char CodeCounts[12]</unmanaged>	
            <unmanaged-short>unsigned char CodeCounts</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.JpegDeviceContextHuffmanTable.CodeValues">
            <summary>	
            <dd> <p>The Huffman code values, in order of increasing code length.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_DC_HUFFMAN_TABLE::CodeValues']/*"/>	
            <msdn-id>dn903663</msdn-id>	
            <unmanaged>unsigned char CodeValues[12]</unmanaged>	
            <unmanaged-short>unsigned char CodeValues</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.JpegQuantizationTable">
            <summary>	
            <p>Describes a JPEG quantization table.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_QUANTIZATION_TABLE']/*"/>	
            <msdn-id>dn903664</msdn-id>	
            <unmanaged>DXGI_JPEG_QUANTIZATION_TABLE</unmanaged>	
            <unmanaged-short>DXGI_JPEG_QUANTIZATION_TABLE</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.JpegQuantizationTable.Elements">
            <summary>	
            <dd> <p>An array of bytes containing the elements of the quantization table.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_JPEG_QUANTIZATION_TABLE::Elements']/*"/>	
            <msdn-id>dn903664</msdn-id>	
            <unmanaged>unsigned char Elements[64]</unmanaged>	
            <unmanaged-short>unsigned char Elements</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.MappedRectangle">
            <summary>	
            <p>Describes a mapped rectangle that is used to access a surface.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.MappedRectangle"/></strong> structure is initialized by the <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT']/*"/>	
            <msdn-id>bb173063</msdn-id>	
            <unmanaged>DXGI_MAPPED_RECT</unmanaged>	
            <unmanaged-short>DXGI_MAPPED_RECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MappedRectangle.Pitch">
            <summary>	
            <dd> <p>A value that describes the width, in bytes, of the surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT::Pitch']/*"/>	
            <msdn-id>bb173063</msdn-id>	
            <unmanaged>int Pitch</unmanaged>	
            <unmanaged-short>int Pitch</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MappedRectangle.PBits">
            <summary>	
            <dd> <p>A reference to the image buffer of the surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT::pBits']/*"/>	
            <msdn-id>bb173063</msdn-id>	
            <unmanaged>unsigned char* pBits</unmanaged>	
            <unmanaged-short>unsigned char pBits</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ModeDescription">
            <summary>	
            <p>Describes a display mode.</p>	
            </summary>	
            <remarks>	
            <p>The following format values are valid for display modes and when you create a bit-block transfer (bitblt) model swap chain. The valid values depend on the feature level that you are working with.</p><ul> <li> <p>Feature level &gt;= 9.1</p> <ul> <li> <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong> </li> <li><strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong></li> <li> <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> (except 10.x on Windows?Vista)</li> <li><strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> (except 10.x on Windows?Vista)</li> </ul> </li> <li> <p>Feature level &gt;= 10.0</p> <ul> <li> <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong> </li> <li><strong><see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/></strong></li> </ul> </li> <li> <p>Feature level &gt;= 11.0</p> <ul> <li><strong><see cref="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm"/></strong></li> </ul> </li> </ul><p>You can pass one of these format values to <strong><see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> to determine if it is a valid format for displaying on screen. If <strong><see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> returns <strong><see cref="!:SharpDX.Direct3D11.FormatSupport.Display"/></strong> in the bit field to which the <em>pFormatSupport</em> parameter points, the format is valid for displaying on screen.</p><p>Starting with Windows?8 for a flip model swap chain (that is, a swap chain that has the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong>), you must set the <strong>Format</strong> member of <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> to <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>, <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>.</p><p>Because of the relaxed render target creation rules that Direct3D 11 has for back buffers, applications can create a <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> render target view from a <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> swap chain so they can use automatic color space conversion when they render the swap chain.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_DESC</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Width">
            <summary>	
            <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/></strong> method to retrieve the assigned width value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Width']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Height">
            <summary>	
            <dd> <p>A value describing the resolution height. If you specify the height as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/></strong> method to retrieve the assigned height value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Height']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.RefreshRate">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure describing the refresh rate in hertz</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::RefreshRate']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Format">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong> structure describing the display format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Format']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.ScanlineOrdering">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type describing the scanline drawing mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::ScanlineOrdering']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Scaling">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type describing the scaling mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Scaling']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ModeDescription.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Rational,SharpDX.DXGI.Format)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.ModeDescription" /> structure.
            </summary>
            <param name = "width">The width.</param>
            <param name = "height">The height.</param>
            <param name = "refreshRate">The refresh rate.</param>
            <param name = "format">The format.</param>
        </member>
        <member name="M:SharpDX.DXGI.ModeDescription.#ctor(SharpDX.DXGI.Format)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.ModeDescription"/> struct.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="T:SharpDX.DXGI.ModeDescription1">
            <summary>	
            <p>Describes a display mode.</p>	
            </summary>	
            <remarks>	
            <p>The following format values are valid for display modes and when you create a bit-block transfer (bitblt) model swap chain. The valid values depend on the feature level that you are working with.</p><ul> <li> <p>Feature level &gt;= 9.1</p> <ul> <li> <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong> </li> <li><strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong></li> <li> <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> (except 10.x on Windows?Vista)</li> <li><strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> (except 10.x on Windows?Vista)</li> </ul> </li> <li> <p>Feature level &gt;= 10.0</p> <ul> <li> <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong> </li> <li><strong><see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/></strong></li> </ul> </li> <li> <p>Feature level &gt;= 11.0</p> <ul> <li><strong><see cref="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm"/></strong></li> </ul> </li> </ul><p>You can pass one of these format values to <strong><see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> to determine if it is a valid format for displaying on screen. If <strong><see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> returns <strong><see cref="!:SharpDX.Direct3D11.FormatSupport.Display"/></strong> in the bit field to which the <em>pFormatSupport</em> parameter points, the format is valid for displaying on screen.</p><p>Starting with Windows?8 for a flip model swap chain (that is, a swap chain that has the <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong>), you must set the <strong>Format</strong> member of <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> to <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>, <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>.</p><p>Because of the relaxed render target creation rules that Direct3D 11 has for back buffers, applications can create a <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> render target view from a <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> swap chain so they can use automatic color space conversion when they render the swap chain.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_DESC1</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC1</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Width">
            <summary>	
            <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/></strong> method to retrieve the assigned width value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Width']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Height">
            <summary>	
            <dd> <p>A value describing the resolution height. If you specify the height as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/></strong> method to retrieve the assigned height value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Height']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.RefreshRate">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure describing the refresh rate in hertz</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::RefreshRate']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Format">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong> structure describing the display format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Format']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.ScanlineOrdering">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type describing the scanline drawing mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::ScanlineOrdering']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Scaling">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type describing the scaling mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Scaling']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Stereo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Stereo']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>BOOL Stereo</unmanaged>	
            <unmanaged-short>BOOL Stereo</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDescription">
            <summary>	
            <p>Describes an output or physical connection between the adapter (video card) and a device.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.OutputDescription"/></strong> structure is initialized by the <strong><see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>DXGI_OUTPUT_DESC</unmanaged>	
            <unmanaged-short>DXGI_OUTPUT_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.DeviceName">
            <summary>	
            <dd> <p>A string that contains the name of the output device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::DeviceName']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>wchar_t DeviceName[32]</unmanaged>	
            <unmanaged-short>wchar_t DeviceName</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.DesktopBounds">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop.	
            For info about writing DPI-aware Win32 apps, see High DPI.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::DesktopCoordinates']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>RECT DesktopCoordinates</unmanaged>	
            <unmanaged-short>RECT DesktopCoordinates</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.IsAttachedToDesktop">
            <summary>	
            <dd> <p>True if the output is attached to the desktop; otherwise, false.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::AttachedToDesktop']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>BOOL AttachedToDesktop</unmanaged>	
            <unmanaged-short>BOOL AttachedToDesktop</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.Rotation">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeRotation"/></strong> enumerated type describing on how an image is rotated by the output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::Rotation']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION Rotation</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.MonitorHandle">
            <summary>	
            <dd> <p>An <strong><see cref="T:System.IntPtr"/></strong> handle that represents the display monitor. For more information, see <see cref="T:System.IntPtr"/> and the Device Context.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::Monitor']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>HMONITOR Monitor</unmanaged>	
            <unmanaged-short>HMONITOR Monitor</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplicateDescription">
            <summary>	
            <p>The <see cref="T:SharpDX.DXGI.OutputDuplicateDescription"/> structure describes the dimension of the output and the surface that contains the desktop image. The format of the desktop image is always <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC']/*"/>	
            <msdn-id>hh404510</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_DESC</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateDescription.ModeDescription">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC::ModeDesc']/*"/>	
            <msdn-id>hh404510</msdn-id>	
            <unmanaged>DXGI_MODE_DESC ModeDesc</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC ModeDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateDescription.Rotation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC::Rotation']/*"/>	
            <msdn-id>hh404510</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION Rotation</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateDescription.DesktopImageInSystemMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC::DesktopImageInSystemMemory']/*"/>	
            <msdn-id>hh404510</msdn-id>	
            <unmanaged>BOOL DesktopImageInSystemMemory</unmanaged>	
            <unmanaged-short>BOOL DesktopImageInSystemMemory</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplicateFrameInformation">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.OutputDuplicateFrameInformation"/></strong> structure describes the current desktop image.</p>	
            </summary>	
            <remarks>	
            <p>A non-zero <strong>LastMouseUpdateTime</strong> indicates an update to either a mouse reference position or a mouse reference position and shape. That is, the mouse reference position is always valid for a non-zero <strong>LastMouseUpdateTime</strong>; however, the application must check the value of the <strong>PointerShapeBufferSize</strong> member to determine whether the shape was updated too.</p><p>If only the reference was updated (that is, the desktop image was not updated), the <strong>AccumulatedFrames</strong>, <strong>TotalMetadataBufferSize</strong>, and <strong>LastPresentTime</strong> members are set to zero.</p><p>An <strong>AccumulatedFrames</strong> value of one indicates that the application completed processing the last frame before a new desktop image was presented.  If the <strong>AccumulatedFrames</strong> value is greater than one, more desktop image updates have occurred while the application processed the last desktop update. In this situation, the operating system accumulated the update regions. For more information about desktop updates, see Desktop Update Data.</p><p>A non-zero <strong>TotalMetadataBufferSize</strong> indicates the total size of the buffers that are required to store all the desktop update metadata.  An application cannot determine the size of each type of metadata.  The application must call the <strong><see cref="M:SharpDX.DXGI.OutputDuplication.GetFrameDirtyRects(System.Int32,SharpDX.Mathematics.Interop.RawRectangle[],System.Int32@)"/></strong>, <strong><see cref="M:SharpDX.DXGI.OutputDuplication.GetFrameMoveRects(System.Int32,SharpDX.DXGI.OutputDuplicateMoveRectangle[],System.Int32@)"/></strong>, or <strong><see cref="M:SharpDX.DXGI.OutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,SharpDX.DXGI.OutputDuplicatePointerShapeInformation@)"/></strong> method to obtain information about each type of metadata.</p><p><strong>Note</strong>??To correct visual effects, an application must process the move region data before it processes the dirty rectangles.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_FRAME_INFO</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_FRAME_INFO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.LastPresentTime">
            <summary>	
            <dd> <p>The time stamp of the last update of the desktop image.  The operating system calls the <strong>QueryPerformanceCounter</strong> function to obtain the value. A zero value indicates that the desktop image was not updated since an application last called the <strong><see cref="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutputDuplicateFrameInformation@,SharpDX.DXGI.Resource@)"/></strong> method to acquire the next frame of the desktop image.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::LastPresentTime']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>LARGE_INTEGER LastPresentTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER LastPresentTime</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.LastMouseUpdateTime">
            <summary>	
            <dd> <p>The time stamp of the last update to the mouse.  The operating system calls the <strong>QueryPerformanceCounter</strong> function to obtain the value. A zero value indicates that the position or shape of the mouse was not updated since an application last called the <strong><see cref="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutputDuplicateFrameInformation@,SharpDX.DXGI.Resource@)"/></strong> method to acquire the next frame of the desktop image.  The mouse position is always supplied for a mouse update. A new reference shape is indicated by a non-zero value in the <strong>PointerShapeBufferSize</strong> member.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::LastMouseUpdateTime']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>LARGE_INTEGER LastMouseUpdateTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER LastMouseUpdateTime</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.AccumulatedFrames">
            <summary>	
            <dd> <p>The number of frames that the operating system accumulated in the desktop image surface since the calling application processed the last desktop image.  For more information about this number, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::AccumulatedFrames']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>unsigned int AccumulatedFrames</unmanaged>	
            <unmanaged-short>unsigned int AccumulatedFrames</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.RectsCoalesced">
            <summary>	
            <dd> <p>Specifies whether the operating system accumulated updates by coalescing dirty regions. Therefore,  the dirty regions might contain unmodified pixels. <strong>TRUE</strong> if dirty regions were accumulated; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::RectsCoalesced']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>BOOL RectsCoalesced</unmanaged>	
            <unmanaged-short>BOOL RectsCoalesced</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.ProtectedContentMaskedOut">
            <summary>	
            <dd> <p>Specifies whether the desktop image might contain protected content that was already blacked out in the desktop image.  <strong>TRUE</strong> if protected content was already blacked; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>. The application can use this information to notify the remote user that some of the desktop content might be protected and therefore not visible.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::ProtectedContentMaskedOut']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>BOOL ProtectedContentMaskedOut</unmanaged>	
            <unmanaged-short>BOOL ProtectedContentMaskedOut</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.PointerPosition">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerPosition"/></strong> structure that describes the most recent mouse position if the <strong>LastMouseUpdateTime</strong> member is a non-zero value; otherwise, this value is ignored. This value provides the coordinates of the location where the top-left-hand corner of the reference shape is drawn; this value is not the desktop position of the hot spot.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::PointerPosition']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_POSITION PointerPosition</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_POSITION PointerPosition</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.TotalMetadataBufferSize">
            <summary>	
            <dd> <p>Size in bytes of the buffers to store all the desktop update metadata for this frame. For more information about this size, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::TotalMetadataBufferSize']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>unsigned int TotalMetadataBufferSize</unmanaged>	
            <unmanaged-short>unsigned int TotalMetadataBufferSize</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateFrameInformation.PointerShapeBufferSize">
            <summary>	
            <dd> <p>Size in bytes of the buffer to hold the new pixel data for the mouse shape. For more information about this size, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::PointerShapeBufferSize']/*"/>	
            <msdn-id>hh404512</msdn-id>	
            <unmanaged>unsigned int PointerShapeBufferSize</unmanaged>	
            <unmanaged-short>unsigned int PointerShapeBufferSize</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplicateMoveRectangle">
            <summary>	
            <p>The  <strong><see cref="T:SharpDX.DXGI.OutputDuplicateMoveRectangle"/></strong> structure describes the movement of a  rectangle.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT']/*"/>	
            <msdn-id>hh404514</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_MOVE_RECT</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_MOVE_RECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateMoveRectangle.SourcePoint">
            <summary>	
            <dd> <p>The starting position of a rectangle.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT::SourcePoint']/*"/>	
            <msdn-id>hh404514</msdn-id>	
            <unmanaged>POINT SourcePoint</unmanaged>	
            <unmanaged-short>POINT SourcePoint</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicateMoveRectangle.DestinationRect">
            <summary>	
            <dd> <p>The target region to which to move a rectangle.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT::DestinationRect']/*"/>	
            <msdn-id>hh404514</msdn-id>	
            <unmanaged>RECT DestinationRect</unmanaged>	
            <unmanaged-short>RECT DestinationRect</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplicatePointerPosition">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerPosition"/></strong> structure describes the position of the hardware cursor.</p>	
            </summary>	
            <remarks>	
            <p>The <strong>Position</strong> member is valid only if the <strong>Visible</strong> member?s value is set to <strong>TRUE</strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION']/*"/>	
            <msdn-id>hh404516</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_POSITION</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_POSITION</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerPosition.Position">
            <summary>	
            <dd> <p>The position of the hardware cursor relative to the top-left of the adapter output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION::Position']/*"/>	
            <msdn-id>hh404516</msdn-id>	
            <unmanaged>POINT Position</unmanaged>	
            <unmanaged-short>POINT Position</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerPosition.Visible">
            <summary>	
            <dd> <p>Specifies whether the hardware cursor is visible. <strong>TRUE</strong> if visible; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>. If the hardware cursor is not visible, the calling application does not display the cursor in the client.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION::Visible']/*"/>	
            <msdn-id>hh404516</msdn-id>	
            <unmanaged>BOOL Visible</unmanaged>	
            <unmanaged-short>BOOL Visible</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplicatePointerShapeInformation">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerShapeInformation"/></strong> structure describes information about the cursor shape.</p>	
            </summary>	
            <remarks>	
            <p>An application draws the cursor shape with the top-left-hand corner drawn at the position that the <strong>Position</strong> member of the  <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerPosition"/></strong> structure specifies; the application does not use the hot spot to draw the cursor shape.</p><p>An application calls the  <strong><see cref="M:SharpDX.DXGI.OutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,SharpDX.DXGI.OutputDuplicatePointerShapeInformation@)"/></strong> method to retrieve cursor shape information in a  <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerShapeInformation"/></strong> structure.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO']/*"/>	
            <msdn-id>hh404518</msdn-id>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged>	
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeInformation.Type">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.OutputDuplicatePointerShapeType"/></strong>-typed value that specifies the type of cursor shape. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Type']/*"/>	
            <msdn-id>hh404518</msdn-id>	
            <unmanaged>unsigned int Type</unmanaged>	
            <unmanaged-short>unsigned int Type</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeInformation.Width">
            <summary>	
            <dd> <p>The width in pixels of the mouse cursor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Width']/*"/>	
            <msdn-id>hh404518</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeInformation.Height">
            <summary>	
            <dd> <p>The height in scan lines of the mouse cursor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Height']/*"/>	
            <msdn-id>hh404518</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeInformation.Pitch">
            <summary>	
            <dd> <p>The width in bytes of the mouse cursor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Pitch']/*"/>	
            <msdn-id>hh404518</msdn-id>	
            <unmanaged>unsigned int Pitch</unmanaged>	
            <unmanaged-short>unsigned int Pitch</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDuplicatePointerShapeInformation.HotSpot">
            <summary>	
            <dd> <p>The position of the cursor's hot spot relative to its upper-left pixel. An application does not use the hot spot when it determines where to draw the cursor shape.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::HotSpot']/*"/>	
            <msdn-id>hh404518</msdn-id>	
            <unmanaged>POINT HotSpot</unmanaged>	
            <unmanaged-short>POINT HotSpot</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.PresentParameters">
            <summary>	
            <p>Describes information about present that helps the operating system optimize presentation.</p>	
            </summary>	
            <remarks>	
            <p>The scroll rectangle and the list of dirty rectangles could overlap.  In this situation, the dirty rectangles take priority. Applications can then have pieces of dynamic content on top of a scrolled area. For example, an application could scroll a page and play video at the same time.</p><p>The following diagram and coordinates illustrate this example.</p><code> DirtyRectsCount = 2	
            pDirtyRects[ 0 ] = { 10, 30, 40, 50 } // Video	
            pDirtyRects[ 1 ] = { 0, 70, 50, 80 } // New line	
            *pScrollRect = { 0, 0, 50, 70 }	
            *pScrollOffset = { 0, -10 }	
            </code><p>Parts of the previous frame and content that the application renders are combined to produce the final frame that the operating system presents on the display screen. Most of the window is scrolled from the previous frame. The  application must update the video frame with the new chunk of content that appears due to scrolling.</p><p>The dashed rectangle shows the scroll rectangle in the current frame. The scroll rectangle is  specified by the <strong>pScrollRect</strong> member.	
            The arrow shows the scroll offset. The scroll offset is specified by the <strong>pScrollOffset</strong> member.	
            Filled rectangles show dirty rectangles that the application updated with new content. The filled rectangles are specified by the <strong>DirtyRectsCount</strong> and <strong>pDirtyRects</strong> members.</p><p>The scroll rectangle and offset are not supported for the <strong><see cref="F:SharpDX.DXGI.SwapEffect.Discard"/></strong> or <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> present option. Dirty rectangles and scroll rectangle are not supported for multisampled swap chains.</p><p>The actual implementation of composition and necessary bitblts is different for the bitblt model and the flip model. For more info about these models, see DXGI Flip Model.</p><p>For more info about the flip-model swap chain and optimizing presentation, see Enhancing presentation with the flip model, dirty rectangles, and scrolled areas.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS']/*"/>	
            <msdn-id>hh404522</msdn-id>	
            <unmanaged>DXGI_PRESENT_PARAMETERS</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_PARAMETERS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.DirtyRectsCount">
            <summary>	
            <dd> <p>The number of updated rectangles that you update in the back buffer for the presented frame. The operating system uses this information to optimize presentation. You can set this member to 0 to indicate that you update the whole frame.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::DirtyRectsCount']/*"/>	
            <msdn-id>hh404522</msdn-id>	
            <unmanaged>unsigned int DirtyRectsCount</unmanaged>	
            <unmanaged-short>unsigned int DirtyRectsCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.PDirtyRects">
            <summary>	
            <dd> <p>A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame. For more information about updating dirty rectangles, see Remarks. You can set this member to <strong><c>null</c></strong> if <strong>DirtyRectsCount</strong> is 0. An application must not update any pixel outside of the dirty rectangles.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pDirtyRects']/*"/>	
            <msdn-id>hh404522</msdn-id>	
            <unmanaged>RECT* pDirtyRects</unmanaged>	
            <unmanaged-short>RECT pDirtyRects</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.PScrollRect">
            <summary>	
            <dd> <p> A reference to the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers (bitblts) content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.</p> <p>The scrolled rectangle also describes the destination rectangle, that is, the region on the current frame that is filled with scrolled content. You can set this member to <strong><c>null</c></strong> to indicate that no content is scrolled from the previous frame.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pScrollRect']/*"/>	
            <msdn-id>hh404522</msdn-id>	
            <unmanaged>RECT* pScrollRect</unmanaged>	
            <unmanaged-short>RECT pScrollRect</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.PScrollOffset">
            <summary>	
            <dd> <p>A reference to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). You can set this member to <strong><c>null</c></strong> to indicate no offset.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pScrollOffset']/*"/>	
            <msdn-id>hh404522</msdn-id>	
            <unmanaged>POINT* pScrollOffset</unmanaged>	
            <unmanaged-short>POINT pScrollOffset</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.DirtyRectangles">
            <summary>	
            <para>A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame. For more information about updating dirty rectangles, see Remarks. You can set this member to <c>null</c> if DirtyRectsCount is 0. An application must not update any pixel outside of the dirty rectangles.</para>	
            </summary>	
            <unmanaged>RECT* pDirtyRects</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.ScrollRectangle">
            <summary>	
            <para> A reference to the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers (bitblts) content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.</para>	
             <para>The scrolled rectangle also describes the destination rectangle, that is, the region on the current frame that is filled with scrolled content. You can set this member to <c>null</c> to indicate that no content is scrolled from the previous frame.</para>	
            </summary>	
            <unmanaged>RECT* pScrollRect</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.ScrollOffset">
            <summary>	
            <para>A reference to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). You can set this member to <c>null</c> to indicate no offset.</para>	
            </summary>	
            <unmanaged>POINT* pScrollOffset</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.QueryVideoMemoryInformation">
            <summary>	
            <p>Describes the current video memory budgeting parameters.</p>	
            </summary>	
            <remarks>	
            <p>Use this structure with <strong>QueryVideoMemoryInfo</strong>.</p><p>Refer to the remarks for <strong><see cref="!:SharpDX.Direct3D12.MemoryPool"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO']/*"/>	
            <msdn-id>dn933220</msdn-id>	
            <unmanaged>DXGI_QUERY_VIDEO_MEMORY_INFO</unmanaged>	
            <unmanaged-short>DXGI_QUERY_VIDEO_MEMORY_INFO</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.QueryVideoMemoryInformation.Budget">
            <summary>	
            <dd> <p>Specifies the OS-provided video memory budget, in bytes, that the application should target. If <em>CurrentUsage</em> is greater than <em>Budget</em>, the application may incur stuttering or performance penalties due to background activity by the OS to provide other applications with a fair usage of video memory.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::Budget']/*"/>	
            <msdn-id>dn933220</msdn-id>	
            <unmanaged>unsigned longlong Budget</unmanaged>	
            <unmanaged-short>unsigned longlong Budget</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.QueryVideoMemoryInformation.CurrentUsage">
            <summary>	
            <dd> <p> Specifies the application?s current video memory usage, in bytes.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::CurrentUsage']/*"/>	
            <msdn-id>dn933220</msdn-id>	
            <unmanaged>unsigned longlong CurrentUsage</unmanaged>	
            <unmanaged-short>unsigned longlong CurrentUsage</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.QueryVideoMemoryInformation.AvailableForReservation">
            <summary>	
            <dd> <p> The amount of video memory, in bytes, that the application has available for reservation. To reserve this video memory, the application should call <strong><see cref="M:SharpDX.DXGI.Adapter3.SetVideoMemoryReservation(System.Int32,SharpDX.DXGI.MemorySegmentGroup,System.Int64)"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::AvailableForReservation']/*"/>	
            <msdn-id>dn933220</msdn-id>	
            <unmanaged>unsigned longlong AvailableForReservation</unmanaged>	
            <unmanaged-short>unsigned longlong AvailableForReservation</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.QueryVideoMemoryInformation.CurrentReservation">
            <summary>	
            <dd> <p> The amount of video memory, in bytes, that is reserved by the application. The OS uses the reservation as a hint to determine the application?s minimum working set. Applications should attempt to ensure that their video memory usage can be trimmed to meet this requirement. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::CurrentReservation']/*"/>	
            <msdn-id>dn933220</msdn-id>	
            <unmanaged>unsigned longlong CurrentReservation</unmanaged>	
            <unmanaged-short>unsigned longlong CurrentReservation</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Rational">
            <summary>	
            <p>Represents a rational number.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure operates under the following rules:</p><ul> <li>0/0 is legal and will be interpreted as 0/1.</li> <li>0/anything is interpreted as zero.</li> <li>If you are representing a whole number, the denominator should be 1.</li> </ul>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL']/*"/>	
            <msdn-id>bb173069</msdn-id>	
            <unmanaged>DXGI_RATIONAL</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Numerator">
            <summary>	
            <dd> <p>An unsigned integer value representing the top of the rational number.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL::Numerator']/*"/>	
            <msdn-id>bb173069</msdn-id>	
            <unmanaged>unsigned int Numerator</unmanaged>	
            <unmanaged-short>unsigned int Numerator</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Denominator">
            <summary>	
            <dd> <p>An unsigned integer value representing the bottom of the rational number.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL::Denominator']/*"/>	
            <msdn-id>bb173069</msdn-id>	
            <unmanaged>unsigned int Denominator</unmanaged>	
            <unmanaged-short>unsigned int Denominator</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Empty">
            <summary>
            An empty rational that can be used for comparisons. 
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.Rational" /> structure.
            </summary>
            <param name = "numerator">The numerator of the rational pair.</param>
            <param name = "denominator">The denominator of the rational pair.</param>
        </member>
        <member name="T:SharpDX.DXGI.SampleDescription">
            <summary>	
            <p>Describes multi-sampling parameters for a resource.</p>	
            </summary>	
            <remarks>	
            <p>The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0.</p><p>If multi-sample antialiasing is being used, all bound render targets and depth buffers must have the same sample counts and quality levels.</p><table> <tr><td> <p>Differences between Direct3D 10.0 and Direct3D 10.1 and between Direct3D 10.0 and Direct3D 11:</p> <p>Direct3D 10.1 has defined two standard quality levels:   <strong>D3D10_STANDARD_MULTISAMPLE_PATTERN</strong> and <strong>D3D10_CENTER_MULTISAMPLE_PATTERN</strong> in the <strong>D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS</strong> enumeration in D3D10_1.h.</p> <p>Direct3D 11 has defined two standard quality levels:   <strong><see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels.StandardMultisamplePattern"/></strong> and <strong><see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels.CenterMultisamplePattern"/></strong> in the <strong><see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels"/></strong> enumeration in D3D11.h.</p> </td></tr> </table><p>?</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC']/*"/>	
            <msdn-id>bb173072</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SampleDescription.Count">
            <summary>	
            <dd> <p>The number of multisamples per pixel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC::Count']/*"/>	
            <msdn-id>bb173072</msdn-id>	
            <unmanaged>unsigned int Count</unmanaged>	
            <unmanaged-short>unsigned int Count</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SampleDescription.Quality">
            <summary>	
            <dd> <p>The image quality level. The higher the quality, the lower the performance. The valid range is between zero and one less than the level returned  by <strong>ID3D10Device::CheckMultisampleQualityLevels</strong> for Direct3D 10 or <strong><see cref="!:SharpDX.Direct3D11.Device.CheckMultisampleQualityLevels"/></strong> for Direct3D 11.</p> <p>For Direct3D 10.1 and Direct3D 11, you can use two special quality level values. For more information about these quality level values, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC::Quality']/*"/>	
            <msdn-id>bb173072</msdn-id>	
            <unmanaged>unsigned int Quality</unmanaged>	
            <unmanaged-short>unsigned int Quality</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SampleDescription.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.SampleDescription" /> structure.
            </summary>
            <param name = "count">The sample count.</param>
            <param name = "quality">The sample quality.</param>
        </member>
        <member name="T:SharpDX.DXGI.SharedResource">
            <summary>	
            <p>Represents a handle to a shared resource.</p>	
            </summary>	
            <remarks>	
            <p>To create a shared surface, pass a shared-resource handle into the <strong><see cref="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE']/*"/>	
            <msdn-id>bb173073</msdn-id>	
            <unmanaged>DXGI_SHARED_RESOURCE</unmanaged>	
            <unmanaged-short>DXGI_SHARED_RESOURCE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResource.Handle">
            <summary>	
            <dd> <p>A handle to a shared resource.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE::Handle']/*"/>	
            <msdn-id>bb173073</msdn-id>	
            <unmanaged>void* Handle</unmanaged>	
            <unmanaged-short>void Handle</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SurfaceDescription">
            <summary>	
            <p>Describes a surface.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>DXGI_SURFACE_DESC</unmanaged>	
            <unmanaged-short>DXGI_SURFACE_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Width">
            <summary>	
            <dd> <p>A value describing the surface width.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Width']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Height">
            <summary>	
            <dd> <p>A value describing the surface height.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Height']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Format">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.Format"/></strong> enumerated type that describes the surface format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Format']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.SampleDescription">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> structure that describes multi-sampling parameters for the surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::SampleDesc']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainDescription">
            <summary>	
            <p>Describes a swap chain.</p>	
            </summary>	
            <remarks>	
            <p>In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.</p><p>If you create a swap chain with one buffer, specifying <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> does not cause the contents of the single  buffer to be swapped with the front buffer.</p><p>For performance information about flipping swap-chain buffers in full-screen application,  see Full-Screen Application Performance Hints.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.ModeDescription">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> structure that describes the backbuffer display mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferDesc']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC BufferDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.SampleDescription">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> structure that describes multi-sampling parameters.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SampleDesc']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.Usage">
            <summary>	
            <dd> <p>A member of the <strong>DXGI_USAGE</strong> enumerated type that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferUsage']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
            <unmanaged-short>DXGI_USAGE_ENUM BufferUsage</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.BufferCount">
            <summary>	
            <dd> <p>A value that describes the number of buffers in the swap chain. When you call  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> to create a full-screen swap chain, you typically include the front buffer in this value. For more information about swap-chain buffers, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferCount']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>unsigned int BufferCount</unmanaged>	
            <unmanaged-short>unsigned int BufferCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.OutputHandle">
            <summary>	
            <dd> <p>An <strong><see cref="T:System.IntPtr"/></strong> handle to the output window. This member must not be <strong><c>null</c></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::OutputWindow']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>HWND OutputWindow</unmanaged>	
            <unmanaged-short>HWND OutputWindow</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.IsWindowed">
            <summary>	
            <dd> <p>A Boolean value that specifies whether the output is in windowed mode. <strong>TRUE</strong> if the output is in windowed mode; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>. </p> <p>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <strong><see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Mathematics.Interop.RawBool,SharpDX.DXGI.Output)"/></strong>; that is, do not set this member to <see cref="F:SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes through the <strong>BufferDesc</strong> member because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. </p> <p>For more information about choosing windowed verses full screen, see <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Windowed']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>BOOL Windowed</unmanaged>	
            <unmanaged-short>BOOL Windowed</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.SwapEffect">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.SwapEffect"/></strong> enumerated type that describes options for handling the contents of the presentation buffer after  presenting a surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SwapEffect']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT SwapEffect</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.Flags">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> enumerated type that describes options for swap-chain behavior.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Flags']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainDescription1">
            <summary>	
            <p>Describes a swap chain.</p>	
            </summary>	
            <remarks>	
            <p><strong>Note</strong>??You cannot cast a  <strong><see cref="T:SharpDX.DXGI.SwapChainDescription1"/></strong> to a  <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> and vice versa. An  application must explicitly use the  <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong> method to  retrieve the newer version of the swap-chain description structure.</p><p>In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.</p><p>For a flip-model swap chain (that is, a swap  chain that has the  <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member), you must set the  <strong>Format</strong> member to  <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>,  <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or  <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>; you must set the  <strong>Count</strong> member of the  <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> structure that the  <strong>SampleDesc</strong> member specifies to one and the <strong>Quality</strong> member  of <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> to zero because multiple  sample antialiasing (MSAA) is not supported; you must set the <strong>BufferCount</strong> member to  from two to sixteen. For more info about flip-model swap chain, see  DXGI Flip Model.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_DESC1</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_DESC1</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Width">
            <summary>	
            <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value  to the swap-chain description. You can subsequently call the  <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong> method to  retrieve the assigned width value. You cannot specify the width as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Width']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Height">
            <summary>	
            <dd> <p>A value that describes the resolution height. If you specify the height as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullScreenDescription},SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height  value to the swap-chain description. You can subsequently call the  <strong><see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/></strong> method to  retrieve the assigned height value. You cannot specify the height as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Height']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Format">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong> structure that describes the  display format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Format']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Stereo">
            <summary>	
            <dd> <p>Specifies whether the full-screen display mode or the swap-chain back buffer is stereo.  <strong>TRUE</strong> if stereo; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>. If you specify stereo, you  must also specify a flip-model swap chain (that is, a swap chain that has the  <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Stereo']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>BOOL Stereo</unmanaged>	
            <unmanaged-short>BOOL Stereo</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.SampleDescription">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> structure that  describes multi-sampling parameters. This member is valid only with bit-block transfer (bitblt) model swap  chains.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::SampleDesc']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Usage">
            <summary>	
            <dd> <p>A <strong>DXGI_USAGE</strong>-typed value that describes the  surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or  render-target output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::BufferUsage']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
            <unmanaged-short>DXGI_USAGE_ENUM BufferUsage</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.BufferCount">
            <summary>	
            <dd> <p>A value that describes the number of buffers in the swap chain. When you create a full-screen swap chain,  you typically include the front buffer in this value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::BufferCount']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>unsigned int BufferCount</unmanaged>	
            <unmanaged-short>unsigned int BufferCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Scaling">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Scaling"/></strong>-typed value that identifies  resize behavior if the size of the back buffer is not equal to the target output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Scaling']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_SCALING Scaling</unmanaged>	
            <unmanaged-short>DXGI_SCALING Scaling</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.SwapEffect">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.SwapEffect"/></strong>-typed value  that describes the presentation model that is used by the swap chain and options for handling the contents of  the presentation buffer after presenting a surface. You must specify the  <strong><see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value when you call the  <strong><see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForComposition(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output,SharpDX.DXGI.SwapChain1)"/></strong> method because this method supports only flip  presentation model.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::SwapEffect']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT SwapEffect</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.AlphaMode">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.AlphaMode"/></strong>-typed value that  identifies the transparency behavior of the swap-chain back buffer.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::AlphaMode']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_ALPHA_MODE AlphaMode</unmanaged>	
            <unmanaged-short>DXGI_ALPHA_MODE AlphaMode</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Flags">
            <summary>	
            <dd> <p>A combination of  <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are  combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Flags']/*"/>	
            <msdn-id>hh404528</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainFullScreenDescription">
            <summary>	
            <p>Describes full-screen mode for a swap chain.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC']/*"/>	
            <msdn-id>hh404531</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullScreenDescription.RefreshRate">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure that describes the refresh rate in hertz.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::RefreshRate']/*"/>	
            <msdn-id>hh404531</msdn-id>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullScreenDescription.ScanlineOrdering">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type that describes the scan-line drawing mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::ScanlineOrdering']/*"/>	
            <msdn-id>hh404531</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullScreenDescription.Scaling">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type that describes the scaling mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::Scaling']/*"/>	
            <msdn-id>hh404531</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullScreenDescription.Windowed">
            <summary>	
            <dd> <p>A Boolean value that specifies whether the swap chain is in windowed mode. <strong>TRUE</strong> if the swap chain is in windowed mode; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::Windowed']/*"/>	
            <msdn-id>hh404531</msdn-id>	
            <unmanaged>BOOL Windowed</unmanaged>	
            <unmanaged-short>BOOL Windowed</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ModuleInit">
            <summary>
            Internal class used to initialize this assembly.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.ModuleInit.Setup">
            <summary>
            Initializes this assembly.
            </summary>
            <remarks>
            This method is called when the assembly is loaded.
            </remarks>
        </member>
        <member name="T:SharpDX.DXGI.VirtualSurfaceUpdatesCallbackNativeShadow">
            <summary>
            Internal VirtualSurfaceUpdatesCallbackNative Callback
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.VirtualSurfaceUpdatesCallbackNativeShadow.ToIntPtr(SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative)">
            <summary>
            Get a native callback pointer from a managed callback.
            </summary>
            <param name="virtualSurfaceUpdatesCallbackNative">The geometry sink.</param>
            <returns>A pointer to the unmanaged geometry sink counterpart</returns>
        </member>
    </members>
</doc>
